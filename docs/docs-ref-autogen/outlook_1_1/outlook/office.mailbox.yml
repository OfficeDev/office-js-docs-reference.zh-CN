### YamlMime:TSType
name: Office.Mailbox
uid: outlook!Office.Mailbox:interface
package: outlook!
fullName: Office.Mailbox
summary: >-
  提供对 Microsoft Outlook 加载项对象模型的访问权限。


  主要属性：


  - `diagnostics`<!-- -->：将诊断信息提供给 Outlook 外接程序。


  - `item`<!-- -->：提供用于访问 Outlook 外接程序中的邮件或约会的方法和属性。


  - `userProfile`<!-- -->：提供有关 Outlook 外接程序中的用户的信息。
remarks: >-
  **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


  **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
isPreview: false
isDeprecated: false
type: interface
properties:
- name: diagnostics
  uid: outlook!Office.Mailbox#diagnostics:member
  package: outlook!
  fullName: diagnostics
  summary: >-
    将诊断信息提供给 Outlook 外接程序。


    包含以下成员：


    - `hostName` (字符串) ：一个表示主机应用程序的名称的字符串。 它应为下列值之一： `Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->，或者 `OutlookAndroid`<!-- -->. **注意**：为 outlook 在桌面客户端上的 "outlook" 值返回 (即 Windows 和 Mac) 。


    - `hostVersion` (字符串) ：一个字符串，表示主机应用程序或 Exchange Server 的版本 (例如，"15.0.468.0" ) 。 如果邮件外接程序在桌面或移动客户端上的 Outlook 中运行，则该 `hostVersion` 属性将返回主机应用程序（Outlook）的版本。 在 Outlook 网页版中，该属性返回的是 Exchange 服务器的版本。


    - `OWAView` (`MailboxEnums.OWAView` 或字符串) ：代表 web 上的 Outlook 当前视图的枚举 (或字符串文本) 。 如果主机应用程序不是 web 上的 Outlook，则访问此属性将导致未定义。 Web 上的 Outlook 有三个视图 (-当屏幕变宽时显示; 当屏幕变宽时显示; `OneColumn` `TwoColumns` `ThreeColumns` 当) 屏幕宽度与屏幕和窗口的宽度相对应时显示，以及可以显示的列数。


    有关详细信息，请与 [Office 诊断](xref:outlook!Office.Diagnostics:interface)<!-- -->.
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'diagnostics: Diagnostics;'
    return:
      type: <xref uid="outlook!Office.Diagnostics:interface" />
- name: ewsUrl
  uid: outlook!Office.Mailbox#ewsUrl:member
  package: outlook!
  fullName: ewsUrl
  summary: >-
    获取此电子邮件帐户的 Exchange Web Services (EWS) 终点的 URL。 仅限阅读模式。


    您的应用程序必须具有在 `ReadItem` 其清单中指定的权限，才能 `ewsUrl` 在阅读模式下调用成员。


    在撰写模式中，必须调用 `saveAsync` 方法，才能使用 `ewsUrl` 成员。 您的应用程序必须具有 `ReadWriteItem` 调用该 `saveAsync` 方法的权限。


    **注意**：在 IOS 或 Android 上的 Outlook 中不支持此成员。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    远程服务可使用 `ewsUrl` 值对用户邮箱进行 EWS 调用。 例如，可以创建远程服务以 [从所选项目中获取附件](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ewsUrl: string;'
    return:
      type: string
- name: item
  uid: outlook!Office.Mailbox#item:member
  package: outlook!
  fullName: item
  summary: >-
    邮箱项目。 根据在其中打开加载项的上下文，项目类型可能会有所不同。 如果要仅查看特定类型或模式的 IntelliSense，请将此项目转换为以下项之一：


    [MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->， [Messageread.html](xref:outlook!Office.MessageRead:interface)<!-- -->， [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->， [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'item: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead;'
    return:
      type: <xref uid="outlook!Office.Item:interface" /> & <xref uid="outlook!Office.ItemCompose:interface" /> & <xref uid="outlook!Office.ItemRead:interface" /> & <xref uid="outlook!Office.Message:interface" /> & <xref uid="outlook!Office.MessageCompose:interface" /> & <xref uid="outlook!Office.MessageRead:interface" /> & <xref uid="outlook!Office.Appointment:interface" /> & <xref uid="outlook!Office.AppointmentCompose:interface" /> & <xref uid="outlook!Office.AppointmentRead:interface" />
- name: userProfile
  uid: outlook!Office.Mailbox#userProfile:member
  package: outlook!
  fullName: userProfile
  summary: >-
    有关与邮箱关联的用户的信息。 这包括帐户类型、显示名称、电子邮件地址和时区。


    有关详细信息，请在 [Office. UserProfile](xref:outlook!Office.UserProfile:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'userProfile: UserProfile;'
    return:
      type: <xref uid="outlook!Office.UserProfile:interface" />
methods:
- name: convertToLocalClientTime(timeValue)
  uid: outlook!Office.Mailbox#convertToLocalClientTime:member(1)
  package: outlook!
  fullName: convertToLocalClientTime(timeValue)
  summary: >-
    获取包含以本地客户端时间表示的时间信息的字典。


    Outlook 网页版或桌面客户端上的邮件应用程序使用的日期和时间可以使用不同的时区。 Outlook 使用客户端计算机时区;Web 上的 Outlook 使用 Exchange 管理中心 (EAC) 上设置的时区。 应对日期和时间值进行处理，以便用户界面上显示的值始终与用户预期的时区一致。


    如果邮件应用程序在桌面客户端上的 Outlook 中运行，则该 `convertToLocalClientTime` 方法将返回一个 dictionary 对象，并将值设置为客户端计算机时区。 如果邮件应用程序在 web 上的 Outlook 中运行，则该 `convertToLocalClientTime` 方法将返回一个 dictionary 对象，其中的值设置为 EAC 中指定的时区。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
    parameters:
    - id: timeValue
      description: '`Date` 对象。'
      type: Date
    return:
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
      description: ''
- name: convertToUtcClientTime(input)
  uid: outlook!Office.Mailbox#convertToUtcClientTime:member(1)
  package: outlook!
  fullName: convertToUtcClientTime(input)
  summary: >-
    `Date`从包含时间信息的字典中获取对象。


    该 `convertToUtcClientTime` 方法将包含本地日期和时间的字典转换为 `Date` 具有本地日期和时间的正确值的对象。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Represents 3:37 PM PDT on Monday, August 26, 2019.

    var input = {
        date: 26,
        hours: 15,
        milliseconds: 2,
        minutes: 37,
        month: 7,
        seconds: 2,
        timezoneOffset: -420,
        year: 2019
    };


    // result should be a Date object.

    var result = Office.context.mailbox.convertToUtcClientTime(input);


    // Output should be "2019-08-26T22:37:02.002Z".

    console.log(result.toISOString());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
    parameters:
    - id: input
      description: 要转换的本地时间值。
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
    return:
      type: Date
      description: 包含以 UTC 表示的时间的 Date 对象。
- name: displayAppointmentForm(itemId)
  uid: outlook!Office.Mailbox#displayAppointmentForm:member(1)
  package: outlook!
  fullName: displayAppointmentForm(itemId)
  summary: >-
    显示现有日历约会。


    `displayAppointmentForm` 方法将打开桌面新窗口中或移动设备对话框中的现有日历约会。


    在 Mac 上的 Outlook 中，可以使用此方法显示不属于定期系列或定期系列的主约会的单个约会。 但是，无法显示该系列的实例，因为您无法访问 (包括定期系列实例的项目 ID) 的属性。


    在 web 上的 Outlook 中，仅当窗体的正文小于或等于32K 个字符时，此方法才会打开指定的窗体。


    如果指定的项标识符未标识现有约会，则在客户端计算机或设备上打开一个空白窗格，并且不会返回任何错误消息。


    **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: 现有日历约会的 Exchange Web 服务 (EWS) 标识符。
      type: string
    return:
      type: void
      description: ''
- name: displayMessageForm(itemId)
  uid: outlook!Office.Mailbox#displayMessageForm:member(1)
  package: outlook!
  fullName: displayMessageForm(itemId)
  summary: >-
    显示现有邮件。


    `displayMessageForm` 方法将打开桌面新窗口中或移动设备对话框中的现有邮件。


    在 web 上的 Outlook 中，仅当窗体的正文小于或等于32K 个字符时，此方法才会打开指定的窗体。


    如果指定的项标识符未标识现有邮件，则客户端计算机上将不会显示任何消息，并且不会返回任何错误消息。


    请勿将 `displayMessageForm` 和与代表约会的 itemId 结合使用。 使用 `displayAppointmentForm` 方法显示现有的约会，并使用 `displayNewAppointmentForm` 显示窗体以新建约会。


    **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: 现有消息的 Exchange Web 服务 (EWS) 标识符。
      type: string
    return:
      type: void
      description: ''
- name: displayNewAppointmentForm(parameters)
  uid: outlook!Office.Mailbox#displayNewAppointmentForm:member(1)
  package: outlook!
  fullName: displayNewAppointmentForm(parameters)
  summary: >-
    显示用于新建日历约会的表单。


    `displayNewAppointmentForm` 方法打开可让用户新建约会或会议的窗体。如果指定了参数，将使用参数的内容自动填充约会窗体字段。


    在 web 上的 Outlook 中，此方法始终显示一个包含 "与会者" 字段的窗体。 如果你未将任何与会者指定为输入参数，该方法将显示为一个包含“**保存**”按钮的窗体。 如果已指定与会者，窗体将包含与会者和“**发送**”按钮。


    在 Outlook 富客户端和 Outlook RT 中，如果您在中指定任何与会者或资源 `requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->或 `resources` 参数，此方法显示带有 " **发送** " 按钮的会议窗体。 如果不指定任何收件人，此方法将显示带有 " **保存 &amp; 关闭** " 按钮的约会窗体。


    如果任何参数超过指定大小限制，或者指定了未知参数名称，则会引发异常。


    **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：读取


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
    parameters:
    - id: parameters
      description: 一个 `AppointmentForm` 描述新约会的。 所有属性都是可选的。
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(1)
  package: outlook!
  fullName: getCallbackTokenAsync(callback, userContext)
  summary: >-
    获取一个字符串，其中包含用于从 Exchange Server 获取附件或项目的令牌。


    `getCallbackTokenAsync` 方法进行异步调用，从托管用户邮箱的 Exchange Server 获取非跳转令牌。回调令牌的生存期为 5 分钟。


    令牌作为属性中的字符串返回 `asyncResult.value` 。


    可以将令牌和附件标识符或项标识符传递到第三方系统。 第三方系统使用令牌作为持有者身份验证令牌调用 Exchange Web 服务 (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) 操作或 [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) 操作，以返回附件或项目。 例如，可以创建远程服务以 [从所选项目中获取附件](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    `getCallbackTokenAsync`在读取模式下调用方法要求最低权限级别为`ReadItem`<!-- -->.


    `getCallbackTokenAsync`在撰写模式下调用方法需要您保存项目。 `saveAsync`方法要求的最低权限级别为`ReadWriteItem`<!-- -->.


    **重要说明**：有关委派或共享方案的指导，请参阅 [代理访问](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) 文章。


    \[[API 集： All 支持读取模式;邮箱1.3 引入了撰写模式支持](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`\n\n**[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读\n\n**错误**：\n\n- `HTTPRequestFailure`<!-- -->：请求失败。 请查看诊断对象，了解 HTTP 错误代码。\n\n- `InternalServerError`<!-- -->： Exchange 服务器返回错误。 请查看诊断对象，了解详细信息。\n\n- `NetworkError`<!-- -->：用户不再连接到网络。 请检查网络连接并重试。\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: 方法完成后，使用单个参数类型调用在 callback 参数中传递的函数 `Office.AsyncResult`<!-- -->. 令牌作为属性中的字符串返回 `asyncResult.value` 。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: 可选。 传递给异步方法的任何状态数据。
      type: any
    return:
      type: void
      description: ''
- name: getUserIdentityTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)
  package: outlook!
  fullName: getUserIdentityTokenAsync(callback, userContext)
  summary: >-
    获取用于标识用户和 Office 外接程序的令牌。


    令牌作为属性中的字符串返回 `asyncResult.value` 。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    该 `getUserIdentityTokenAsync` 方法返回一个令牌，可用于 [通过第三方系统识别和验证外接程序和用户](https://docs.microsoft.com/office/dev/add-ins/outlook/authentication)<!-- -->.


    **错误**：


    - `HTTPRequestFailure`<!-- -->：请求失败。 请查看诊断对象，了解 HTTP 错误代码。


    - `InternalServerError`<!-- -->： Exchange 服务器返回错误。 请查看诊断对象，了解详细信息。


    - `NetworkError`<!-- -->：用户不再连接到网络。 请检查网络连接并重试。


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: 方法完成后，使用单个参数类型调用在 callback 参数中传递的函数 `Office.AsyncResult`<!-- -->. 令牌作为属性中的字符串返回 `asyncResult.value` 。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: 可选。 传递给异步方法的任何状态数据。
      type: any
    return:
      type: void
      description: ''
- name: makeEwsRequestAsync(data, callback, userContext)
  uid: outlook!Office.Mailbox#makeEwsRequestAsync:member(1)
  package: outlook!
  fullName: makeEwsRequestAsync(data, callback, userContext)
  summary: >-
    向承载用户邮箱的 Exchange 服务器上 (EWS) 服务发出对 Exchange Web 服务的异步请求。


    在这些情况下，加载项应该使用 REST API 来改为访问用户的邮箱。


    `makeEwsRequestAsync` 方法代表外接程序将 EWS 请求发送到 Exchange。


    你不能使用 `makeEwsRequestAsync` 方法请求与文件夹关联的项目。


    XML 请求必须指定 UTF-8 编码： `\<?xml version="1.0" encoding="utf-8"?\>`<!-- -->.


    您的外接程序必须具有 `ReadWriteMailbox` 使用方法的权限 `makeEwsRequestAsync` 。 有关使用 `ReadWriteMailbox` 可使用方法调用的权限和 EWS 操作的信息 `makeEwsRequestAsync` ，请参阅 [指定邮件外接程序对用户邮箱的访问权限](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->.


    EWS 调用的 XML 结果作为 `asyncResult.value` 属性中的字符串提供。 如果结果大小超过 1 MB，则改为返回一条错误消息。


    **注意**：在以下情况下，不支持此方法：


    - 在 iOS 或 Android 上的 Outlook 中。


    - 将加载项加载到 Gmail 邮箱中时。


    **注意**：服务器管理员必须 `OAuthAuthentication` `true` 在客户端访问服务器 EWS 目录上设置为，才能使 `makeEwsRequestAsync` 方法能够发出 EWS 请求。


    *版本差异*


    当您 `makeEwsRequestAsync` 在早于较15.0.4535.1004 版本的 Outlook 版本中运行的邮件应用程序中使用方法时，应将编码值设置为 ISO-8859-1。


    `<?xml version="1.0" encoding="iso-8859-1"?>`


    当邮件应用程序运行在 Outlook 网页版中时，您不需要设置编码值。 您可以通过使用属性来确定您的邮件应用程序是在 Outlook 中运行还是在 web 上的 Outlook 中运行 `mailbox.diagnostics.hostName` 。 您可以通过使用属性来确定运行的是哪个版本的 Outlook `mailbox.diagnostics.hostVersion` 。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadWriteMailbox`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    function getSubjectRequest(id) {
        // Return a GetItem operation request for the subject of the specified item.
        var request =
            '<?xml version="1.0" encoding="utf-8"?>' +
            '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
            '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
            '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
            '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
            '  <soap:Header>' +
            '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
            '  </soap:Header>' +
            '  <soap:Body>' +
            '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
            '      <ItemShape>' +
            '        <t:BaseShape>IdOnly</t:BaseShape>' +
            '        <t:AdditionalProperties>' +
            '            <t:FieldURI FieldURI="item:Subject"/>' +
            '        </t:AdditionalProperties>' +
            '      </ItemShape>' +
            '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
            '    </GetItem>' +
            '  </soap:Body>' +
            '</soap:Envelope>';

        return request;
    }


    function sendRequest() {
        // Create a local variable that contains the mailbox.
        Office.context.mailbox.makeEwsRequestAsync(
            getSubjectRequest(mailbox.item.itemId), callback);
    }


    function callback(asyncResult)  {
        var result = asyncResult.value;
        var context = asyncResult.asyncContext;

        // Process the returned response here.
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml

    var ewsId = Office.context.mailbox.item.itemId;

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
        '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
        '  <soap:Body>' +
        '    <m:GetItem>' +
        '      <m:ItemShape>' +
        '        <t:BaseShape>IdOnly</t:BaseShape>' +
        '      </m:ItemShape >' +
        '      <m:ItemIds>' +
        '        <t:ItemId Id="' + ewsId + '" />' +
        '      </m:ItemIds>' +
        '    </m:GetItem>' +
        '  </soap:Body>' +
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: data
      description: EWS 请求。
      type: any
    - id: callback
      description: 方法完成后，使用单个参数类型调用在 callback 参数中传递的函数 `Office.AsyncResult`<!-- -->. `value`结果的属性是以字符串形式提供的 EWS 请求的 XML。 如果结果大小超过 1 MB，则改为返回一条错误消息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: 可选。 传递给异步方法的任何状态数据。
      type: any
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 7b4ba17c87fb7f1e3db3ffe474f8890aba349d58
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49193696"
