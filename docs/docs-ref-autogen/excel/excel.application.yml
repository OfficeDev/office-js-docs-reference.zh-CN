### YamlMime:UniversalReference
ms.openlocfilehash: d2c6b2fe6326e88a662da28dc65222cee0fe0caf
ms.sourcegitcommit: 3f4a320fa860d05d348c8bdec2295e046a45a34f
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 02/07/2019
ms.locfileid: "29769377"
items:
- uid: excel.Excel.Application
  summary: >-
    <span data-ttu-id="a12a1-101">表示用于管理工作簿的 Excel 应用程序。</span><span class="sxs-lookup"><span data-stu-id="a12a1-101">Represents the Excel application that manages the workbook.</span></span>


    <span data-ttu-id="a12a1-102">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a12a1-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Application
  fullName: Excel.Application
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Application.calculate
  - excel.Excel.Application.calculationMode
  - excel.Excel.Application.context
  - excel.Excel.Application.load
  - excel.Excel.Application.set
  - excel.Excel.Application.suspendApiCalculationUntilNextSync
  - excel.Excel.Application.toJSON
- uid: excel.Excel.Application.calculate
  summary: >-
    <span data-ttu-id="a12a1-103">重新计算 Excel 中当前打开的所有工作簿。</span><span class="sxs-lookup"><span data-stu-id="a12a1-103">Recalculate all currently opened workbooks in Excel.</span></span>


    <span data-ttu-id="a12a1-104">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a12a1-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(calculationType)
  fullName: calculate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(calculationType: Excel.CalculationType): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a12a1-105\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"a12a1-105\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    ctx.workbook.application.calculate('Full');\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: calculationType
      description: <span data-ttu-id="a12a1-106">指定要使用的计算类型。</span><span class="sxs-lookup"><span data-stu-id="a12a1-106">Specifies the calculation type to use.</span></span> <span data-ttu-id="a12a1-107">有关详细信息，请参阅 Excel.CalculationType。</span><span class="sxs-lookup"><span data-stu-id="a12a1-107">See Excel.CalculationType for details.</span></span>
      type:
      - excel.Excel.CalculationType
- uid: excel.Excel.Application.calculationMode
  summary: >-
    <span data-ttu-id="a12a1-108">定义的 Excel.CalculationMode 中的常量，则返回工作簿中使用的计算模式。</span><span class="sxs-lookup"><span data-stu-id="a12a1-108">Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode.</span></span> <span data-ttu-id="a12a1-109">可能的值为： `Automatic` <!-- -->，其中，Excel 控制重新计算;`AutomaticExceptTables` <!-- -->，其中，Excel 控制重新计算，但忽略表; 中的更改`Manual` <!-- -->，其中时进行计算用户请求。</span><span class="sxs-lookup"><span data-stu-id="a12a1-109">Possible values are: `Automatic`<!-- -->, where Excel controls recalculation; `AutomaticExceptTables`<!-- -->, where Excel controls recalculation but ignores changes in tables; `Manual`<!-- -->, where calculation is done when the user requests it.</span></span>


    <span data-ttu-id="a12a1-110">\[[API 集： 用于获取、 设置为 1.8 ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a12a1-110">\[ [API set: ExcelApi 1.1 for get, 1.8 for set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculationMode
  fullName: calculationMode
  langs:
  - typeScript
  type: property
  syntax:
    content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
    return:
      type:
      - Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
- uid: excel.Excel.Application.context
  summary: <span data-ttu-id="a12a1-111">与对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="a12a1-111">The request context associated with the object.</span></span> <span data-ttu-id="a12a1-112">这将连接到 Office 主机应用程序的过程外接程序的过程。</span><span class="sxs-lookup"><span data-stu-id="a12a1-112">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Application.load
  summary: <span data-ttu-id="a12a1-113">队列设置命令加载指定的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="a12a1-113">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a12a1-114">读取属性之前，必须调用"context.sync()"。</span><span class="sxs-lookup"><span data-stu-id="a12a1-114">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="a12a1-115">除了此签名，此方法具有以下签名：</span><span class="sxs-lookup"><span data-stu-id="a12a1-115">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="a12a1-116">`load(option?: { select?: string; expand?: string; }): Excel.Application`-其中 option.select 是一个以逗号分隔的字符串，指定要加载的属性，options.expand 是一个以逗号分隔的字符串，指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="a12a1-116">`load(option?: { select?: string; expand?: string; }): Excel.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="a12a1-117">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application`-仅可对集合的类型。</span><span class="sxs-lookup"><span data-stu-id="a12a1-117">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application` - Only available on collection types.</span></span> <span data-ttu-id="a12a1-118">它是类似于前一个签名。</span><span class="sxs-lookup"><span data-stu-id="a12a1-118">It is similar to the preceding signature.</span></span> <span data-ttu-id="a12a1-119">Option.top 指定集合项可在结果中包含的最大数目。</span><span class="sxs-lookup"><span data-stu-id="a12a1-119">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a12a1-120">Option.skip 指定要跳过和结果中不包含的项的数目。</span><span class="sxs-lookup"><span data-stu-id="a12a1-120">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a12a1-121">如果指定 option.top，则将跳过指定的数目的项后启动结果集。</span><span class="sxs-lookup"><span data-stu-id="a12a1-121">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>

    #### <a name="examples"></a><span data-ttu-id="a12a1-122">示例</span><span class="sxs-lookup"><span data-stu-id="a12a1-122">Examples</span></span>


    ```javascript

    Excel.run(function (ctx) {
        var application = ctx.workbook.application;
        application.load('calculationMode');
        return ctx.sync().then(function() {
            console.log(application.calculationMode);
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Application;'
    return:
      type:
      - excel.Excel.Application
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="a12a1-123">以逗号分隔字符串或一个指定要加载的属性的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="a12a1-123">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Application.set
  summary: <span data-ttu-id="a12a1-124">在同一时间设置对象的多个的属性。</span><span class="sxs-lookup"><span data-stu-id="a12a1-124">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="a12a1-125">您可以传递具有的相应属性的普通对象或相同类型的另一个 API 对象。</span><span class="sxs-lookup"><span data-stu-id="a12a1-125">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="a12a1-126">此方法具有以下其他签名：</span><span class="sxs-lookup"><span data-stu-id="a12a1-126">This method has the following additional signature:</span></span>


    `set(properties: Excel.Application): void`
  name: set(properties, options)
  fullName: set
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="a12a1-127">具有对属性的对象调用 isomorphically 结构化的属性的 JavaScript 对象。</span><span class="sxs-lookup"><span data-stu-id="a12a1-127">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.ApplicationUpdateData
    - id: options
      description: <span data-ttu-id="a12a1-128">提供一个选项以取消显示错误，如果属性对象会尝试设置任何只读属性。</span><span class="sxs-lookup"><span data-stu-id="a12a1-128">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Application.suspendApiCalculationUntilNextSync
  summary: >-
    <span data-ttu-id="a12a1-p107">在下一次调用“context.sync()”前暂停计算。设置后，开发者负责重新计算工作簿，以确保传播所有依赖项。</span><span class="sxs-lookup"><span data-stu-id="a12a1-p107">Suspends calculation until the next "context.sync()" is called. Once set, it is the developer's responsibility to re-calc the workbook, to ensure that any dependencies are propagated.</span></span>


    <span data-ttu-id="a12a1-131">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a12a1-131">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: suspendApiCalculationUntilNextSync()
  fullName: suspendApiCalculationUntilNextSync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'suspendApiCalculationUntilNextSync(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Application.toJSON
  summary: <span data-ttu-id="a12a1-132">重写 JavaScript`toJSON()`方法，为了提供更多有用的输出时 API 对象传递给`JSON.stringify()` <!-- -->。</span><span class="sxs-lookup"><span data-stu-id="a12a1-132">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="a12a1-133">(`JSON.stringify`<!-- -->，反过来，调用`toJSON`对象传递给它的方法。)原始 Excel.Application 对象是 API 对象，而`toJSON`方法返回一个普通的 JavaScript 对象 (类型为`Excel.Interfaces.ApplicationData` <!-- -->)，其中包含原始对象中的任何加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="a12a1-133">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ApplicationData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ApplicationData;'
    return:
      type:
      - excel.Excel.Interfaces.ApplicationData
      description: ''
