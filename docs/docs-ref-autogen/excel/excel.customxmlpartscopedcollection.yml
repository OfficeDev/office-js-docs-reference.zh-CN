### YamlMime:UniversalReference
ms.openlocfilehash: a9585ddc38ae3feda009bc79262b11f63d60f415
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 02/13/2019
ms.locfileid: "29974281"
items:
- uid: excel.Excel.CustomXmlPartScopedCollection
  summary: >-
    <span data-ttu-id="30a4f-101">自定义 XML 部件的范围集合。</span><span class="sxs-lookup"><span data-stu-id="30a4f-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="30a4f-102">作用域的集合是一些操作，例如按命名空间筛选的结果。</span><span class="sxs-lookup"><span data-stu-id="30a4f-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="30a4f-103">不能进一步范围范围的集合。</span><span class="sxs-lookup"><span data-stu-id="30a4f-103">A scoped collection cannot be scoped any further.</span></span>


    <span data-ttu-id="30a4f-104">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="30a4f-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomXmlPartScopedCollection
  fullName: Excel.CustomXmlPartScopedCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomXmlPartScopedCollection.context
  - excel.Excel.CustomXmlPartScopedCollection.getCount
  - excel.Excel.CustomXmlPartScopedCollection.getItem
  - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.items
  - excel.Excel.CustomXmlPartScopedCollection.load
  - excel.Excel.CustomXmlPartScopedCollection.load_1
  - excel.Excel.CustomXmlPartScopedCollection.load_2
  - excel.Excel.CustomXmlPartScopedCollection.toJSON
- uid: excel.Excel.CustomXmlPartScopedCollection.context
  summary: <span data-ttu-id="30a4f-105">与对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="30a4f-105">The request context associated with the object.</span></span> <span data-ttu-id="30a4f-106">这将连接到 Office 主机应用程序的过程外接程序的过程。</span><span class="sxs-lookup"><span data-stu-id="30a4f-106">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.CustomXmlPartScopedCollection.getCount
  summary: >-
    <span data-ttu-id="30a4f-107">获取此集合中 CustomXML 部件的数量。</span><span class="sxs-lookup"><span data-stu-id="30a4f-107">Gets the number of CustomXML parts in this collection.</span></span>


    <span data-ttu-id="30a4f-108">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="30a4f-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"30a4f-109\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"30a4f-109\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getItem
  summary: >-
    <span data-ttu-id="30a4f-110">获取基于其 ID 的自定义 XML 部件。</span><span class="sxs-lookup"><span data-stu-id="30a4f-110">Gets a custom XML part based on its ID.</span></span>


    <span data-ttu-id="30a4f-111">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="30a4f-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
    parameters:
    - id: id
      description: <span data-ttu-id="30a4f-112">要检索的对象的 ID。</span><span class="sxs-lookup"><span data-stu-id="30a4f-112">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="30a4f-113">获取基于其 ID 的自定义 XML 部件。</span><span class="sxs-lookup"><span data-stu-id="30a4f-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="30a4f-114">如果不存在 CustomXmlPart，返回对象的 isNull 属性将为 true。</span><span class="sxs-lookup"><span data-stu-id="30a4f-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>


    <span data-ttu-id="30a4f-115">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="30a4f-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"30a4f-116\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"30a4f-116\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n        const xmlBlob = customXmlPart.getXml();\n        customXmlPart.delete();\n        customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n        await context.sync();\n\n        if (customXmlPart.isNullObject) {\n            $(\"#display-xml\").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);\n\n            // Delete the unneeded setting too.\n            xmlPartIDSetting.delete();            \n        } else {\n            const readableXml = addLineBreaksToXML(xmlBlob.value);\n            const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\\n${readableXml}`\n            $(\"#display-xml\").text(strangeMessage);\n        }\n\n        await context.sync();\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="30a4f-117">要检索的对象的 ID。</span><span class="sxs-lookup"><span data-stu-id="30a4f-117">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  summary: >-
    <span data-ttu-id="30a4f-118">如果集合仅包含一个项，则此方法返回该项。</span><span class="sxs-lookup"><span data-stu-id="30a4f-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="30a4f-119">否则，此方法将产生错误。</span><span class="sxs-lookup"><span data-stu-id="30a4f-119">Otherwise, this method produces an error.</span></span>


    <span data-ttu-id="30a4f-120">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="30a4f-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItem()
  fullName: getOnlyItem()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItem(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"30a4f-121\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"30a4f-121\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  summary: >-
    <span data-ttu-id="30a4f-122">如果集合仅包含一个项，则此方法返回该项。</span><span class="sxs-lookup"><span data-stu-id="30a4f-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="30a4f-123">否则，此方法返回 Null。</span><span class="sxs-lookup"><span data-stu-id="30a4f-123">Otherwise, this method returns Null.</span></span>


    <span data-ttu-id="30a4f-124">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="30a4f-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItemOrNullObject()
  fullName: getOnlyItemOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
- uid: excel.Excel.CustomXmlPartScopedCollection.items
  summary: <span data-ttu-id="30a4f-125">获取此集合中的加载的子项目。</span><span class="sxs-lookup"><span data-stu-id="30a4f-125">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.CustomXmlPart[];'
    return:
      type:
      - Excel.CustomXmlPart[]
- uid: excel.Excel.CustomXmlPartScopedCollection.load
  summary: <span data-ttu-id="30a4f-126">队列设置命令加载指定的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="30a4f-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="30a4f-127">读取属性之前，必须调用"context.sync()"。</span><span class="sxs-lookup"><span data-stu-id="30a4f-127">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="30a4f-128">除了此签名，此方法具有以下签名：</span><span class="sxs-lookup"><span data-stu-id="30a4f-128">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="30a4f-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-其中选项是一个以逗号分隔的字符串或一个指定要加载的属性的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="30a4f-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="30a4f-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-其中 option.select 是一个以逗号分隔的字符串，指定要加载的属性，options.expand 是一个以逗号分隔的字符串，指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="30a4f-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="30a4f-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-仅可对集合的类型。</span><span class="sxs-lookup"><span data-stu-id="30a4f-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="30a4f-132">它是类似于前一个签名。</span><span class="sxs-lookup"><span data-stu-id="30a4f-132">It is similar to the preceding signature.</span></span> <span data-ttu-id="30a4f-133">Option.top 指定集合项可在结果中包含的最大数目。</span><span class="sxs-lookup"><span data-stu-id="30a4f-133">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="30a4f-134">Option.skip 指定要跳过和结果中不包含的项的数目。</span><span class="sxs-lookup"><span data-stu-id="30a4f-134">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="30a4f-135">如果指定 option.top，则将跳过指定的数目的项后启动结果集。</span><span class="sxs-lookup"><span data-stu-id="30a4f-135">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.CustomXmlPartScopedCollection.load_1
  summary: <span data-ttu-id="30a4f-136">队列设置命令加载指定的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="30a4f-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="30a4f-137">您必须调用`context.sync()`阅读属性之前。</span><span class="sxs-lookup"><span data-stu-id="30a4f-137">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="30a4f-138">以逗号分隔字符串或一个指定要加载的属性的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="30a4f-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomXmlPartScopedCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
  summary: <span data-ttu-id="30a4f-139">重写 JavaScript`toJSON()`方法，为了提供更多有用的输出时 API 对象传递给`JSON.stringify()` <!-- -->。</span><span class="sxs-lookup"><span data-stu-id="30a4f-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="30a4f-140">(`JSON.stringify`<!-- -->，反过来，调用`toJSON`对象传递给它的方法。)而原始`Excel.CustomXmlPartScopedCollection`对象是 API 对象，`toJSON`方法返回一个普通的 JavaScript 对象 (类型为`Excel.Interfaces.CustomXmlPartScopedCollectionData` <!-- -->)，其中包含数组"项目"的任何加载属性集的项目的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="30a4f-140">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
      description: ''
