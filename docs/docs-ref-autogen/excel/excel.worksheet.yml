### YamlMime:UniversalReference
ms.openlocfilehash: c01653f13dc4a6bf97747b8349a55a9068769571
ms.sourcegitcommit: 5e31602ed9cbddfcff2768b7ed69dd4821440b90
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 03/14/2019
ms.locfileid: "30575954"
items:
- uid: excel.Excel.Worksheet
  summary: >-
    <span data-ttu-id="14390-101">Excel 工作表是由单元格组成的网格。</span><span class="sxs-lookup"><span data-stu-id="14390-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="14390-102">它可以包含数据、表、图表等。</span><span class="sxs-lookup"><span data-stu-id="14390-102">It can contain data, tables, charts, etc.</span></span>


    <span data-ttu-id="14390-103">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Worksheet
  fullName: Excel.Worksheet
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Worksheet.activate
  - excel.Excel.Worksheet.autoFilter
  - excel.Excel.Worksheet.calculate
  - excel.Excel.Worksheet.charts
  - excel.Excel.Worksheet.comments
  - excel.Excel.Worksheet.context
  - excel.Excel.Worksheet.copy
  - excel.Excel.Worksheet.copy_1
  - excel.Excel.Worksheet.delete
  - excel.Excel.Worksheet.enableCalculation
  - excel.Excel.Worksheet.findAll
  - excel.Excel.Worksheet.findAllOrNullObject
  - excel.Excel.Worksheet.freezePanes
  - excel.Excel.Worksheet.getCell
  - excel.Excel.Worksheet.getNext
  - excel.Excel.Worksheet.getNextOrNullObject
  - excel.Excel.Worksheet.getPrevious
  - excel.Excel.Worksheet.getPreviousOrNullObject
  - excel.Excel.Worksheet.getRange
  - excel.Excel.Worksheet.getRangeByIndexes
  - excel.Excel.Worksheet.getRanges
  - excel.Excel.Worksheet.getUsedRange
  - excel.Excel.Worksheet.getUsedRangeOrNullObject
  - excel.Excel.Worksheet.horizontalPageBreaks
  - excel.Excel.Worksheet.id
  - excel.Excel.Worksheet.load
  - excel.Excel.Worksheet.load_1
  - excel.Excel.Worksheet.load_2
  - excel.Excel.Worksheet.name
  - excel.Excel.Worksheet.names
  - excel.Excel.Worksheet.onActivated
  - excel.Excel.Worksheet.onCalculated
  - excel.Excel.Worksheet.onChanged
  - excel.Excel.Worksheet.onDeactivated
  - excel.Excel.Worksheet.onFiltered
  - excel.Excel.Worksheet.onFormatChanged
  - excel.Excel.Worksheet.onSelectionChanged
  - excel.Excel.Worksheet.pageLayout
  - excel.Excel.Worksheet.pivotTables
  - excel.Excel.Worksheet.position
  - excel.Excel.Worksheet.protection
  - excel.Excel.Worksheet.replaceAll
  - excel.Excel.Worksheet.set
  - excel.Excel.Worksheet.set_1
  - excel.Excel.Worksheet.shapes
  - excel.Excel.Worksheet.showGridlines
  - excel.Excel.Worksheet.showHeadings
  - excel.Excel.Worksheet.slicers
  - excel.Excel.Worksheet.standardHeight
  - excel.Excel.Worksheet.standardWidth
  - excel.Excel.Worksheet.tabColor
  - excel.Excel.Worksheet.tables
  - excel.Excel.Worksheet.toJSON
  - excel.Excel.Worksheet.verticalPageBreaks
  - excel.Excel.Worksheet.visibility
- uid: excel.Excel.Worksheet.activate
  summary: >-
    <span data-ttu-id="14390-104">在 Excel UI 中激活工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-104">Activate the worksheet in the Excel UI.</span></span>


    <span data-ttu-id="14390-105">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: activate()
  fullName: activate()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'activate(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-106\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-106\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.autoFilter
  summary: >-
    <span data-ttu-id="14390-107">表示工作表的 AutoFilter 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-107">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="14390-108">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-108">Read-Only.</span></span>


    <span data-ttu-id="14390-109">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-109">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: autoFilter
  fullName: autoFilter
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type:
      - excel.Excel.AutoFilter
- uid: excel.Excel.Worksheet.calculate
  summary: >-
    <span data-ttu-id="14390-110">计算工作表上的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="14390-110">Calculates all cells on a worksheet.</span></span>


    <span data-ttu-id="14390-111">\[[API 集: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(markAllDirty)
  fullName: calculate(markAllDirty)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: markAllDirty
      description: <span data-ttu-id="14390-112">如果为 True, 则将全部标记为已更新。</span><span class="sxs-lookup"><span data-stu-id="14390-112">True, to mark all as dirty.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.charts
  summary: >-
    <span data-ttu-id="14390-113">返回属于工作表的图表的集合。</span><span class="sxs-lookup"><span data-stu-id="14390-113">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="14390-114">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-114">Read-only.</span></span>


    <span data-ttu-id="14390-115">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: charts
  fullName: charts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
- uid: excel.Excel.Worksheet.comments
  summary: >-
    <span data-ttu-id="14390-116">返回工作表上的所有 Comments 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="14390-116">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="14390-117">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-117">Read-only.</span></span>


    <span data-ttu-id="14390-118">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-118">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: comments
  fullName: comments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly comments: Excel.CommentCollection;'
    return:
      type:
      - excel.Excel.CommentCollection
- uid: excel.Excel.Worksheet.context
  summary: <span data-ttu-id="14390-119">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="14390-119">The request context associated with the object.</span></span> <span data-ttu-id="14390-120">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="14390-120">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Worksheet.copy
  summary: >-
    <span data-ttu-id="14390-121">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="14390-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="14390-122">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-122">Return the copied worksheet.</span></span>


    <span data-ttu-id="14390-123">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionType, relativeTo)
  fullName: copy(positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-124\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n});\n```"
    parameters:
    - id: positionType
      description: <span data-ttu-id="14390-125">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-125">Optional.</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="14390-126">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-126">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.copy_1
  summary: >-
    <span data-ttu-id="14390-127">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="14390-127">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="14390-128">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-128">Return the copied worksheet.</span></span>


    <span data-ttu-id="14390-129">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-129">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionTypeString, relativeTo)
  fullName: copy(positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: positionTypeString
      description: <span data-ttu-id="14390-130">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-130">Optional.</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="14390-131">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-131">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.delete
  summary: >-
    <span data-ttu-id="14390-132">从工作簿中删除工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-132">Deletes the worksheet from the workbook.</span></span>


    <span data-ttu-id="14390-133">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-134\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-134\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.enableCalculation
  summary: >-
    <span data-ttu-id="14390-135">获取或设置工作表的 enableCalculation 属性。</span><span class="sxs-lookup"><span data-stu-id="14390-135">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="14390-136">如此如果 Excel 根据需要重新计算工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-136">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="14390-137">如果 Excel 不重新计算工作表，则该值为 False。</span><span class="sxs-lookup"><span data-stu-id="14390-137">False if Excel doesn't recalculate the sheet.</span></span>


    <span data-ttu-id="14390-138">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-138">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: enableCalculation
  fullName: enableCalculation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.findAll
  summary: >-
    <span data-ttu-id="14390-139">根据指定的条件查找给定字符串的所有匹配项，并将它们作为包含一个或多个矩形区域的 RangeAreas 对象返回。</span><span class="sxs-lookup"><span data-stu-id="14390-139">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="14390-140">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-140">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAll(text, criteria)
  fullName: findAll(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: <span data-ttu-id="14390-141">一个 RangeArea 对象, 其中包含一个或多个与搜索条件相匹配的矩形区域。</span><span class="sxs-lookup"><span data-stu-id="14390-141">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="14390-142">如果没有满足此条件的单元格, 则将引发 ItemNotFound 错误。</span><span class="sxs-lookup"><span data-stu-id="14390-142">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="14390-143">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-143">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="14390-144">其他条件。</span><span class="sxs-lookup"><span data-stu-id="14390-144">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.findAllOrNullObject
  summary: >-
    <span data-ttu-id="14390-145">根据指定的条件查找给定字符串的所有匹配项，并将它们作为包含一个或多个矩形区域的 RangeAreas 对象返回。</span><span class="sxs-lookup"><span data-stu-id="14390-145">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="14390-146">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-146">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAllOrNullObject(text, criteria)
  fullName: findAllOrNullObject(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: >-
        <span data-ttu-id="14390-147">一个 RangeArea 对象, 其中包含一个或多个与搜索条件相匹配的矩形区域。</span><span class="sxs-lookup"><span data-stu-id="14390-147">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="14390-148">如果没有匹配项, 则此函数将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-148">If there are no matches, this function will return a null object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="14390-149">示例</span><span class="sxs-lookup"><span data-stu-id="14390-149">Examples</span></span>


        ```typescript

        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem("Sample");
            const foundRanges = sheet.findAllOrNullObject("Complete", {
                completeMatch: true,
                matchCase: false
            });

            await context.sync();

            if (foundRanges.isNullObject) {
                console.log("No complete projects");
            } else {
                foundRanges.format.fill.color = "green"
            }
        });

        ```
    parameters:
    - id: text
      description: <span data-ttu-id="14390-150">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-150">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="14390-151">其他条件。</span><span class="sxs-lookup"><span data-stu-id="14390-151">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.freezePanes
  summary: >-
    <span data-ttu-id="14390-152">获取一个对象, 该对象可用于操作工作表上的冻结窗格。</span><span class="sxs-lookup"><span data-stu-id="14390-152">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="14390-153">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-153">Read-only.</span></span>


    <span data-ttu-id="14390-154">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: freezePanes
  fullName: freezePanes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type:
      - excel.Excel.WorksheetFreezePanes
- uid: excel.Excel.Worksheet.getCell
  summary: >-
    <span data-ttu-id="14390-155">根据行和列编号获取包含单个单元格的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-155">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="14390-156">单元格可以位于其父区域的边界之外, 但前提是它停留在工作表网格中。</span><span class="sxs-lookup"><span data-stu-id="14390-156">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>


    <span data-ttu-id="14390-157">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-157">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell(row, column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-158\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-158\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="14390-159">要检索的单元格的行号。</span><span class="sxs-lookup"><span data-stu-id="14390-159">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="14390-160">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="14390-160">Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="14390-161">要检索的单元格的列号。</span><span class="sxs-lookup"><span data-stu-id="14390-161">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="14390-162">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="14390-162">Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getNext
  summary: >-
    <span data-ttu-id="14390-163">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-163">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="14390-164">如果此方法后面没有任何工作表, 则此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="14390-164">If there are no worksheets following this one, this method will throw an error.</span></span>


    <span data-ttu-id="14390-165">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-165">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNext(visibleOnly)
  fullName: getNext(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-166\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-166\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="14390-167">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-167">Optional.</span></span> <span data-ttu-id="14390-168">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-168">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getNextOrNullObject
  summary: >-
    <span data-ttu-id="14390-169">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-169">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="14390-170">如果此方法后面没有任何工作表, 则此方法将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-170">If there are no worksheets following this one, this method will return a null object.</span></span>


    <span data-ttu-id="14390-171">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-171">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject(visibleOnly)
  fullName: getNextOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="14390-172">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-172">Optional.</span></span> <span data-ttu-id="14390-173">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-173">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPrevious
  summary: >-
    <span data-ttu-id="14390-174">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-174">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="14390-175">如果没有以前的工作表, 此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="14390-175">If there are no previous worksheets, this method will throw an error.</span></span>


    <span data-ttu-id="14390-176">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-176">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPrevious(visibleOnly)
  fullName: getPrevious(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-177\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-177\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="14390-178">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-178">Optional.</span></span> <span data-ttu-id="14390-179">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-179">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="14390-180">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-180">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="14390-181">如果没有以前的工作表, 则此方法将返回一个空的 objet。</span><span class="sxs-lookup"><span data-stu-id="14390-181">If there are no previous worksheets, this method will return a null objet.</span></span>


    <span data-ttu-id="14390-182">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-182">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject(visibleOnly)
  fullName: getPreviousOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="14390-183">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-183">Optional.</span></span> <span data-ttu-id="14390-184">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="14390-184">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getRange
  summary: >-
    <span data-ttu-id="14390-185">获取一个 range 对象, 该对象代表由地址或名称指定的单个矩形单元格块。</span><span class="sxs-lookup"><span data-stu-id="14390-185">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>


    <span data-ttu-id="14390-186">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-186">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange(address)
  fullName: getRange(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-187\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-187\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="14390-188">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-188">Optional.</span></span> <span data-ttu-id="14390-189">表示地址或范围名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-189">The string representing the address or name of the range.</span></span> <span data-ttu-id="14390-190">例如, "A1: B2"。</span><span class="sxs-lookup"><span data-stu-id="14390-190">For example, "A1:B2".</span></span> <span data-ttu-id="14390-191">如果未指定，则返回整个工作表区域。</span><span class="sxs-lookup"><span data-stu-id="14390-191">If not specified, the entire worksheet range is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getRangeByIndexes
  summary: >-
    <span data-ttu-id="14390-192">获取以特定行索引和列索引开始并跨越了一定数量的行和列的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-192">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>


    <span data-ttu-id="14390-193">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: startRow
      description: <span data-ttu-id="14390-194">起始行 (零编制索引)。</span><span class="sxs-lookup"><span data-stu-id="14390-194">Start row (zero-indexed).</span></span>
      type:
      - number
    - id: startColumn
      description: <span data-ttu-id="14390-195">Start 列 (零个索引)。</span><span class="sxs-lookup"><span data-stu-id="14390-195">Start column (zero-indexed).</span></span>
      type:
      - number
    - id: rowCount
      description: <span data-ttu-id="14390-196">要包含在范围中的行数。</span><span class="sxs-lookup"><span data-stu-id="14390-196">Number of rows to include in the range.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="14390-197">要包含在范围中的列数。</span><span class="sxs-lookup"><span data-stu-id="14390-197">Number of columns to include in the range.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getRanges
  summary: >-
    <span data-ttu-id="14390-198">获取按地址或名称指定的 RangeAreas 对象，它表示一个或多个矩形区域块。</span><span class="sxs-lookup"><span data-stu-id="14390-198">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>


    <span data-ttu-id="14390-199">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-199">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getRanges(address)
  fullName: getRanges(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRanges(address?: string): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-200\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-200\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="14390-201">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-201">Optional.</span></span> <span data-ttu-id="14390-202">一个包含以逗号分隔的地址或各个区域的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-202">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="14390-203">例如, "A1: B2, A5: B5"。</span><span class="sxs-lookup"><span data-stu-id="14390-203">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="14390-204">如果未指定, 则返回整个工作表的 RangeArea 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-204">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getUsedRange
  summary: >-
    <span data-ttu-id="14390-205">使用的区域是包含分配了值或格式化的任何单元格的最小区域。</span><span class="sxs-lookup"><span data-stu-id="14390-205">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="14390-206">如果整个工作表为空, 则此函数将返回左上角单元格 (即, 它*不*会引发错误)。</span><span class="sxs-lookup"><span data-stu-id="14390-206">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>


    <span data-ttu-id="14390-207">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-208\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-208\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="14390-209">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-209">Optional.</span></span> <span data-ttu-id="14390-210">如果为 true, 则仅考虑值为已使用单元格的单元格 (忽略格式设置)。</span><span class="sxs-lookup"><span data-stu-id="14390-210">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="14390-211">\[Api 集: ExcelApi 1。2\]</span><span class="sxs-lookup"><span data-stu-id="14390-211">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="14390-p127">使用的区域是包含分配了值或格式的任意单元格的最小区域。如果整个工作表为空，此函数将返回 NULL 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-p127">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>


    <span data-ttu-id="14390-214">\[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-214">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="14390-215">可选。</span><span class="sxs-lookup"><span data-stu-id="14390-215">Optional.</span></span> <span data-ttu-id="14390-216">仅将有值的单元格视为已使用的单元格。</span><span class="sxs-lookup"><span data-stu-id="14390-216">Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.horizontalPageBreaks
  summary: >-
    <span data-ttu-id="14390-217">获取工作表的水平分页符集合。</span><span class="sxs-lookup"><span data-stu-id="14390-217">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="14390-218">此集合仅包含手动分页符。</span><span class="sxs-lookup"><span data-stu-id="14390-218">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="14390-219">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-219">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: horizontalPageBreaks
  fullName: horizontalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.id
  summary: >-
    <span data-ttu-id="14390-p130">返回用于唯一标识指定工作簿中工作表的值。即使工作表被重命名或移动，标识符的值仍然相同。只读。</span><span class="sxs-lookup"><span data-stu-id="14390-p130">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>


    <span data-ttu-id="14390-223">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.load
  summary: <span data-ttu-id="14390-224">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="14390-224">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="14390-225">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="14390-225">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="14390-226">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="14390-226">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="14390-227">`load(option?: string | string[]): Excel.Worksheet`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="14390-227">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="14390-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="14390-228">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="14390-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="14390-229">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="14390-230">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="14390-230">It is similar to the preceding signature.</span></span> <span data-ttu-id="14390-231">top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="14390-231">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="14390-232">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="14390-232">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="14390-233">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="14390-233">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.WorksheetLoadOptions
- uid: excel.Excel.Worksheet.load_1
  summary: <span data-ttu-id="14390-234">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="14390-234">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="14390-235">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="14390-235">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-236\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-236\">Examples</span></span>\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="14390-237">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="14390-237">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Worksheet.load_2
  summary: <span data-ttu-id="14390-238">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="14390-238">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="14390-239">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="14390-239">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="14390-240">其中, propertyNamesAndPaths 是用逗号分隔的字符串, 用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="14390-240">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.Worksheet.name
  summary: >-
    <span data-ttu-id="14390-241">工作表的显示名称。</span><span class="sxs-lookup"><span data-stu-id="14390-241">The display name of the worksheet.</span></span>


    <span data-ttu-id="14390-242">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.names
  summary: >-
    <span data-ttu-id="14390-243">一组范围限定到当前工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="14390-243">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="14390-244">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-244">Read-only.</span></span>


    <span data-ttu-id="14390-245">\[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-245">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: names
  fullName: names
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
- uid: excel.Excel.Worksheet.onActivated
  summary: >-
    <span data-ttu-id="14390-246">当激活工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="14390-246">Occurs when the worksheet is activated.</span></span>


    <span data-ttu-id="14390-247">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-247">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-248\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-248\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onCalculated
  summary: >-
    <span data-ttu-id="14390-249">在计算工作表时发生。</span><span class="sxs-lookup"><span data-stu-id="14390-249">Occurs when the worksheet is calculated.</span></span>


    <span data-ttu-id="14390-250">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-250">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-251\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-251\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onCalculated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The worksheet has recalculated.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onChanged
  summary: >-
    <span data-ttu-id="14390-252">当指定的工作表上的数据发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="14390-252">Occurs when data changed on a specific worksheet.</span></span>


    <span data-ttu-id="14390-253">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-253">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-254\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-254\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n});\n```"
- uid: excel.Excel.Worksheet.onDeactivated
  summary: >-
    <span data-ttu-id="14390-255">停用工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="14390-255">Occurs when the worksheet is deactivated.</span></span>


    <span data-ttu-id="14390-256">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-256">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-257\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-257\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onFiltered
  summary: >-
    <span data-ttu-id="14390-258">在特定工作表上应用筛选器时发生。</span><span class="sxs-lookup"><span data-stu-id="14390-258">Occurs when filter is applied on a specific worksheet.</span></span>


    <span data-ttu-id="14390-259">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-259">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.Worksheet.onFormatChanged
  summary: >-
    <span data-ttu-id="14390-260">在特定工作表上更改格式时发生。</span><span class="sxs-lookup"><span data-stu-id="14390-260">Occurs when format changed on a specific worksheet.</span></span>


    <span data-ttu-id="14390-261">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-261">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.Worksheet.onSelectionChanged
  summary: >-
    <span data-ttu-id="14390-262">当指定的工作表上的所选内容更改时发生。</span><span class="sxs-lookup"><span data-stu-id="14390-262">Occurs when the selection changes on a specific worksheet.</span></span>


    <span data-ttu-id="14390-263">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-263">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-264\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-264\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.pageLayout
  summary: >-
    <span data-ttu-id="14390-265">获取工作表的 PageLayout 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-265">Gets the PageLayout object of the worksheet.</span></span>


    <span data-ttu-id="14390-266">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-266">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: pageLayout
  fullName: pageLayout
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pageLayout: Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
- uid: excel.Excel.Worksheet.pivotTables
  summary: >-
    <span data-ttu-id="14390-267">一组属于 worksheet 的 PivotTable 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-267">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="14390-268">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-268">Read-only.</span></span>


    <span data-ttu-id="14390-269">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-269">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: pivotTables
  fullName: pivotTables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type:
      - excel.Excel.PivotTableCollection
- uid: excel.Excel.Worksheet.position
  summary: >-
    <span data-ttu-id="14390-270">工作表在工作簿中的位置，从零开始。</span><span class="sxs-lookup"><span data-stu-id="14390-270">The zero-based position of the worksheet within the workbook.</span></span>


    <span data-ttu-id="14390-271">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-271">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: position
  fullName: position
  langs:
  - typeScript
  type: property
  syntax:
    content: 'position: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.protection
  summary: >-
    <span data-ttu-id="14390-272">返回表工作表的工作表保护对象。</span><span class="sxs-lookup"><span data-stu-id="14390-272">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="14390-273">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-273">Read-only.</span></span>


    <span data-ttu-id="14390-274">\[[API 集: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: protection
  fullName: protection
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
- uid: excel.Excel.Worksheet.replaceAll
  summary: >-
    <span data-ttu-id="14390-275">根据当前工作表中指定的条件查找并替换给定的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-275">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>


    <span data-ttu-id="14390-276">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-276">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: replaceAll(text, replacement, criteria)
  fullName: replaceAll(text, replacement, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: <span data-ttu-id="14390-277">执行的替换的次数。</span><span class="sxs-lookup"><span data-stu-id="14390-277">The number of replacements performed.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="14390-278">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-278">String to find.</span></span>
      type:
      - string
    - id: replacement
      description: <span data-ttu-id="14390-279">要将原始替换为的字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-279">String to replace the original with.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="14390-280">其他替换条件。</span><span class="sxs-lookup"><span data-stu-id="14390-280">Additional Replace Criteria.</span></span>
      type:
      - excel.Excel.ReplaceCriteria
- uid: excel.Excel.Worksheet.set
  summary: <span data-ttu-id="14390-281">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="14390-281">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="14390-282">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="14390-282">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="14390-283">此方法具有以下附加签名:</span><span class="sxs-lookup"><span data-stu-id="14390-283">This method has the following additional signature:</span></span>


    `set(properties: Excel.Worksheet): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="14390-284">一个 JavaScript 对象, 其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="14390-284">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.WorksheetUpdateData
    - id: options
      description: <span data-ttu-id="14390-285">提供一个选项, 以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="14390-285">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Worksheet.set_1
  summary: <span data-ttu-id="14390-286">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="14390-286">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.shapes
  summary: >-
    <span data-ttu-id="14390-287">返回工作表上的所有 Shape 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="14390-287">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="14390-288">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-288">Read-only.</span></span>


    <span data-ttu-id="14390-289">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-289">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: shapes
  fullName: shapes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly shapes: Excel.ShapeCollection;'
    return:
      type:
      - excel.Excel.ShapeCollection
- uid: excel.Excel.Worksheet.showGridlines
  summary: >-
    <span data-ttu-id="14390-290">获取或设置工作表的网格线标志。</span><span class="sxs-lookup"><span data-stu-id="14390-290">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="14390-291">此标志确定是否对用户显示网格线。</span><span class="sxs-lookup"><span data-stu-id="14390-291">This flag determines whether gridlines are visible to the user.</span></span>


    <span data-ttu-id="14390-292">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-292">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showGridlines
  fullName: showGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-293\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-293\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.showHeadings
  summary: >-
    <span data-ttu-id="14390-294">获取或设置工作表的标题标志。</span><span class="sxs-lookup"><span data-stu-id="14390-294">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="14390-295">此标志确定是否对用户显示标题。</span><span class="sxs-lookup"><span data-stu-id="14390-295">This flag determines whether headings are visible to the user.</span></span>


    <span data-ttu-id="14390-296">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-296">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showHeadings
  fullName: showHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.slicers
  summary: >-
    <span data-ttu-id="14390-297">返回作为工作表一部分的切片器集合。</span><span class="sxs-lookup"><span data-stu-id="14390-297">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="14390-298">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-298">Read-only.</span></span>


    <span data-ttu-id="14390-299">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-299">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: slicers
  fullName: slicers
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly slicers: Excel.SlicerCollection;'
    return:
      type:
      - excel.Excel.SlicerCollection
- uid: excel.Excel.Worksheet.standardHeight
  summary: >-
    <span data-ttu-id="14390-300">返回工作表中所有行的标准（默认）行高，以磅为单位。</span><span class="sxs-lookup"><span data-stu-id="14390-300">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="14390-301">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-301">Read-only.</span></span>


    <span data-ttu-id="14390-302">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-302">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardHeight
  fullName: standardHeight
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.standardWidth
  summary: >-
    <span data-ttu-id="14390-303">返回或设置工作表中所有列的标准（默认）列宽。</span><span class="sxs-lookup"><span data-stu-id="14390-303">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="14390-304">一个列宽单位等于“常规”样式中一个字符的宽度。</span><span class="sxs-lookup"><span data-stu-id="14390-304">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="14390-305">对于比例字体，则使用字符 0（零）的宽度。</span><span class="sxs-lookup"><span data-stu-id="14390-305">For proportional fonts, the width of the character 0 (zero) is used.</span></span>


    <span data-ttu-id="14390-306">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-306">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardWidth
  fullName: standardWidth
  langs:
  - typeScript
  type: property
  syntax:
    content: 'standardWidth: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.tabColor
  summary: >-
    <span data-ttu-id="14390-307">获取或设置工作表标签颜色。</span><span class="sxs-lookup"><span data-stu-id="14390-307">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="14390-308">检索选项卡颜色时, 如果工作表不可见, 则值将为 null。</span><span class="sxs-lookup"><span data-stu-id="14390-308">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="14390-309">如果工作表可见但选项卡颜色设置为自动, 将返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="14390-309">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="14390-310">否则, 在设置颜色时, 属性将设置为颜色, 格式为\#"123456", 则使用空字符串设置 "自动" 颜色, 或使用实际颜色。</span><span class="sxs-lookup"><span data-stu-id="14390-310">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>


    <span data-ttu-id="14390-311">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-311">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tabColor
  fullName: tabColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tabColor: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"14390-312\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"14390-312\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.tables
  summary: >-
    <span data-ttu-id="14390-313">属于工作表的表的集合。</span><span class="sxs-lookup"><span data-stu-id="14390-313">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="14390-314">只读。</span><span class="sxs-lookup"><span data-stu-id="14390-314">Read-only.</span></span>


    <span data-ttu-id="14390-315">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-315">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
- uid: excel.Excel.Worksheet.toJSON
  summary: <span data-ttu-id="14390-316">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="14390-316">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="14390-317">.</span><span class="sxs-lookup"><span data-stu-id="14390-317"></span></span> <span data-ttu-id="14390-318">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="14390-318"></span></span><!-- --><span data-ttu-id="14390-319">反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel 工作表对象是 API 对象, 但`toJSON`方法返回一个简单的 JavaScript 对象 (类型为`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="14390-319">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="14390-320">), 其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="14390-320">) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetData
      description: ''
- uid: excel.Excel.Worksheet.verticalPageBreaks
  summary: >-
    <span data-ttu-id="14390-321">获取工作表的垂直分页符集合。</span><span class="sxs-lookup"><span data-stu-id="14390-321">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="14390-322">此集合仅包含手动分页符。</span><span class="sxs-lookup"><span data-stu-id="14390-322">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="14390-323">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="14390-323">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: verticalPageBreaks
  fullName: verticalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.visibility
  summary: >-
    <span data-ttu-id="14390-324">工作表的可见性。</span><span class="sxs-lookup"><span data-stu-id="14390-324">The Visibility of the worksheet.</span></span>


    <span data-ttu-id="14390-325">\[[API 集: ExcelApi 1.1 用于读取可见性; 1.2 用于设置。](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="14390-325">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="14390-326">\]</span><span class="sxs-lookup"><span data-stu-id="14390-326"></span></span>
  name: visibility
  fullName: visibility
  langs:
  - typeScript
  type: property
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type:
      - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
