### YamlMime:UniversalReference
items:
  - uid: excel.Excel.SettableCellProperties
    summary: |-
      <span data-ttu-id="09e6c-101">表示 setCellProperties 的输入参数。</span><span class="sxs-lookup"><span data-stu-id="09e6c-101">Represents the input parameter of setCellProperties.</span></span>

      <span data-ttu-id="09e6c-102">\[[API 集: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="09e6c-102">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.SettableCellProperties
    fullName: Excel.SettableCellProperties
    langs:
      - typeScript
    type: interface
    package: excel
    children:
      - excel.Excel.SettableCellProperties.format
      - excel.Excel.SettableCellProperties.hyperlink
      - excel.Excel.SettableCellProperties.style
  - uid: excel.Excel.SettableCellProperties.format
    summary: |-
      <span data-ttu-id="09e6c-103">表示`format`属性。</span><span class="sxs-lookup"><span data-stu-id="09e6c-103">Represents the `format` property.</span></span>

      <span data-ttu-id="09e6c-104">\[[API 集: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="09e6c-104">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'format?: Excel.CellPropertiesFormat;'
      return:
        type:
          - excel.Excel.CellPropertiesFormat
  - uid: excel.Excel.SettableCellProperties.hyperlink
    summary: |-
      <span data-ttu-id="09e6c-105">表示`hyperlink`属性。</span><span class="sxs-lookup"><span data-stu-id="09e6c-105">Represents the `hyperlink` property.</span></span>

      <span data-ttu-id="09e6c-106">\[[API 集: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="09e6c-106">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink?: Excel.RangeHyperlink;'
      return:
        type:
          - excel.Excel.RangeHyperlink
  - uid: excel.Excel.SettableCellProperties.style
    summary: |-
      <span data-ttu-id="09e6c-107">表示`style`属性。</span><span class="sxs-lookup"><span data-stu-id="09e6c-107">Represents the `style` property.</span></span>

      <span data-ttu-id="09e6c-108">\[[API 集: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="09e6c-108">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="09e6c-109">示例</span><span class="sxs-lookup"><span data-stu-id="09e6c-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```