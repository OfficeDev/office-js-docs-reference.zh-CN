### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: |-
      <span data-ttu-id="e8942-101">Excel 工作表是由单元格组成的网格。</span><span class="sxs-lookup"><span data-stu-id="e8942-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="e8942-102">它可以包含数据、表、图表等。若要了解有关工作表对象模型的详细信息，请参阅[使用 Excel JAVASCRIPT API 处理工作表](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="e8942-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="e8942-103">.</span><span class="sxs-lookup"><span data-stu-id="e8942-103"></span></span>

      <span data-ttu-id="e8942-104">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onCalculated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onColumnSorted:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onFiltered:member'
      - 'excel!Excel.Worksheet#onFormatChanged:member'
      - 'excel!Excel.Worksheet#onRowHiddenChanged:member'
      - 'excel!Excel.Worksheet#onRowSorted:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#onSingleClicked:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: |-
      <span data-ttu-id="e8942-105">在 Excel UI 中激活工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="e8942-106">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-107">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: |-
      <span data-ttu-id="e8942-108">表示工作表的 AutoFilter 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-108">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="e8942-109">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-109">Read-Only.</span></span>

      <span data-ttu-id="e8942-110">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-110">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: Excel.AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-111">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: |-
      <span data-ttu-id="e8942-112">计算工作表上的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e8942-112">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="e8942-113">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="e8942-114">如果为 True，则将全部标记为已更新。</span><span class="sxs-lookup"><span data-stu-id="e8942-114">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: |-
      <span data-ttu-id="e8942-115">返回属于工作表的图表的集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-115">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="e8942-116">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-116">Read-only.</span></span>

      <span data-ttu-id="e8942-117">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: |-
      <span data-ttu-id="e8942-118">返回工作表上的所有 Comments 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-118">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="e8942-119">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-119">Read-only.</span></span>

      <span data-ttu-id="e8942-120">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-120">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: Excel.CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: <span data-ttu-id="e8942-121">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="e8942-121">The request context associated with the object.</span></span> <span data-ttu-id="e8942-122">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="e8942-122">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: |-
      <span data-ttu-id="e8942-123">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="e8942-123">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="e8942-124">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-124">Return the copied worksheet.</span></span>

      <span data-ttu-id="e8942-125">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-125">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-126">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="e8942-127">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-127">Optional.</span></span>
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: <span data-ttu-id="e8942-128">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-128">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: |-
      <span data-ttu-id="e8942-129">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="e8942-129">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="e8942-130">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-130">Return the copied worksheet.</span></span>

      <span data-ttu-id="e8942-131">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-131">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="e8942-132">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-132">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="e8942-133">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-133">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: |-
      <span data-ttu-id="e8942-134">从工作簿中删除工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-134">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="e8942-135">请注意，如果工作表的可见性设置为 "VeryHidden"，则删除操作将失败， `InvalidOperation`并出现异常。</span><span class="sxs-lookup"><span data-stu-id="e8942-135">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with an `InvalidOperation` exception.</span></span> <span data-ttu-id="e8942-136">应首先将其可见性更改为隐藏或可见，然后再将其删除。</span><span class="sxs-lookup"><span data-stu-id="e8942-136">You should first change its visibility to hidden or visible before deleting it.</span></span>

      <span data-ttu-id="e8942-137">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-137">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-138">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-138">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: |-
      <span data-ttu-id="e8942-139">获取或设置工作表的 enableCalculation 属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-139">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="e8942-140">如此如果 Excel 根据需要重新计算工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-140">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="e8942-141">如果 Excel 不重新计算工作表，则该值为 False。</span><span class="sxs-lookup"><span data-stu-id="e8942-141">False if Excel doesn't recalculate the sheet.</span></span>

      <span data-ttu-id="e8942-142">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-142">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: |-
      <span data-ttu-id="e8942-143">根据指定的条件查找给定字符串的所有匹配项，并将它们作为包含一个或多个矩形区域的 RangeAreas 对象返回。</span><span class="sxs-lookup"><span data-stu-id="e8942-143">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="e8942-144">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-144">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: '<span data-ttu-id="e8942-145">一个 RangeArea 对象，其中包含一个或多个与搜索条件相匹配的矩形区域。</span><span class="sxs-lookup"><span data-stu-id="e8942-145">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="e8942-146">如果没有满足此条件的单元格，则将引发 ItemNotFound 错误。</span><span class="sxs-lookup"><span data-stu-id="e8942-146">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>'
      parameters:
        - id: text
          description: <span data-ttu-id="e8942-147">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-147">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="e8942-148">其他搜索条件，包括搜索是否需要匹配整个单元格或是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="e8942-148">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e8942-149">根据指定的条件查找给定字符串的所有匹配项，并将它们作为包含一个或多个矩形区域的 RangeAreas 对象返回。</span><span class="sxs-lookup"><span data-stu-id="e8942-149">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>

      <span data-ttu-id="e8942-150">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-150">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-
          <span data-ttu-id="e8942-151">一个 RangeArea 对象，其中包含一个或多个与搜索条件相匹配的矩形区域。</span><span class="sxs-lookup"><span data-stu-id="e8942-151">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="e8942-152">如果没有匹配项，则此函数将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-152">If there are no matches, this function will return a null object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e8942-153">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-153">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="e8942-154">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-154">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="e8942-155">其他搜索条件，包括搜索是否需要匹配整个单元格或是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="e8942-155">Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: |-
      <span data-ttu-id="e8942-156">获取一个对象，该对象可用于操作工作表上的冻结窗格。</span><span class="sxs-lookup"><span data-stu-id="e8942-156">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="e8942-157">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-157">Read-only.</span></span>

      <span data-ttu-id="e8942-158">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-158">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: |-
      <span data-ttu-id="e8942-159">根据行和列编号获取包含单个单元格的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-159">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="e8942-160">单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。</span><span class="sxs-lookup"><span data-stu-id="e8942-160">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="e8942-161">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-161">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-162">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-162">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="e8942-163">要检索的单元格的行号。</span><span class="sxs-lookup"><span data-stu-id="e8942-163">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="e8942-164">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e8942-164">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="e8942-165">要检索的单元格的列号。</span><span class="sxs-lookup"><span data-stu-id="e8942-165">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="e8942-166">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e8942-166">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: |-
      <span data-ttu-id="e8942-167">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-167">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="e8942-168">如果此方法后面没有任何工作表，则此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="e8942-168">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="e8942-169">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-169">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-170">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-170">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="e8942-171">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-171">Optional.</span></span> <span data-ttu-id="e8942-172">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-172">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e8942-173">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-173">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="e8942-174">如果此方法后面没有任何工作表，则此方法将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-174">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="e8942-175">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-175">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="e8942-176">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-176">Optional.</span></span> <span data-ttu-id="e8942-177">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-177">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="e8942-178">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-178">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="e8942-179">如果没有以前的工作表，此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="e8942-179">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="e8942-180">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-180">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-181">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-181">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="e8942-182">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-182">Optional.</span></span> <span data-ttu-id="e8942-183">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-183">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e8942-184">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-184">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="e8942-185">如果没有以前的工作表，则此方法将返回一个空的 objet。</span><span class="sxs-lookup"><span data-stu-id="e8942-185">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="e8942-186">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-186">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="e8942-187">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-187">Optional.</span></span> <span data-ttu-id="e8942-188">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="e8942-188">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: |-
      <span data-ttu-id="e8942-189">获取一个 range 对象，该对象代表由地址或名称指定的单个矩形单元格块。</span><span class="sxs-lookup"><span data-stu-id="e8942-189">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="e8942-190">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-190">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-191">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-191">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="e8942-192">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-192">Optional.</span></span> <span data-ttu-id="e8942-193">表示地址或范围名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-193">The string representing the address or name of the range.</span></span> <span data-ttu-id="e8942-194">例如，"A1： B2"。</span><span class="sxs-lookup"><span data-stu-id="e8942-194">For example, "A1:B2".</span></span> <span data-ttu-id="e8942-195">如果未指定，则返回整个工作表区域。</span><span class="sxs-lookup"><span data-stu-id="e8942-195">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: |-
      <span data-ttu-id="e8942-196">获取以特定行索引和列索引开始并跨越了一定数量的行和列的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-196">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="e8942-197">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-197">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="e8942-198">起始行（零编制索引）。</span><span class="sxs-lookup"><span data-stu-id="e8942-198">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="e8942-199">Start 列（零个索引）。</span><span class="sxs-lookup"><span data-stu-id="e8942-199">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: <span data-ttu-id="e8942-200">要包含在范围中的行数。</span><span class="sxs-lookup"><span data-stu-id="e8942-200">Number of rows to include in the range.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="e8942-201">要包含在范围中的列数。</span><span class="sxs-lookup"><span data-stu-id="e8942-201">Number of columns to include in the range.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: |-
      <span data-ttu-id="e8942-202">获取按地址或名称指定的 RangeAreas 对象，它表示一个或多个矩形区域块。</span><span class="sxs-lookup"><span data-stu-id="e8942-202">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>

      <span data-ttu-id="e8942-203">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-203">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-204">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-204">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="e8942-205">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-205">Optional.</span></span> <span data-ttu-id="e8942-206">一个包含以逗号分隔的地址或各个区域的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-206">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="e8942-207">例如，"A1： B2，A5： B5"。</span><span class="sxs-lookup"><span data-stu-id="e8942-207">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="e8942-208">如果未指定，则返回整个工作表的 RangeArea 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-208">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="e8942-209">使用的区域是包含分配了值或格式化的任何单元格的最小区域。</span><span class="sxs-lookup"><span data-stu-id="e8942-209">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="e8942-210">如果整个工作表为空，则此函数将返回左上角单元格（即，它*不*会引发错误）。</span><span class="sxs-lookup"><span data-stu-id="e8942-210">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="e8942-211">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-211">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-212">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-212">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="e8942-213">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-213">Optional.</span></span> <span data-ttu-id="e8942-214">如果为 true，则仅考虑值为已使用单元格的单元格（忽略格式设置）。</span><span class="sxs-lookup"><span data-stu-id="e8942-214">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="e8942-215">\[Api 集： ExcelApi 1。2\]</span><span class="sxs-lookup"><span data-stu-id="e8942-215">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e8942-p128">使用的区域是包含分配了值或格式的任意单元格的最小区域。如果整个工作表为空，此函数将返回 NULL 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-p128">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="e8942-218">\[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-218">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="e8942-219">可选。</span><span class="sxs-lookup"><span data-stu-id="e8942-219">Optional.</span></span> <span data-ttu-id="e8942-220">仅将有值的单元格视为已使用的单元格。</span><span class="sxs-lookup"><span data-stu-id="e8942-220">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: |-
      <span data-ttu-id="e8942-221">获取工作表的水平分页符集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-221">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="e8942-222">此集合仅包含手动分页符。</span><span class="sxs-lookup"><span data-stu-id="e8942-222">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="e8942-223">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-223">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: |-
      <span data-ttu-id="e8942-p131">返回用于唯一标识指定工作簿中工作表的值。即使工作表被重命名或移动，标识符的值仍然相同。只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-p131">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="e8942-227">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-227">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: <span data-ttu-id="e8942-228">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-228">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e8942-229">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="e8942-229">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="e8942-230">提供要加载的对象的属性的选项。</span><span class="sxs-lookup"><span data-stu-id="e8942-230">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: <span data-ttu-id="e8942-231">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-231">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e8942-232">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="e8942-232">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-233">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-233">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="e8942-234">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-234">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: <span data-ttu-id="e8942-235">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-235">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e8942-236">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="e8942-236">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="e8942-237">`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-237">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: |-
      <span data-ttu-id="e8942-238">工作表的显示名称。</span><span class="sxs-lookup"><span data-stu-id="e8942-238">The display name of the worksheet.</span></span>

      <span data-ttu-id="e8942-239">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-239">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: |-
      <span data-ttu-id="e8942-240">一组范围限定到当前工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="e8942-240">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="e8942-241">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-241">Read-only.</span></span>

      <span data-ttu-id="e8942-242">\[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-242">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: |-
      <span data-ttu-id="e8942-243">当激活工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="e8942-243">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="e8942-244">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-244">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-245">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-245">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onCalculated:member'
    summary: |-
      <span data-ttu-id="e8942-246">在计算工作表时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-246">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="e8942-247">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-247">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onCalculated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-248">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-248">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: |-
      <span data-ttu-id="e8942-249">当指定的工作表上的数据发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-249">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="e8942-250">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-250">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-251">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-251">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onColumnSorted:member'
    summary: |-
      <span data-ttu-id="e8942-252">在对一个或多个列进行排序时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-252">Occurs when one or more columns have been sorted.</span></span> <span data-ttu-id="e8942-253">从左到右排序操作的结果会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="e8942-253">This happens as the result of a left-to-right sort operation.</span></span>

      <span data-ttu-id="e8942-254">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-254">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onColumnSorted~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-255">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-255">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding column handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a column has been moved as the result of a sort action.
              sheet.onColumnSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Column sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: |-
      <span data-ttu-id="e8942-256">停用工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="e8942-256">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="e8942-257">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-257">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-258">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-258">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onFiltered:member'
    summary: |-
      <span data-ttu-id="e8942-259">在特定工作表上应用筛选器时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-259">Occurs when filter is applied on a specific worksheet.</span></span>

      <span data-ttu-id="e8942-260">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-260">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onFiltered
    fullName: onFiltered
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFiltered~0:complex'
  - uid: 'excel!Excel.Worksheet#onFormatChanged:member'
    summary: |-
      <span data-ttu-id="e8942-261">在特定工作表上更改格式时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-261">Occurs when format changed on a specific worksheet.</span></span>

      <span data-ttu-id="e8942-262">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-262">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFormatChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowHiddenChanged:member'
    summary: |-
      <span data-ttu-id="e8942-263">在特定工作表上的一个或多个行的隐藏状态更改时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-263">Occurs when the hidden state of one or more rows has changed on a specific worksheet.</span></span>

      <span data-ttu-id="e8942-264">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-264">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowHiddenChanged
    fullName: onRowHiddenChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowHiddenChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowSorted:member'
    summary: |-
      <span data-ttu-id="e8942-265">对一个或多个行进行排序时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-265">Occurs when one or more rows have been sorted.</span></span> <span data-ttu-id="e8942-266">这是从上到下排序操作的结果。</span><span class="sxs-lookup"><span data-stu-id="e8942-266">This happens as the result of a top-to-bottom sort operation.</span></span>

      <span data-ttu-id="e8942-267">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-267">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowSorted~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-268">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-268">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding row handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a row has been moved as the result of a sort action.
              sheet.onRowSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Row sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: |-
      <span data-ttu-id="e8942-269">当指定的工作表上的所选内容更改时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-269">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="e8942-270">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-270">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-271">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-271">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSingleClicked:member'
    summary: |-
      <span data-ttu-id="e8942-272">在工作表中进行左键单击/点击操作时发生。</span><span class="sxs-lookup"><span data-stu-id="e8942-272">Occurs when left-clicked/tapped operation happens in the worksheet.</span></span> <span data-ttu-id="e8942-273">在以下情况下单击时不会触发此事件：</span><span class="sxs-lookup"><span data-stu-id="e8942-273">This event will not be fired when clicking in the following cases:</span></span>

      - <span data-ttu-id="e8942-274">用户拖动鼠标进行多选。</span><span class="sxs-lookup"><span data-stu-id="e8942-274">The user drags the mouse for multi-selection.</span></span>

      - <span data-ttu-id="e8942-275">当为公式引用选择单元格参数时，用户将选择模式中的单元格。</span><span class="sxs-lookup"><span data-stu-id="e8942-275">The user selects a cell in the mode when cell arguments are selected for formula references.</span></span>

      <span data-ttu-id="e8942-276">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-276">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSingleClicked~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-277">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-277">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.onSingleClicked.add((event) => {
                  return Excel.run((context) => {
                      console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                      return context.sync();
                  });
              });

              console.log("The worksheet click handler is registered.");

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: |-
      <span data-ttu-id="e8942-278">获取工作表的 PageLayout 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-278">Gets the PageLayout object of the worksheet.</span></span>

      <span data-ttu-id="e8942-279">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-279">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: Excel.PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:class'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: |-
      <span data-ttu-id="e8942-280">一组属于 worksheet 的 PivotTable 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-280">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="e8942-281">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-281">Read-only.</span></span>

      <span data-ttu-id="e8942-282">\[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-282">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: |-
      <span data-ttu-id="e8942-283">工作表在工作簿中的位置，从零开始。</span><span class="sxs-lookup"><span data-stu-id="e8942-283">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="e8942-284">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: |-
      <span data-ttu-id="e8942-285">返回表工作表的工作表保护对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-285">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="e8942-286">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-286">Read-only.</span></span>

      <span data-ttu-id="e8942-287">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-287">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="e8942-288">根据当前工作表中指定的条件查找并替换给定的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-288">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>

      <span data-ttu-id="e8942-289">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-289">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: <span data-ttu-id="e8942-290">执行的替换的次数。</span><span class="sxs-lookup"><span data-stu-id="e8942-290">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="e8942-291">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-291">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="e8942-292">要将原始替换为的字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-292">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="e8942-293">其他替换条件。</span><span class="sxs-lookup"><span data-stu-id="e8942-293">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: '<span data-ttu-id="e8942-294">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-294">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="e8942-295">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="e8942-295">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="e8942-296">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="e8942-296">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="e8942-297">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-297">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: <span data-ttu-id="e8942-298">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="e8942-298">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: '<span data-ttu-id="e8942-299">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="e8942-299">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: |-
      <span data-ttu-id="e8942-300">返回工作表上的所有 Shape 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-300">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="e8942-301">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-301">Read-only.</span></span>

      <span data-ttu-id="e8942-302">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-302">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: |-
      <span data-ttu-id="e8942-303">获取或设置工作表的网格线标志。</span><span class="sxs-lookup"><span data-stu-id="e8942-303">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="e8942-304">此标志确定是否对用户显示网格线。</span><span class="sxs-lookup"><span data-stu-id="e8942-304">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="e8942-305">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-305">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-306">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-306">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: |-
      <span data-ttu-id="e8942-307">获取或设置工作表的标题标志。</span><span class="sxs-lookup"><span data-stu-id="e8942-307">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="e8942-308">此标志确定是否对用户显示标题。</span><span class="sxs-lookup"><span data-stu-id="e8942-308">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="e8942-309">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-309">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: |-
      <span data-ttu-id="e8942-310">按行或列的大纲级别显示组。</span><span class="sxs-lookup"><span data-stu-id="e8942-310">Shows row or column groups by their outline levels.</span></span> <span data-ttu-id="e8942-311">勾勒出组合并汇总工作表中的数据列表。</span><span class="sxs-lookup"><span data-stu-id="e8942-311">Outlines group and summarize a list of data in the worksheet.</span></span> <span data-ttu-id="e8942-312">`rowLevels`和`columnLevels`参数指定将显示的大纲的级别数。</span><span class="sxs-lookup"><span data-stu-id="e8942-312">The `rowLevels` and `columnLevels` parameters specify how many levels of the outline will be displayed.</span></span> <span data-ttu-id="e8942-313">可接受的参数范围介于0和8之间。</span><span class="sxs-lookup"><span data-stu-id="e8942-313">The acceptable argument range is between 0 and 8.</span></span> <span data-ttu-id="e8942-314">值0不会更改当前显示。</span><span class="sxs-lookup"><span data-stu-id="e8942-314">A value of 0 does not change the current display.</span></span> <span data-ttu-id="e8942-315">大于当前级别数的值将显示所有级别。</span><span class="sxs-lookup"><span data-stu-id="e8942-315">A value greater than the current number of levels displays all the levels.</span></span>

      <span data-ttu-id="e8942-316">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-316">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowLevels
          description: <span data-ttu-id="e8942-317">要显示的分级显示的行级别数。</span><span class="sxs-lookup"><span data-stu-id="e8942-317">The number of row levels of an outline to display.</span></span>
          type:
            - number
        - id: columnLevels
          description: <span data-ttu-id="e8942-318">要显示的分级显示的列级别数。</span><span class="sxs-lookup"><span data-stu-id="e8942-318">The number of column levels of an outline to display.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: |-
      <span data-ttu-id="e8942-319">返回作为工作表一部分的切片器集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-319">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="e8942-320">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-320">Read-only.</span></span>

      <span data-ttu-id="e8942-321">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-321">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-322">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-322">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: |-
      <span data-ttu-id="e8942-323">返回工作表中所有行的标准（默认）行高，以磅为单位。</span><span class="sxs-lookup"><span data-stu-id="e8942-323">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="e8942-324">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-324">Read-only.</span></span>

      <span data-ttu-id="e8942-325">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-325">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: |-
      <span data-ttu-id="e8942-326">返回或设置工作表中所有列的标准（默认）列宽。</span><span class="sxs-lookup"><span data-stu-id="e8942-326">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="e8942-327">一个列宽单位等于“常规”样式中一个字符的宽度。</span><span class="sxs-lookup"><span data-stu-id="e8942-327">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="e8942-328">对于比例字体，则使用字符 0（零）的宽度。</span><span class="sxs-lookup"><span data-stu-id="e8942-328">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="e8942-329">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-329">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: |-
      <span data-ttu-id="e8942-330">获取或设置工作表标签颜色。</span><span class="sxs-lookup"><span data-stu-id="e8942-330">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="e8942-331">检索选项卡颜色时，如果工作表不可见，则值将为 null。</span><span class="sxs-lookup"><span data-stu-id="e8942-331">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="e8942-332">如果工作表可见但选项卡颜色设置为自动，将返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="e8942-332">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="e8942-333">否则，在设置颜色时，属性将设置为颜色，格式为\#"123456"，则使用空字符串设置 "自动" 颜色，或使用实际颜色。</span><span class="sxs-lookup"><span data-stu-id="e8942-333">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="e8942-334">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-334">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e8942-335">示例</span><span class="sxs-lookup"><span data-stu-id="e8942-335">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: |-
      <span data-ttu-id="e8942-336">属于工作表的表的集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-336">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="e8942-337">只读。</span><span class="sxs-lookup"><span data-stu-id="e8942-337">Read-only.</span></span>

      <span data-ttu-id="e8942-338">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-338">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: '<span data-ttu-id="e8942-339">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="e8942-339">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="e8942-340">.</span><span class="sxs-lookup"><span data-stu-id="e8942-340"></span></span> <span data-ttu-id="e8942-341">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="e8942-341"></span></span><!-- --><span data-ttu-id="e8942-342">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel 工作表对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="e8942-342">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="e8942-343">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="e8942-343">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: |-
      <span data-ttu-id="e8942-344">获取工作表的垂直分页符集合。</span><span class="sxs-lookup"><span data-stu-id="e8942-344">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="e8942-345">此集合仅包含手动分页符。</span><span class="sxs-lookup"><span data-stu-id="e8942-345">This collection only contains manual page breaks.</span></span>

      <span data-ttu-id="e8942-346">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e8942-346">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: |-
      <span data-ttu-id="e8942-347">工作表的可见性。</span><span class="sxs-lookup"><span data-stu-id="e8942-347">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="e8942-348">\[[API 集： ExcelApi 1.1 用于读取可见性; 1.2 用于设置。](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="e8942-348">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="e8942-349">\]</span><span class="sxs-lookup"><span data-stu-id="e8942-349"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.AutoFilter:class'
    name: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:class'
    name: Excel.CommentCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:class'
    name: Excel.PageBreakCollection
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onColumnSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetColumnSortedEventArgs:interface'
        name: Excel.WorksheetColumnSortedEventArgs
        fullName: Excel.WorksheetColumnSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFiltered~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFilteredEventArgs:interface'
        name: Excel.WorksheetFilteredEventArgs
        fullName: Excel.WorksheetFilteredEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowHiddenChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowHiddenChangedEventArgs:interface'
        name: Excel.WorksheetRowHiddenChangedEventArgs
        fullName: Excel.WorksheetRowHiddenChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowSortedEventArgs:interface'
        name: Excel.WorksheetRowSortedEventArgs
        fullName: Excel.WorksheetRowSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSingleClicked~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSingleClickedEventArgs:interface'
        name: Excel.WorksheetSingleClickedEventArgs
        fullName: Excel.WorksheetSingleClickedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PageLayout:class'
    name: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.ShapeCollection:class'
    name: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'