### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SlicerCollection:class'
    summary: |-
      <span data-ttu-id="b66c3-101">代表工作簿或工作表上所有切片器对象的集合。</span><span class="sxs-lookup"><span data-stu-id="b66c3-101">Represents a collection of all the slicer objects on the workbook or a worksheet.</span></span>

      <span data-ttu-id="b66c3-102">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b66c3-102">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: Excel.SlicerCollection
    fullName: Excel.SlicerCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.SlicerCollection#add:member(1)'
      - 'excel!Excel.SlicerCollection#context:member'
      - 'excel!Excel.SlicerCollection#getCount:member(1)'
      - 'excel!Excel.SlicerCollection#getItem:member(1)'
      - 'excel!Excel.SlicerCollection#getItemAt:member(1)'
      - 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SlicerCollection#items:member'
      - 'excel!Excel.SlicerCollection#load:member(1)'
      - 'excel!Excel.SlicerCollection#load:member(2)'
      - 'excel!Excel.SlicerCollection#load:member(3)'
      - 'excel!Excel.SlicerCollection#toJSON:member(1)'
  - uid: 'excel!Excel.SlicerCollection#add:member(1)'
    summary: |-
      <span data-ttu-id="b66c3-103">将新切片器添加到工作簿。</span><span class="sxs-lookup"><span data-stu-id="b66c3-103">Adds a new slicer to the workbook.</span></span>

      <span data-ttu-id="b66c3-104">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b66c3-104">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'add(slicerSource, sourceField, slicerDestination)'
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-
          <span data-ttu-id="b66c3-105">新的切片器。</span><span class="sxs-lookup"><span data-stu-id="b66c3-105">The new slicer.</span></span>

          #### <a name="examples"></a><span data-ttu-id="b66c3-106">示例</span><span class="sxs-lookup"><span data-stu-id="b66c3-106">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
      parameters:
        - id: slicerSource
          description: '<span data-ttu-id="b66c3-107">新切片器将基于的数据源。</span><span class="sxs-lookup"><span data-stu-id="b66c3-107">The data source that the new slicer will be based on.</span></span> <span data-ttu-id="b66c3-108">它可以是一个数据透视表对象、一个 Table 对象或一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b66c3-108">It can be a PivotTable object, a Table object or a string.</span></span> <span data-ttu-id="b66c3-109">传递数据透视表对象时，数据源是数据透视表对象的源。</span><span class="sxs-lookup"><span data-stu-id="b66c3-109">When a PivotTable object is passed, the data source is the source of the PivotTable object.</span></span> <span data-ttu-id="b66c3-110">当传递 Table 对象时，数据源是 Table 对象。</span><span class="sxs-lookup"><span data-stu-id="b66c3-110">When a Table object is passed, the data source is the Table object.</span></span> <span data-ttu-id="b66c3-111">传递字符串时，它被解释为数据透视表/表的名称/id。</span><span class="sxs-lookup"><span data-stu-id="b66c3-111">When a string is passed, it is interpreted as the name/id of a PivotTable/Table.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~0:complex'
        - id: sourceField
          description: '<span data-ttu-id="b66c3-112">要作为筛选依据的数据源中的字段。</span><span class="sxs-lookup"><span data-stu-id="b66c3-112">The field in the data source to filter by.</span></span> <span data-ttu-id="b66c3-113">它可以是一个透视字段对象、一个 TableColumn 对象、透视字段的 id 或 TableColumn 的 id/名称。</span><span class="sxs-lookup"><span data-stu-id="b66c3-113">It can be a PivotField object, a TableColumn object, the id of a PivotField or the id/name of TableColumn.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~1:complex'
        - id: slicerDestination
          description: <span data-ttu-id="b66c3-114">可选。</span><span class="sxs-lookup"><span data-stu-id="b66c3-114">Optional.</span></span> <span data-ttu-id="b66c3-115">将在其中创建新切片器的工作表。</span><span class="sxs-lookup"><span data-stu-id="b66c3-115">The worksheet where the new slicer will be created in.</span></span> <span data-ttu-id="b66c3-116">它可以是工作表对象或工作表的名称/id。</span><span class="sxs-lookup"><span data-stu-id="b66c3-116">It can be a Worksheet object or the name/id of a worksheet.</span></span> <span data-ttu-id="b66c3-117">如果从工作表中检索切片器集合，则可以忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b66c3-117">This parameter can be omitted if the slicer collection is retrieved from worksheet.</span></span>
          type:
            - 'excel!Excel.SlicerCollection#add~2:complex'
  - uid: 'excel!Excel.SlicerCollection#context:member'
    summary: <span data-ttu-id="b66c3-118">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="b66c3-118">The request context associated with the object.</span></span> <span data-ttu-id="b66c3-119">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="b66c3-119">This connects the add-in's process to the Office host application's process.</span></span>
    isPreview: true
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.SlicerCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="b66c3-120">返回集合中的切片器数量。</span><span class="sxs-lookup"><span data-stu-id="b66c3-120">Returns the number of slicers in the collection.</span></span>

      <span data-ttu-id="b66c3-121">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b66c3-121">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.SlicerCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.SlicerCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="b66c3-122">使用其名称或 ID 获取 Slicer 对象。</span><span class="sxs-lookup"><span data-stu-id="b66c3-122">Gets a slicer object using its name or id.</span></span>

      <span data-ttu-id="b66c3-123">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b66c3-123">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="b66c3-124">示例</span><span class="sxs-lookup"><span data-stu-id="b66c3-124">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.caption = "Fruit Types";
              slicer.left = 395;
              slicer.top = 15;
              slicer.height = 135;
              slicer.width = 150;
              await context.sync();
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="b66c3-125">切片器的名称或 id。</span><span class="sxs-lookup"><span data-stu-id="b66c3-125">The name or id of the slicer.</span></span>
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#getItemAt:member(1)'
    summary: |-
      <span data-ttu-id="b66c3-126">根据其在集合中的位置获取切片器。</span><span class="sxs-lookup"><span data-stu-id="b66c3-126">Gets a slicer based on its position in the collection.</span></span>

      <span data-ttu-id="b66c3-127">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b66c3-127">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: index
          description: <span data-ttu-id="b66c3-128">要检索的对象的索引值。</span><span class="sxs-lookup"><span data-stu-id="b66c3-128">Index value of the object to be retrieved.</span></span> <span data-ttu-id="b66c3-129">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="b66c3-129">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="b66c3-130">使用其名称或 ID 获取切片器。如果没有切片器项，将返回 null 对象。</span><span class="sxs-lookup"><span data-stu-id="b66c3-130">Gets a slicer using its name or id. If the slicer does not exist, will return a null object.</span></span>

      <span data-ttu-id="b66c3-131">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="b66c3-131">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="b66c3-132">要检索的切片器的名称或 Id。</span><span class="sxs-lookup"><span data-stu-id="b66c3-132">Name or Id of the slicer to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#items:member'
    summary: <span data-ttu-id="b66c3-133">获取此集合中已加载的子项。</span><span class="sxs-lookup"><span data-stu-id="b66c3-133">Gets the loaded child items in this collection.</span></span>
    isPreview: true
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type:
          - 'excel!Excel.SlicerCollection#items~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(1)'
    summary: <span data-ttu-id="b66c3-134">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="b66c3-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b66c3-135">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="b66c3-135">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="b66c3-136">提供要加载的对象的属性的选项。</span><span class="sxs-lookup"><span data-stu-id="b66c3-136">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.SlicerCollection#load~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(2)'
    summary: <span data-ttu-id="b66c3-137">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="b66c3-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b66c3-138">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="b66c3-138">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="b66c3-139">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="b66c3-139">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.SlicerCollection#load:member(3)'
    summary: <span data-ttu-id="b66c3-140">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="b66c3-140">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="b66c3-141">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="b66c3-141">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="b66c3-142">`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="b66c3-142">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.SlicerCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="b66c3-143">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="b66c3-143">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="b66c3-144">.</span><span class="sxs-lookup"><span data-stu-id="b66c3-144"></span></span> <span data-ttu-id="b66c3-145">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="b66c3-145"></span></span><!-- --><span data-ttu-id="b66c3-146">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始`Excel.SlicerCollection`对象是 API 对象，但`toJSON`方法返回一个无格式的 JavaScript 对象（类型为`Excel.Interfaces.SlicerCollectionData`</span><span class="sxs-lookup"><span data-stu-id="b66c3-146">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.SlicerCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerCollectionData`</span></span><!-- --><span data-ttu-id="b66c3-147">），其中包含集合的项中所有加载属性的浅表副本的 "items" 数组。</span><span class="sxs-lookup"><span data-stu-id="b66c3-147">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    isPreview: true
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.SlicerCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Slicer:class'
    name: Excel.Slicer
  - uid: 'excel!Excel.SlicerCollection#add~0:complex'
    name: string | PivotTable | Table
    fullName: string | Excel.PivotTable | Excel.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotTable:class'
        name: PivotTable
        fullName: Excel.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.Table:class'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.SlicerCollection#add~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | Excel.PivotField | number | Excel.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotField:class'
        name: PivotField
        fullName: Excel.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!Excel.TableColumn:class'
        name: TableColumn
        fullName: Excel.TableColumn
  - uid: 'excel!Excel.SlicerCollection#add~2:complex'
    name: string | Worksheet
    fullName: string | Excel.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.SlicerCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.SlicerCollection#items~0:complex'
    name: 'Excel.Slicer[]'
    fullName: 'Excel.Slicer[]'
    spec.typeScript:
      - uid: 'excel!Excel.Slicer:class'
        name: Excel.Slicer
        fullName: Excel.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.SlicerCollection#load~0:complex'
    name: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.SlicerCollectionLoadOptions:interface'
        name: Excel.Interfaces.SlicerCollectionLoadOptions
        fullName: Excel.Interfaces.SlicerCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.SlicerCollectionData:interface'
    name: Excel.Interfaces.SlicerCollectionData