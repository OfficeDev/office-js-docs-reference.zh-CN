### YamlMime:TSType
name: Excel.SlicerCollection
uid: excel!Excel.SlicerCollection:class
package: excel!
fullName: Excel.SlicerCollection
summary: >-
  表示工作簿或工作表中所有切片器对象的集合。


  \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.SlicerCollection#context:member
  package: excel!
  fullName: context
  summary: 与对象关联的请求上下文。 这会将外接程序的进程连接到 Office 主机应用程序的进程。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: items
  uid: excel!Excel.SlicerCollection#items:member
  package: excel!
  fullName: items
  summary: 获取此集合中已加载的子项。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Slicer[];'
    return:
      type: <xref uid="excel!Excel.Slicer:class" />[]
methods:
- name: add(slicerSource, sourceField, slicerDestination)
  uid: excel!Excel.SlicerCollection#add:member(1)
  package: excel!
  fullName: add(slicerSource, sourceField, slicerDestination)
  summary: >-
    将新切片器添加到工作簿。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
    parameters:
    - id: slicerSource
      description: 新切片器将基于的数据源。 它可以是 `PivotTable` 对象、 `Table` 对象或字符串。 传递数据透视表对象时，数据源是该对象 `PivotTable` 的源。 传递 `Table` 对象时，数据源为 `Table` 对象。 传递字符串时，它将被解释为数据透视表或表的名称或 ID。
      type: string | <xref uid="excel!Excel.PivotTable:class" /> | <xref uid="excel!Excel.Table:class" />
    - id: sourceField
      description: 要筛选的数据源中的字段。 它可以是 `PivotField` 对象、 `TableColumn` 对象、A 的 ID `PivotField` 或名称或 ID `TableColumn`<!-- -->.
      type: string | <xref uid="excel!Excel.PivotField:class" /> | number | <xref uid="excel!Excel.TableColumn:class" />
    - id: slicerDestination
      description: 可选。 将在其中新建切片器工作表。 它可以是 `Worksheet` 对象或工作表的名称或 ID。 如果从工作表中检索切片器集合，可以省略此参数。
      type: string | <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Slicer:class" />
      description: >-
        新切片器。


        #### <a name="examples"></a>示例


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem("Pivot");
            const slicer = sheet.slicers.add(
                "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
            );
            slicer.name = "Fruit Slicer";
            await context.sync();
        });

        ```
- name: getCount()
  uid: excel!Excel.SlicerCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    返回集合中的切片器数量。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(key)
  uid: excel!Excel.SlicerCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: >-
    使用切片器对象的名称或 ID 获取该对象。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Excel.Slicer;'
    parameters:
    - id: key
      description: 切片器的名称或 ID。
      type: string
    return:
      type: <xref uid="excel!Excel.Slicer:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml\nawait Excel.run(async (context) => {\n    const slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.caption = \"Fruit Types\";\n    slicer.left = 395;\n    slicer.top = 15;\n    slicer.height = 135;\n    slicer.width = 150;\n    await context.sync();\n});\n```"
- name: getItemAt(index)
  uid: excel!Excel.SlicerCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    根据其在集合中的位置获取切片器。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Slicer;'
    parameters:
    - id: index
      description: 要检索的对象的索引值。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="excel!Excel.Slicer:class" />
      description: ''
- name: getItemOrNullObject(key)
  uid: excel!Excel.SlicerCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(key)
  summary: >-
    使用名称或 ID 获取切片器。 如果切片器不存在，则此函数将返回其 `isNullObject` 属性设置为 `true`<!-- -->. 有关详细信息，请参阅 [*OrNullObject 方法和属性](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Slicer;'
    parameters:
    - id: key
      description: 要检索的切片器的名称或 ID。
      type: string
    return:
      type: <xref uid="excel!Excel.Slicer:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.SlicerCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.SlicerCollection;'
    parameters:
    - id: options
      description: 提供要加载的对象的属性的选项。
      type: <xref uid="excel!Excel.Interfaces.SlicerCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.SlicerCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.SlicerCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
    parameters:
    - id: propertyNames
      description: 以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.SlicerCollection:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.SlicerCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` 是一个以逗号分隔的字符串，用于指定要加载的属性，它是一个以逗号分隔的字符串，用于指定要加载的 `propertyNamesAndPaths.expand` 导航属性。'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.SlicerCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.SlicerCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: 重写 JavaScript 方法，以便向 API 对象 `toJSON()` 传递时提供更多有用的输出 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->，反过来，调用传递给它的对象的方法。) 而原始对象是 API 对象，该方法返回一个纯 JavaScript 对象， (类型 `toJSON` `Excel.SlicerCollection` `toJSON` 为 `Excel.Interfaces.SlicerCollectionData`<!-- -->) 包含"items"数组，其中包含集合项中任何已加载属性的浅表副本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.SlicerCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: b02a5a3207029cb079fc3c0bc7d94bd235a8a8c4
  ms.sourcegitcommit: 276e655472f82435a4b1227fbbb2feb687b659c0
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/08/2021
  ms.locfileid: "50541369"
