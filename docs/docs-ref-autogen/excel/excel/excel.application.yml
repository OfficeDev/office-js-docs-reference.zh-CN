### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Application:class'
    summary: |-
      <span data-ttu-id="fdfe2-101">表示用于管理工作簿的 Excel 应用程序。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-101">Represents the Excel application that manages the workbook.</span></span>

      <span data-ttu-id="fdfe2-102">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Application
    fullName: Excel.Application
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Application#calculate:member(1)'
      - 'excel!Excel.Application#calculate:member(2)'
      - 'excel!Excel.Application#calculationEngineVersion:member'
      - 'excel!Excel.Application#calculationMode:member'
      - 'excel!Excel.Application#calculationState:member'
      - 'excel!Excel.Application#context:member'
      - 'excel!Excel.Application#iterativeCalculation:member'
      - 'excel!Excel.Application#load:member(1)'
      - 'excel!Excel.Application#load:member(2)'
      - 'excel!Excel.Application#load:member(3)'
      - 'excel!Excel.Application#set:member(1)'
      - 'excel!Excel.Application#set:member(2)'
      - 'excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)'
      - 'excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)'
      - 'excel!Excel.Application#toJSON:member(1)'
  - uid: 'excel!Excel.Application#calculate:member(1)'
    summary: |-
      <span data-ttu-id="fdfe2-103">重新计算 Excel 中当前打开的所有工作簿。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-103">Recalculate all currently opened workbooks in Excel.</span></span>

      <span data-ttu-id="fdfe2-104">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(calculationType)
    fullName: calculate(calculationType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationType: Excel.CalculationType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: calculationType
          description: <span data-ttu-id="fdfe2-105">指定要使用的计算类型。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-105">Specifies the calculation type to use.</span></span> <span data-ttu-id="fdfe2-106">有关详细信息，请参阅 CalculationType。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-106">See Excel.CalculationType for details.</span></span>
          type:
            - 'excel!Excel.CalculationType:enum'
  - uid: 'excel!Excel.Application#calculate:member(2)'
    summary: |-
      <span data-ttu-id="fdfe2-107">重新计算 Excel 中当前打开的所有工作簿。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-107">Recalculate all currently opened workbooks in Excel.</span></span>

      <span data-ttu-id="fdfe2-108">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(calculationTypeString)
    fullName: calculate(calculationTypeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fdfe2-109">示例</span><span class="sxs-lookup"><span data-stu-id="fdfe2-109">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              ctx.workbook.application.calculate('Full');
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: calculationTypeString
          description: <span data-ttu-id="fdfe2-110">指定要使用的计算类型。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-110">Specifies the calculation type to use.</span></span> <span data-ttu-id="fdfe2-111">有关详细信息，请参阅 CalculationType。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-111">See Excel.CalculationType for details.</span></span>
          type:
            - '"Recalculate" | "Full" | "FullRebuild"'
  - uid: 'excel!Excel.Application#calculationEngineVersion:member'
    summary: |-
      <span data-ttu-id="fdfe2-112">返回用于上次完整重新计算的 Excel 计算引擎版本。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-112">Returns the Excel calculation engine version used for the last full recalculation.</span></span> <span data-ttu-id="fdfe2-113">只读。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-113">Read-only.</span></span>

      <span data-ttu-id="fdfe2-114">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationEngineVersion
    fullName: calculationEngineVersion
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Application#calculationMode:member'
    summary: |-
      <span data-ttu-id="fdfe2-115">返回工作簿中使用的计算模式，如 CalculationMode 中的常量所定义。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-115">Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode.</span></span> <span data-ttu-id="fdfe2-116">可能的值包括：`Automatic`</span><span class="sxs-lookup"><span data-stu-id="fdfe2-116">Possible values are: `Automatic`</span></span><!-- --><span data-ttu-id="fdfe2-117">，Excel 控制重新计算的位置;`AutomaticExceptTables`</span><span class="sxs-lookup"><span data-stu-id="fdfe2-117">, where Excel controls recalculation; `AutomaticExceptTables`</span></span><!-- --><span data-ttu-id="fdfe2-118">，Excel 在其中控制重新计算，但忽略表中的更改。`Manual`</span><span class="sxs-lookup"><span data-stu-id="fdfe2-118">, where Excel controls recalculation but ignores changes in tables; `Manual`</span></span><!-- --><span data-ttu-id="fdfe2-119">，在用户请求计算时完成计算。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-119">, where calculation is done when the user requests it.</span></span>

      <span data-ttu-id="fdfe2-120">\[[API 集： ExcelApi 1.1 for get，1.8 （用于设置）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-120">\[ [API set: ExcelApi 1.1 for get, 1.8 for set](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationMode
    fullName: calculationMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
      return:
        type:
          - 'excel!Excel.Application#calculationMode~0:complex'
  - uid: 'excel!Excel.Application#calculationState:member'
    summary: |-
      <span data-ttu-id="fdfe2-121">返回应用程序的计算状态。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-121">Returns the calculation state of the application.</span></span> <span data-ttu-id="fdfe2-122">有关详细信息，请参阅 Excel.CalculationState。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-122">See Excel.CalculationState for details.</span></span> <span data-ttu-id="fdfe2-123">只读。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-123">Read-only.</span></span>

      <span data-ttu-id="fdfe2-124">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-124">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculationState
    fullName: calculationState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly calculationState: Excel.CalculationState | "Done" | "Calculating" | "Pending";'
      return:
        type:
          - 'excel!Excel.Application#calculationState~0:complex'
  - uid: 'excel!Excel.Application#context:member'
    summary: <span data-ttu-id="fdfe2-125">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-125">The request context associated with the object.</span></span> <span data-ttu-id="fdfe2-126">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-126">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Application#iterativeCalculation:member'
    summary: |-
      <span data-ttu-id="fdfe2-127">返回“迭代计算”设置。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-127">Returns the Iterative Calculation settings.</span></span> <span data-ttu-id="fdfe2-128">在 Windows 和 Mac 上的 Excel 中，这些设置将应用于 Excel 应用程序。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-128">In Excel on Windows and Mac, the settings will apply to the Excel Application.</span></span> <span data-ttu-id="fdfe2-129">在 Excel 中的 web 和其他平台上，这些设置将应用于活动工作簿。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-129">In Excel on the web and other platforms, the settings will apply to the active workbook.</span></span>

      <span data-ttu-id="fdfe2-130">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-130">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iterativeCalculation
    fullName: iterativeCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iterativeCalculation: Excel.IterativeCalculation;'
      return:
        type:
          - 'excel!Excel.IterativeCalculation:class'
  - uid: 'excel!Excel.Application#load:member(1)'
    summary: <span data-ttu-id="fdfe2-131">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="fdfe2-132">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-132">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
      return:
        type:
          - 'excel!Excel.Application:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="fdfe2-133">提供要加载的对象的属性的选项。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-133">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.ApplicationLoadOptions:interface'
  - uid: 'excel!Excel.Application#load:member(2)'
    summary: <span data-ttu-id="fdfe2-134">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="fdfe2-135">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-135">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Application;'
      return:
        type:
          - 'excel!Excel.Application:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fdfe2-136">示例</span><span class="sxs-lookup"><span data-stu-id="fdfe2-136">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var application = ctx.workbook.application;
              application.load('calculationMode');
              return ctx.sync().then(function() {
                  console.log(application.calculationMode);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="fdfe2-137">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Application#load:member(3)'
    summary: <span data-ttu-id="fdfe2-138">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-138">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="fdfe2-139">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-139">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Application;
      return:
        type:
          - 'excel!Excel.Application:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="fdfe2-140">`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-140">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Application#set:member(1)'
    summary: '<span data-ttu-id="fdfe2-141">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-141">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="fdfe2-142">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-142">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="fdfe2-143">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="fdfe2-143">This method has the following additional signature:</span></span>

      `set(properties: Excel.Application): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="fdfe2-144">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-144">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.ApplicationUpdateData:interface'
        - id: options
          description: <span data-ttu-id="fdfe2-145">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-145">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Application#set:member(2)'
    summary: '<span data-ttu-id="fdfe2-146">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-146">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Application): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Application:class'
  - uid: 'excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)'
    summary: |-
      <span data-ttu-id="fdfe2-p112">在下一次调用“context.sync()”前暂停计算。设置后，开发者负责重新计算工作簿，以确保传播所有依赖项。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-p112">Suspends calculation until the next "context.sync()" is called. Once set, it is the developer's responsibility to re-calc the workbook, to ensure that any dependencies are propagated.</span></span>

      <span data-ttu-id="fdfe2-149">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-149">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: suspendApiCalculationUntilNextSync()
    fullName: suspendApiCalculationUntilNextSync()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'suspendApiCalculationUntilNextSync(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)'
    summary: |-
      <span data-ttu-id="fdfe2-150">在下一次调用“context.sync()”前暂停屏幕更新。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-150">Suspends sceen updating until the next "context.sync()" is called.</span></span>

      <span data-ttu-id="fdfe2-151">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fdfe2-151">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: suspendScreenUpdatingUntilNextSync()
    fullName: suspendScreenUpdatingUntilNextSync()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'suspendScreenUpdatingUntilNextSync(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fdfe2-152">示例</span><span class="sxs-lookup"><span data-stu-id="fdfe2-152">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const rowCount = 500;
              const columnCount = 20;

              const startTime = Date.now();
              console.log("Starting...");

              if (pauseScreenPainting) {
                  context.application.suspendScreenUpdatingUntilNextSync();
              }

              for (let i = 0; i < rowCount; i++) {
                  for (let j = 0; j < columnCount; j++) {
                      let cell = sheet.getCell(i, j);
                      cell.values = [[i * j * Math.random()]];
                      if (untrack) {
                          cell.untrack();
                      }
                  }
              }

              await context.sync();

              console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);
          });
          ```
  - uid: 'excel!Excel.Application#toJSON:member(1)'
    summary: '<span data-ttu-id="fdfe2-153">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="fdfe2-153">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="fdfe2-154">.</span><span class="sxs-lookup"><span data-stu-id="fdfe2-154"></span></span> <span data-ttu-id="fdfe2-155">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="fdfe2-155"></span></span><!-- --><span data-ttu-id="fdfe2-156">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel 应用程序对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.ApplicationData`</span><span class="sxs-lookup"><span data-stu-id="fdfe2-156">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ApplicationData`</span></span><!-- --><span data-ttu-id="fdfe2-157">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="fdfe2-157">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ApplicationData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ApplicationData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.CalculationType:enum'
    name: Excel.CalculationType
  - uid: 'excel!Excel.Application#calculationMode~0:complex'
    name: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
    fullName: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual"
    spec.typeScript:
      - uid: 'excel!Excel.CalculationMode:enum'
        name: Excel.CalculationMode
        fullName: Excel.CalculationMode
      - name: ' | "Automatic" | "AutomaticExceptTables" | "Manual"'
        fullName: ' | "Automatic" | "AutomaticExceptTables" | "Manual"'
  - uid: 'excel!Excel.Application#calculationState~0:complex'
    name: Excel.CalculationState | "Done" | "Calculating" | "Pending"
    fullName: Excel.CalculationState | "Done" | "Calculating" | "Pending"
    spec.typeScript:
      - uid: 'excel!Excel.CalculationState:enum'
        name: Excel.CalculationState
        fullName: Excel.CalculationState
      - name: ' | "Done" | "Calculating" | "Pending"'
        fullName: ' | "Done" | "Calculating" | "Pending"'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.IterativeCalculation:class'
    name: Excel.IterativeCalculation
  - uid: 'excel!Excel.Application:class'
    name: Excel.Application
  - uid: 'excel!Excel.Interfaces.ApplicationLoadOptions:interface'
    name: Excel.Interfaces.ApplicationLoadOptions
  - uid: 'excel!Excel.Interfaces.ApplicationUpdateData:interface'
    name: Interfaces.ApplicationUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.ApplicationData:interface'
    name: Excel.Interfaces.ApplicationData