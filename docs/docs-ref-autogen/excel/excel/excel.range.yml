### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      <span data-ttu-id="e80c9-101">Range 表示一个或多个连续单元格的集合，例如单元格、行、列、单元格块等。若要了解有关如何在整个 API 中使用范围的详细信息，请参阅[使用 Excel JAVASCRIPT Api 处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)并使用[excel javascript api （高级）处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="e80c9-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="e80c9-102">.</span><span class="sxs-lookup"><span data-stu-id="e80c9-102"></span></span>

      <span data-ttu-id="e80c9-103">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#autoFill:member(2)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#copyFrom:member(2)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getCellProperties:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnProperties:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowProperties:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(2)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.Range#getSpillingToRange:member(1)'
      - 'excel!Excel.Range#getSpillingToRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpillParent:member(1)'
      - 'excel!Excel.Range#getSpillParentOrNullObject:member(1)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#group:member(1)'
      - 'excel!Excel.Range#group:member(2)'
      - 'excel!Excel.Range#hasSpill:member'
      - 'excel!Excel.Range#height:member'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hideGroupDetails:member(1)'
      - 'excel!Excel.Range#hideGroupDetails:member(2)'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#left:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#savedAsArray:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#setCellProperties:member(1)'
      - 'excel!Excel.Range#setColumnProperties:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#setRowProperties:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(2)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#top:member'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#ungroup:member(1)'
      - 'excel!Excel.Range#ungroup:member(2)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#width:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      <span data-ttu-id="e80c9-104">表示 A1 样式的区域引用。</span><span class="sxs-lookup"><span data-stu-id="e80c9-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="e80c9-105">Address 值将包含工作表引用（例如，"Sheet1！A1： B4 "）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="e80c9-106">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-106">Read-only.</span></span>

      <span data-ttu-id="e80c9-107">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      <span data-ttu-id="e80c9-108">以用户语言表示对指定区域的区域引用。</span><span class="sxs-lookup"><span data-stu-id="e80c9-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="e80c9-109">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-109">Read-only.</span></span>

      <span data-ttu-id="e80c9-110">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-111">使用指定的自动填充逻辑将范围从当前范围填充到目标区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-111">Fills range from the current range to the destination range using the specified AutoFill logic.</span></span> <span data-ttu-id="e80c9-112">目标区域可以是 null，也可以是水平或垂直扩展源。</span><span class="sxs-lookup"><span data-stu-id="e80c9-112">The destination range can be null, or can extend the source either horizontally or vertically.</span></span> <span data-ttu-id="e80c9-113">不支持不连续的区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-113">Discontiguous ranges are not supported.</span></span> <span data-ttu-id="e80c9-114">有关详细信息，请参阅[使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span><span class="sxs-lookup"><span data-stu-id="e80c9-114">For more information, read [Use AutoFill and Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span></span><!-- --><span data-ttu-id="e80c9-115">.</span><span class="sxs-lookup"><span data-stu-id="e80c9-115"></span></span>

      <span data-ttu-id="e80c9-116">\[[API 集： ExcelApi 1.9、EXCELAPI BETA （仅限预览） null `destinationRange` ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-116">\[ [API set: ExcelApi 1.9, ExcelApi BETA (PREVIEW ONLY) for null `destinationRange`<!-- -->](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-117">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-117">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          });
          ```
      parameters:
        - id: destinationRange
          description: '<span data-ttu-id="e80c9-118">要自动填充的目标区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-118">The destination range to autofill.</span></span> <span data-ttu-id="e80c9-119">如果目标区域为 null，则根据周围单元格（双击 UI 的区域填充句柄时的行为）填充数据。</span><span class="sxs-lookup"><span data-stu-id="e80c9-119">If the destination range is null, data is filled out based on the surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).</span></span>'
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: '<span data-ttu-id="e80c9-120">自动填充的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-120">The type of autofill.</span></span> <span data-ttu-id="e80c9-121">根据当前区域的内容，指定目标区域的填充方式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-121">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="e80c9-122">默认值为 "FillDefault"。</span><span class="sxs-lookup"><span data-stu-id="e80c9-122">Default is "FillDefault".</span></span>'
          type:
            - 'excel!Excel.AutoFillType:enum'
  - uid: 'excel!Excel.Range#autoFill:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-123">使用指定的自动填充逻辑将范围从当前范围填充到目标区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-123">Fills range from the current range to the destination range using the specified AutoFill logic.</span></span> <span data-ttu-id="e80c9-124">目标区域可以是 null，也可以是水平或垂直扩展源。</span><span class="sxs-lookup"><span data-stu-id="e80c9-124">The destination range can be null, or can extend the source either horizontally or vertically.</span></span> <span data-ttu-id="e80c9-125">不支持不连续的区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-125">Discontiguous ranges are not supported.</span></span> <span data-ttu-id="e80c9-126">有关详细信息，请参阅[使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span><span class="sxs-lookup"><span data-stu-id="e80c9-126">For more information, read [Use AutoFill and Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span></span><!-- --><span data-ttu-id="e80c9-127">.</span><span class="sxs-lookup"><span data-stu-id="e80c9-127"></span></span>

      <span data-ttu-id="e80c9-128">\[[API 集： ExcelApi 1.9、EXCELAPI BETA （仅限预览） null `destinationRange` ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-128">\[ [API set: ExcelApi 1.9, ExcelApi BETA (PREVIEW ONLY) for null `destinationRange`<!-- -->](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: '<span data-ttu-id="e80c9-129">要自动填充的目标区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-129">The destination range to autofill.</span></span> <span data-ttu-id="e80c9-130">如果目标区域为 null，则根据周围单元格（双击 UI 的区域填充句柄时的行为）填充数据。</span><span class="sxs-lookup"><span data-stu-id="e80c9-130">If the destination range is null, data is filled out based on the surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).</span></span>'
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeString
          description: '<span data-ttu-id="e80c9-131">自动填充的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-131">The type of autofill.</span></span> <span data-ttu-id="e80c9-132">根据当前区域的内容，指定目标区域的填充方式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-132">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="e80c9-133">默认值为 "FillDefault"。</span><span class="sxs-lookup"><span data-stu-id="e80c9-133">Default is "FillDefault".</span></span>'
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-134">计算工作表上的单元格区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-134">Calculates a range of cells on a worksheet.</span></span>

      <span data-ttu-id="e80c9-135">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-135">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      <span data-ttu-id="e80c9-136">范围中的单元格数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-136">Number of cells in the range.</span></span> <span data-ttu-id="e80c9-137">如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。</span><span class="sxs-lookup"><span data-stu-id="e80c9-137">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="e80c9-138">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-138">Read-only.</span></span>

      <span data-ttu-id="e80c9-139">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-139">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-140">清除区域值、格式、填充、边框等。</span><span class="sxs-lookup"><span data-stu-id="e80c9-140">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="e80c9-141">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-141">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-142">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-142">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="e80c9-143">可选。</span><span class="sxs-lookup"><span data-stu-id="e80c9-143">Optional.</span></span> <span data-ttu-id="e80c9-144">确定清除操作的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-144">Determines the type of clear action.</span></span> <span data-ttu-id="e80c9-145">有关详细信息，请参阅 ClearApplyTo。</span><span class="sxs-lookup"><span data-stu-id="e80c9-145">See Excel.ClearApplyTo for details.</span></span>
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-146">清除区域值、格式、填充、边框等。</span><span class="sxs-lookup"><span data-stu-id="e80c9-146">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="e80c9-147">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-147">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="e80c9-148">可选。</span><span class="sxs-lookup"><span data-stu-id="e80c9-148">Optional.</span></span> <span data-ttu-id="e80c9-149">确定清除操作的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-149">Determines the type of clear action.</span></span> <span data-ttu-id="e80c9-150">有关详细信息，请参阅 ClearApplyTo。</span><span class="sxs-lookup"><span data-stu-id="e80c9-150">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      <span data-ttu-id="e80c9-151">表示区域中的列总数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-151">Represents the total number of columns in the range.</span></span> <span data-ttu-id="e80c9-152">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-152">Read-only.</span></span>

      <span data-ttu-id="e80c9-153">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-153">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: |-
      <span data-ttu-id="e80c9-154">表示当前 range 的所有列均已隐藏。</span><span class="sxs-lookup"><span data-stu-id="e80c9-154">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="e80c9-155">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-155">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      <span data-ttu-id="e80c9-156">表示区域中第一个单元格的列编号。</span><span class="sxs-lookup"><span data-stu-id="e80c9-156">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="e80c9-157">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-157">Zero-indexed.</span></span> <span data-ttu-id="e80c9-158">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-158">Read-only.</span></span>

      <span data-ttu-id="e80c9-159">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-159">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: |-
      <span data-ttu-id="e80c9-160">与该范围相交的 ConditionalFormats 的集合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-160">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id="e80c9-161">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-161">Read-only.</span></span>

      <span data-ttu-id="e80c9-162">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-162">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.Range#context:member'
    summary: <span data-ttu-id="e80c9-163">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="e80c9-163">The request context associated with the object.</span></span> <span data-ttu-id="e80c9-164">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="e80c9-164">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-165">将具有数据类型的区域单元格转换为文本。</span><span class="sxs-lookup"><span data-stu-id="e80c9-165">Converts the range cells with datatypes into text.</span></span>

      <span data-ttu-id="e80c9-166">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-166">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-167">将区域单元格转换为工作表中的链接数据类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-167">Converts the range cells into linked datatype in the worksheet.</span></span>

      <span data-ttu-id="e80c9-168">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-168">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: <span data-ttu-id="e80c9-169">将用于查询数据的服务 ID。</span><span class="sxs-lookup"><span data-stu-id="e80c9-169">The Service ID which will be used to query the data.</span></span>
          type:
            - number
        - id: languageCulture
          description: <span data-ttu-id="e80c9-170">要为其查询服务的语言区域性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-170">Language Culture to query the service for.</span></span>
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-171">将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-171">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="e80c9-172">目标区域的大小可以与源区域或 RangeAreas 的大小不同。</span><span class="sxs-lookup"><span data-stu-id="e80c9-172">The destination range can be a different size than the source range or RangeAreas.</span></span> <span data-ttu-id="e80c9-173">如果目标小于源，则将自动扩展目标。</span><span class="sxs-lookup"><span data-stu-id="e80c9-173">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="e80c9-174">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-174">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-175">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-175">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="e80c9-176">要从其复制的源区域或 RangeAreas。</span><span class="sxs-lookup"><span data-stu-id="e80c9-176">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="e80c9-177">当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。</span><span class="sxs-lookup"><span data-stu-id="e80c9-177">When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: <span data-ttu-id="e80c9-178">要复制的单元格数据的类型或格式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-178">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="e80c9-179">默认值为 "All"。</span><span class="sxs-lookup"><span data-stu-id="e80c9-179">Default is "All".</span></span>
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: <span data-ttu-id="e80c9-180">如果为 True，则在源区域中跳过空白单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-180">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="e80c9-181">默认为 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-181">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="e80c9-182">如此如果要转置目标区域中的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-182">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="e80c9-183">默认为 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-183">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#copyFrom:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-184">将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-184">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="e80c9-185">目标区域的大小可以与源区域或 RangeAreas 的大小不同。</span><span class="sxs-lookup"><span data-stu-id="e80c9-185">The destination range can be a different size than the source range or RangeAreas.</span></span> <span data-ttu-id="e80c9-186">如果目标小于源，则将自动扩展目标。</span><span class="sxs-lookup"><span data-stu-id="e80c9-186">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="e80c9-187">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-187">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="e80c9-188">要从其复制的源区域或 RangeAreas。</span><span class="sxs-lookup"><span data-stu-id="e80c9-188">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="e80c9-189">当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。</span><span class="sxs-lookup"><span data-stu-id="e80c9-189">When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: copyTypeString
          description: <span data-ttu-id="e80c9-190">要复制的单元格数据的类型或格式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-190">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="e80c9-191">默认值为 "All"。</span><span class="sxs-lookup"><span data-stu-id="e80c9-191">Default is "All".</span></span>
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: <span data-ttu-id="e80c9-192">如果为 True，则在源区域中跳过空白单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-192">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="e80c9-193">默认为 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-193">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="e80c9-194">如此如果要转置目标区域中的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-194">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="e80c9-195">默认为 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-195">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: |-
      <span data-ttu-id="e80c9-196">返回数据有效性对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-196">Returns a data validation object.</span></span>

      <span data-ttu-id="e80c9-197">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-197">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-198">删除与区域相关的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-198">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="e80c9-199">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-199">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-200">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-200">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="e80c9-201">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-201">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e80c9-202">有关详细信息，请参阅 DeleteShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="e80c9-202">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-203">删除与区域相关的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-203">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="e80c9-204">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-204">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="e80c9-205">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-205">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e80c9-206">有关详细信息，请参阅 DeleteShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="e80c9-206">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-207">根据指定的条件查找给定的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-207">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="e80c9-208">如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。</span><span class="sxs-lookup"><span data-stu-id="e80c9-208">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>

      <span data-ttu-id="e80c9-209">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-209">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="e80c9-210">表示第一个单元格的 Range 对象，其中包含与搜索文本和条件相匹配的值。</span><span class="sxs-lookup"><span data-stu-id="e80c9-210">The Range object representing the first cell that contains a value matching the search text and criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e80c9-211">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-211">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="e80c9-212">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-212">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="e80c9-213">其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="e80c9-213">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-214">根据指定的条件查找给定的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-214">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="e80c9-215">如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。</span><span class="sxs-lookup"><span data-stu-id="e80c9-215">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id="e80c9-216">如果没有匹配项，则此函数将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-216">If there are no matches, this function will return a null object.</span></span>

      <span data-ttu-id="e80c9-217">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-217">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="e80c9-218">与搜索条件匹配的范围。</span><span class="sxs-lookup"><span data-stu-id="e80c9-218">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e80c9-219">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-219">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="e80c9-220">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-220">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="e80c9-221">其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="e80c9-221">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-222">对当前区域进行快速填充。快速填充在感知到模式时可自动填充数据，因此该区域必须是单列区域且周围有数据以便查找模式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-222">Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.</span></span>

      <span data-ttu-id="e80c9-223">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-223">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      <span data-ttu-id="e80c9-224">返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-224">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="e80c9-225">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-225">Read-only.</span></span>

      <span data-ttu-id="e80c9-226">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-226">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      <span data-ttu-id="e80c9-227">表示采用 A1 表示法的公式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-227">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="e80c9-228">将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-228">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="e80c9-229">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-229">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e80c9-230">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-230">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      <span data-ttu-id="e80c9-231">表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。</span><span class="sxs-lookup"><span data-stu-id="e80c9-231">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="e80c9-232">例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。</span><span class="sxs-lookup"><span data-stu-id="e80c9-232">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="e80c9-233">将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-233">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="e80c9-234">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-234">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e80c9-235">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-235">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: |-
      <span data-ttu-id="e80c9-236">表示采用 R1C1 表示法的公式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-236">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="e80c9-237">将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-237">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="e80c9-238">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-238">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e80c9-239">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-239">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-240">获取一个 Range 对象，该对象的左上单元格与当前 Range 对象相同，但具有指定的行数和列数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-240">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>

      <span data-ttu-id="e80c9-241">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-241">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="e80c9-242">新范围大小的行数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-242">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="e80c9-243">新范围大小的列数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-243">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-244">获取包含指定区域的最小 range 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-244">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="e80c9-245">例如，“B2:C5”和“D10:E15”的 GetBoundingRect 为“B2:E15”。</span><span class="sxs-lookup"><span data-stu-id="e80c9-245">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="e80c9-246">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-246">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-247">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-247">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="e80c9-248">range 对象或地址或区域名称。</span><span class="sxs-lookup"><span data-stu-id="e80c9-248">The range object or address or range name.</span></span>
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-249">根据行和列编号获取包含单个单元格的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-249">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="e80c9-250">单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。</span><span class="sxs-lookup"><span data-stu-id="e80c9-250">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="e80c9-251">返回的单元格位于相对于区域左上角的单元格的位置。</span><span class="sxs-lookup"><span data-stu-id="e80c9-251">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="e80c9-252">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-252">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-253">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-253">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="e80c9-254">要检索的单元格的行号。</span><span class="sxs-lookup"><span data-stu-id="e80c9-254">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="e80c9-255">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-255">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="e80c9-256">要检索的单元格的列号。</span><span class="sxs-lookup"><span data-stu-id="e80c9-256">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="e80c9-257">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-257">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getCellProperties:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-258">返回一个 2D 数组，其中封装了每个单元格的字体、填充、边框、对齐方式和其他属性数据。</span><span class="sxs-lookup"><span data-stu-id="e80c9-258">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>

      <span data-ttu-id="e80c9-259">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-259">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel!Excel.Range#getCellProperties~0:complex'
        description: |-
          <span data-ttu-id="e80c9-260">一个二维数组，其中每一项代表对应单元格的请求属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-260">A 2D array where each item represents the requested properties of the corresponding cell.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e80c9-261">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-261">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: <span data-ttu-id="e80c9-262">一个代表要加载的单元格属性的对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-262">An object that represents which cell properties to load.</span></span>
          type:
            - 'excel!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-263">获取范围中包含的列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-263">Gets a column contained in the range.</span></span>

      <span data-ttu-id="e80c9-264">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-264">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-265">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-265">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="e80c9-266">要检索的区域的列号。</span><span class="sxs-lookup"><span data-stu-id="e80c9-266">Column number of the range to be retrieved.</span></span> <span data-ttu-id="e80c9-267">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-267">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnProperties:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-268">返回一个一维数组，其中封装了每个列的字体、填充、边框、对齐方式和其他属性数据。</span><span class="sxs-lookup"><span data-stu-id="e80c9-268">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="e80c9-269">对于给定列中每个单元格不一致的属性，将返回 null。</span><span class="sxs-lookup"><span data-stu-id="e80c9-269">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>

      <span data-ttu-id="e80c9-270">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-270">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getColumnProperties~0:complex'
        description: <span data-ttu-id="e80c9-271">一个数组，其中每个项代表相应列的请求的属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-271">An array where each item represents the requested properties of the corresponding column.</span></span>
      parameters:
        - id: columnPropertiesLoadOptions
          description: <span data-ttu-id="e80c9-272">一个代表要加载的列属性的对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-272">An object that represents which column properties to load.</span></span>
          type:
            - 'excel!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-273">获取当前范围对象右侧的一定数量的列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-273">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="e80c9-274">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e80c9-p140">可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p140">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-280">获取当前范围对象左侧的一定数量的列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-280">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="e80c9-281">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-281">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e80c9-p141">可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p141">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-287">获取一个对象，该对象代表区域的整列（例如，如果当前区域表示单元格 "B4： E11"，则它`getEntireColumn`是表示列 "B:E" 的区域）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-287">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="e80c9-288">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-288">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-289">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-289">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-290">获取一个对象，该对象表示区域的整行（例如，如果当前区域表示单元格 "B4： E11"，则它`GetEntireRow`是表示行 "4:11" 的区域）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-290">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="e80c9-291">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-291">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-292">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-292">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-293">将区域呈现为 base64 编码的 png 图像。</span><span class="sxs-lookup"><span data-stu-id="e80c9-293">Renders the range as a base64-encoded png image.</span></span>

      <span data-ttu-id="e80c9-294">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-294">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-295">获取表示指定区域的矩形交集的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-295">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="e80c9-296">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-296">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-297">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-297">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="e80c9-298">将用于确定区域交集的 range 对象或区域地址。</span><span class="sxs-lookup"><span data-stu-id="e80c9-298">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-299">获取表示指定区域的矩形交集的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-299">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="e80c9-300">如果找不到任何交集，则此方法返回空对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-300">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="e80c9-301">\[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-301">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-302">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-302">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="e80c9-303">将用于确定区域交集的 range 对象或区域地址。</span><span class="sxs-lookup"><span data-stu-id="e80c9-303">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-304">获取区域内的最后一个单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-304">Gets the last cell within the range.</span></span> <span data-ttu-id="e80c9-305">例如，“B2:D5”的最后一个单元格是“D5”。</span><span class="sxs-lookup"><span data-stu-id="e80c9-305">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="e80c9-306">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-306">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-307">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-307">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-308">获取区域内的最后一列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-308">Gets the last column within the range.</span></span> <span data-ttu-id="e80c9-309">例如，“B2:D5”的最后一列是“D2:D5”。</span><span class="sxs-lookup"><span data-stu-id="e80c9-309">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="e80c9-310">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-310">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-311">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-311">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-312">获取区域内的最后一行。</span><span class="sxs-lookup"><span data-stu-id="e80c9-312">Gets the last row within the range.</span></span> <span data-ttu-id="e80c9-313">例如，“B2:D5”的最后一行是“B5:D5”。</span><span class="sxs-lookup"><span data-stu-id="e80c9-313">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="e80c9-314">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-314">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-315">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-315">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-p146">获取表示与指定区域偏移的区域的对象。返回的区域的尺寸将与此区域一致。如果强制在工作表网格的边界之外生成区域，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p146">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="e80c9-319">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-319">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-320">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-320">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="e80c9-p147">区域偏移的行数（正数、负数或 0）。正数表示向下偏移，负数表示向上偏移。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p147">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="e80c9-p148">区域偏移的列数（正数、负数或 0）。正数表示向右偏移，负数表示向左偏移。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p148">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-325">获取与当前范围对象类似的范围对象，但其右下角可通过一定数量的行和列进行展开（或合拢）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-325">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="e80c9-326">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-326">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="e80c9-p149">相对于当前范围，展开右下角的行数。使用正数可展开范围，使用负数可合拢范围。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p149">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="e80c9-329">相对于当前范围，从右下角扩展的列数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-329">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="e80c9-330">使用正数可展开范围，使用负数可合拢范围。</span><span class="sxs-lookup"><span data-stu-id="e80c9-330">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-331">获取范围中包含的行。</span><span class="sxs-lookup"><span data-stu-id="e80c9-331">Gets a row contained in the range.</span></span>

      <span data-ttu-id="e80c9-332">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-332">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-333">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-333">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="e80c9-334">要检索的区域的行号。</span><span class="sxs-lookup"><span data-stu-id="e80c9-334">Row number of the range to be retrieved.</span></span> <span data-ttu-id="e80c9-335">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-335">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getRowProperties:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-336">返回一个一维数组，其中封装了每个行的字体、填充、边框、对齐方式和其他属性数据。</span><span class="sxs-lookup"><span data-stu-id="e80c9-336">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="e80c9-337">对于给定行中每个单元格不一致的属性，将返回 null。</span><span class="sxs-lookup"><span data-stu-id="e80c9-337">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>

      <span data-ttu-id="e80c9-338">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-338">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getRowProperties~0:complex'
        description: <span data-ttu-id="e80c9-339">一个数组，其中每个项代表相应行的请求属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-339">An array where each item represents the requested properties of the corresponding row.</span></span>
      parameters:
        - id: rowPropertiesLoadOptions
          description: <span data-ttu-id="e80c9-340">一个代表要加载的行属性的对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-340">An object that represents which row properties to load.</span></span>
          type:
            - 'excel!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-341">获取当前范围对象上方的一定数量的行。</span><span class="sxs-lookup"><span data-stu-id="e80c9-341">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="e80c9-342">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-342">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e80c9-p153">可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p153">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-348">获取当前范围对象下方的一定数量的行。</span><span class="sxs-lookup"><span data-stu-id="e80c9-348">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="e80c9-349">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-349">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="e80c9-p154">可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p154">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-355">获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-355">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e80c9-356">如果找不到特殊单元格，则将引发 ItemNotFound 错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-356">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="e80c9-357">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-357">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-358">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-358">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: <span data-ttu-id="e80c9-359">要包含的单元格的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-359">The type of cells to include.</span></span>
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="e80c9-360">如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-360">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e80c9-361">可以将这些值组合在一起，以返回多个类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-361">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e80c9-362">默认情况下，将选择所有常量或公式，无论类型如何。</span><span class="sxs-lookup"><span data-stu-id="e80c9-362">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCells:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-363">获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-363">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e80c9-364">如果找不到特殊单元格，则将引发 ItemNotFound 错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-364">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="e80c9-365">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-365">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="e80c9-366">要包含的单元格的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-366">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="e80c9-367">如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-367">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e80c9-368">可以将这些值组合在一起，以返回多个类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-368">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e80c9-369">默认情况下，将选择所有常量或公式，无论类型如何。</span><span class="sxs-lookup"><span data-stu-id="e80c9-369">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-370">获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-370">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e80c9-371">如果找不到特殊单元格，则返回 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-371">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="e80c9-372">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-372">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: <span data-ttu-id="e80c9-373">要包含的单元格的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-373">The type of cells to include.</span></span>
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="e80c9-374">如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-374">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e80c9-375">可以将这些值组合在一起，以返回多个类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-375">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e80c9-376">默认情况下，将选择所有常量或公式，无论类型如何。</span><span class="sxs-lookup"><span data-stu-id="e80c9-376">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-377">获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-377">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="e80c9-378">如果找不到特殊单元格，则返回 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-378">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="e80c9-379">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-379">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="e80c9-380">要包含的单元格的类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-380">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="e80c9-381">如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-381">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="e80c9-382">可以将这些值组合在一起，以返回多个类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-382">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="e80c9-383">默认情况下，将选择所有常量或公式，无论类型如何。</span><span class="sxs-lookup"><span data-stu-id="e80c9-383">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpillingToRange:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-384">获取 Range 对象，它在调用定位单元格时包含溢出区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-384">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="e80c9-385">如果应用于具有多个单元格的区域，则会失败。</span><span class="sxs-lookup"><span data-stu-id="e80c9-385">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="e80c9-386">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-386">Read-only.</span></span>

      <span data-ttu-id="e80c9-387">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-387">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillingToRange()
    fullName: getSpillingToRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSpillingToRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-388">获取 Range 对象，它在调用定位单元格时包含溢出区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-388">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="e80c9-389">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-389">Read-only.</span></span> <span data-ttu-id="e80c9-390">如果区域不是定位单元格或溢出区域，则返回 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-390">If the range is not an anchor cell or spill range can't be found, a null object will be returned.</span></span>

      <span data-ttu-id="e80c9-391">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-391">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillingToRangeOrNullObject()
    fullName: getSpillingToRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSpillParent:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-392">获取 Range 对象，它包含要将某个单元格溢出到的定位单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-392">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="e80c9-393">如果应用于具有多个单元格的区域，则会失败。</span><span class="sxs-lookup"><span data-stu-id="e80c9-393">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="e80c9-394">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-394">Read-only.</span></span>

      <span data-ttu-id="e80c9-395">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-395">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillParent()
    fullName: getSpillParent()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParent(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSpillParentOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-396">获取 Range 对象，它包含要将某个单元格溢出到的定位单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-396">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="e80c9-397">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-397">Read-only.</span></span> <span data-ttu-id="e80c9-398">如果不是溢出单元格或多个单元格给出了一个值，则返回 null 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-398">If it is not a spill cell or more than once cells are give, a null object will be returned.</span></span>

      <span data-ttu-id="e80c9-399">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-399">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillParentOrNullObject()
    fullName: getSpillParentOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParentOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-400">返回一个 Range 对象，该对象表示此区域左上单元格的周围区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-400">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="e80c9-401">周围区域是由相对于该区域的空白行和空白列的任何组合所限定的区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-401">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>

      <span data-ttu-id="e80c9-402">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-402">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-403">获取与区域重叠的限定范围的表格集合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-403">Gets a scoped collection of tables that overlap with the range.</span></span>

      <span data-ttu-id="e80c9-404">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-404">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: '<span data-ttu-id="e80c9-405">如果为 true，则仅返回完全包含在区域边界内的表。</span><span class="sxs-lookup"><span data-stu-id="e80c9-405">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id="e80c9-406">默认值为 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-406">The default value is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-p169">返回指定 Range 对象的所用区域。如果区域内没有使用单元格，此函数将引发 ItemNotFound 错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p169">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="e80c9-409">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-409">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-410">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-410">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="e80c9-411">仅将有值的单元格视为已使用的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-411">Considers only cells with values as used cells.</span></span> <span data-ttu-id="e80c9-412">\[Api 集： ExcelApi 1。2\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-412">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-p171">返回指定 Range 对象的所用区域。如果区域内没有使用单元格，此函数将返回 NULL 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p171">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="e80c9-415">\[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-415">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-416">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-416">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="e80c9-417">仅将有值的单元格视为已使用的单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-417">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-418">表示当前 range 对象的可见行。</span><span class="sxs-lookup"><span data-stu-id="e80c9-418">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="e80c9-419">\[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-419">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:class'
        description: ''
  - uid: 'excel!Excel.Range#group:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-420">对列和行进行分组以进行分级显示。</span><span class="sxs-lookup"><span data-stu-id="e80c9-420">Groups columns and rows for an outline.</span></span>

      <span data-ttu-id="e80c9-421">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-421">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-422">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-422">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          });
          ```
      parameters:
        - id: groupOption
          description: '<span data-ttu-id="e80c9-423">指定如何按行或列对区域进行分组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-423">Specifies how the range can be grouped by rows or columns.</span></span> <span data-ttu-id="e80c9-424">当`InvalidArgument`组选项与范围`isEntireRow`或`isEntireColumn`属性不同时（即， `range.isEntireRow`为 true 且`groupOption`为 "ByColumns"，或者`range.isEntireColumn` `groupOption`为 "ByRows"）时，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-424">An `InvalidArgument` error is thrown when the group option differs from the range''s `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").</span></span>'
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#group:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-425">对列和行进行分组以进行分级显示。</span><span class="sxs-lookup"><span data-stu-id="e80c9-425">Groups columns and rows for an outline.</span></span>

      <span data-ttu-id="e80c9-426">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-426">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: group(groupOptionString)
    fullName: group(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: '<span data-ttu-id="e80c9-427">指定如何按行或列对区域进行分组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-427">Specifies how the range can be grouped by rows or columns.</span></span> <span data-ttu-id="e80c9-428">当`InvalidArgument`组选项与范围`isEntireRow`或`isEntireColumn`属性不同时（即， `range.isEntireRow`为 true 且`groupOption`为 "ByColumns"，或者`range.isEntireColumn` `groupOption`为 "ByRows"）时，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-428">An `InvalidArgument` error is thrown when the group option differs from the range''s `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").</span></span>'
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hasSpill:member'
    summary: |-
      <span data-ttu-id="e80c9-429">表示所有单元格是否都具有溢出边框。</span><span class="sxs-lookup"><span data-stu-id="e80c9-429">Represents if all cells have a spill border.</span></span> <span data-ttu-id="e80c9-430">如果所有单元格都有溢出边框，则返回 true; 如果所有单元格都没有溢出边框，则返回 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-430">Returns true if all cells have a spill border, or false if all cells do not have a spill border.</span></span> <span data-ttu-id="e80c9-431">如果区域中有和没有溢出边框的单元格，则返回 null。</span><span class="sxs-lookup"><span data-stu-id="e80c9-431">Returns null if there are cells both with and without spill borders within the range.</span></span>

      <span data-ttu-id="e80c9-432">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-432">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hasSpill
    fullName: hasSpill
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hasSpill: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#height:member'
    summary: |-
      <span data-ttu-id="e80c9-433">返回从区域的上边缘到区域的下边缘的 100％ 缩放的距离（以磅为单位）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-433">Returns the distance in points, for 100% zoom, from top edge of the range to bottom edge of the range.</span></span> <span data-ttu-id="e80c9-434">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-434">Read-only.</span></span>

      <span data-ttu-id="e80c9-435">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-435">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#hidden:member'
    summary: |-
      <span data-ttu-id="e80c9-436">表示当前区域中的所有单元格是否隐藏。</span><span class="sxs-lookup"><span data-stu-id="e80c9-436">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="e80c9-437">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-437">Read-only.</span></span>

      <span data-ttu-id="e80c9-438">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-438">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-439">隐藏行或列组的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-439">Hide details of the row or column group.</span></span>

      <span data-ttu-id="e80c9-440">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-440">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: <span data-ttu-id="e80c9-441">指定是否隐藏分组行或分组列的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-441">Specifies whether to hide details of grouped rows or grouped columns.</span></span>
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#hideGroupDetails:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-442">隐藏行或列组的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-442">Hide details of the row or column group.</span></span>

      <span data-ttu-id="e80c9-443">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-443">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hideGroupDetails(groupOptionString)
    fullName: hideGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: <span data-ttu-id="e80c9-444">指定是否隐藏分组行或分组列的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-444">Specifies whether to hide details of grouped rows or grouped columns.</span></span>
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: |-
      <span data-ttu-id="e80c9-445">表示当前区域的超链接。</span><span class="sxs-lookup"><span data-stu-id="e80c9-445">Represents the hyperlink for the current range.</span></span>

      <span data-ttu-id="e80c9-446">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-446">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-447">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-447">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-p177">将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p177">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="e80c9-450">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-450">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-451">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-451">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="e80c9-452">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-452">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e80c9-453">有关详细信息，请参阅 InsertShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="e80c9-453">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-p179">将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-p179">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="e80c9-456">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-456">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="e80c9-457">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-457">Specifies which way to shift the cells.</span></span> <span data-ttu-id="e80c9-458">有关详细信息，请参阅 InsertShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="e80c9-458">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: |-
      <span data-ttu-id="e80c9-459">表示当前区域是否为整列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-459">Represents if the current range is an entire column.</span></span> <span data-ttu-id="e80c9-460">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-460">Read-only.</span></span>

      <span data-ttu-id="e80c9-461">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-461">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: |-
      <span data-ttu-id="e80c9-462">表示当前区域是否为整行。</span><span class="sxs-lookup"><span data-stu-id="e80c9-462">Represents if the current range is an entire row.</span></span> <span data-ttu-id="e80c9-463">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-463">Read-only.</span></span>

      <span data-ttu-id="e80c9-464">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-464">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#left:member'
    summary: |-
      <span data-ttu-id="e80c9-465">返回从工作表的左边缘到区域的左边缘的 100％ 缩放的距离（以磅为单位）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-465">Returns the distance in points, for 100% zoom, from left edge of the worksheet to left edge of the range.</span></span> <span data-ttu-id="e80c9-466">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-466">Read-only.</span></span>

      <span data-ttu-id="e80c9-467">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-467">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: |-
      <span data-ttu-id="e80c9-468">表示每个单元格的数据类型状态。</span><span class="sxs-lookup"><span data-stu-id="e80c9-468">Represents the data type state of each cell.</span></span> <span data-ttu-id="e80c9-469">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-469">Read-only.</span></span>

      <span data-ttu-id="e80c9-470">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-470">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: <span data-ttu-id="e80c9-471">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-471">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e80c9-472">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="e80c9-472">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="e80c9-473">提供要加载的对象的属性的选项。</span><span class="sxs-lookup"><span data-stu-id="e80c9-473">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: <span data-ttu-id="e80c9-474">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-474">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e80c9-475">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="e80c9-475">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-476">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-476">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="e80c9-477">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-477">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: <span data-ttu-id="e80c9-478">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-478">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e80c9-479">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="e80c9-479">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="e80c9-480">`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-480">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-481">在工作表中，将 range 单元格合并到一个区域中。</span><span class="sxs-lookup"><span data-stu-id="e80c9-481">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="e80c9-482">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-482">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-483">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-483">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: <span data-ttu-id="e80c9-484">可选。</span><span class="sxs-lookup"><span data-stu-id="e80c9-484">Optional.</span></span> <span data-ttu-id="e80c9-485">如果为 True，则将指定区域中每一行的单元格合并为一个单独的合并单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-485">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id="e80c9-486">默认值是 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-486">The default value is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      <span data-ttu-id="e80c9-487">表示给定范围的 Excel 数字格式代码。</span><span class="sxs-lookup"><span data-stu-id="e80c9-487">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="e80c9-488">将数字格式设置为一个区域时，value 参数可以是单个值（string），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-488">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="e80c9-489">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-489">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e80c9-490">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-490">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: |-
      <span data-ttu-id="e80c9-491">根据用户的语言设置，表示给定范围的 Excel 数字格式代码。</span><span class="sxs-lookup"><span data-stu-id="e80c9-491">Represents Excel's number format code for the given range, based on the language settings of the user.</span></span> <span data-ttu-id="e80c9-492">将数字格式设置为局部区域时，value 参数可以是单个值（字符串），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-492">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="e80c9-493">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-493">If the argument is a single value, it will be applied to all cells in the range.</span></span> <span data-ttu-id="e80c9-494">在获取或设置`numberFormatLocal`属性时，Excel 不会执行任何语言或格式强制。</span><span class="sxs-lookup"><span data-stu-id="e80c9-494">Excel does not perform any language or format coercion when getting or setting the `numberFormatLocal` property.</span></span> <span data-ttu-id="e80c9-495">任何返回的文本将根据系统设置中指定的语言使用本地格式化的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-495">Any returned text uses the locally-formatted strings based on the language specified in the system settings.</span></span>

      <span data-ttu-id="e80c9-496">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-496">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-497">从列指定的区域中删除重复值。</span><span class="sxs-lookup"><span data-stu-id="e80c9-497">Removes duplicate values from the range specified by the columns.</span></span>

      <span data-ttu-id="e80c9-498">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-498">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:class'
        description: |-
          <span data-ttu-id="e80c9-499">生成的对象，其中包含已删除的行数和剩余的唯一行数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-499">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e80c9-500">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-500">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: <span data-ttu-id="e80c9-501">区域中可能包含重复项的列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-501">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="e80c9-502">至少需要指定一个列。</span><span class="sxs-lookup"><span data-stu-id="e80c9-502">At least one column needs to be specified.</span></span> <span data-ttu-id="e80c9-503">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-503">Zero-indexed.</span></span>
          type:
            - 'number[]'
        - id: includesHeader
          description: <span data-ttu-id="e80c9-504">如果输入数据包含标头，则为 True。</span><span class="sxs-lookup"><span data-stu-id="e80c9-504">True if the input data contains header.</span></span> <span data-ttu-id="e80c9-505">默认为 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-505">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-506">根据当前区域内指定的条件查找并替换给定的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-506">Finds and replaces the given string based on the criteria specified within the current range.</span></span>

      <span data-ttu-id="e80c9-507">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-507">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: <span data-ttu-id="e80c9-508">执行的替换的次数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-508">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="e80c9-509">要查找的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-509">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="e80c9-510">要将原始替换为的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-510">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="e80c9-511">其他替换条件。</span><span class="sxs-lookup"><span data-stu-id="e80c9-511">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      <span data-ttu-id="e80c9-512">返回区域中的总行数。</span><span class="sxs-lookup"><span data-stu-id="e80c9-512">Returns the total number of rows in the range.</span></span> <span data-ttu-id="e80c9-513">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-513">Read-only.</span></span>

      <span data-ttu-id="e80c9-514">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-514">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: |-
      <span data-ttu-id="e80c9-515">表示当前 range 的所有行均已隐藏。</span><span class="sxs-lookup"><span data-stu-id="e80c9-515">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="e80c9-516">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-516">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      <span data-ttu-id="e80c9-517">返回区域中第一个单元格的行编号。</span><span class="sxs-lookup"><span data-stu-id="e80c9-517">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="e80c9-518">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="e80c9-518">Zero-indexed.</span></span> <span data-ttu-id="e80c9-519">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-519">Read-only.</span></span>

      <span data-ttu-id="e80c9-520">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-520">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#savedAsArray:member'
    summary: |-
      <span data-ttu-id="e80c9-521">表示是否将所有单元格都保存为数组公式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-521">Represents if ALL the cells would be saved as an array formula.</span></span> <span data-ttu-id="e80c9-522">如果所有单元格都将保存为数组公式，则返回 true; 如果不将所有单元格保存为数组公式，则返回 false。</span><span class="sxs-lookup"><span data-stu-id="e80c9-522">Returns true if ALL cells would be saved as an array formula, or false if ALL cells would NOT be saved as an array formula.</span></span> <span data-ttu-id="e80c9-523">如果某些单元格将另存为数组公式，则返回 null，而某些单元格则不是。</span><span class="sxs-lookup"><span data-stu-id="e80c9-523">Returns null if some cells would be saved as an array formula and some would not be.</span></span>

      <span data-ttu-id="e80c9-524">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-524">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: savedAsArray
    fullName: savedAsArray
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly savedAsArray: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-525">在 Excel UI 中选择指定的区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-525">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="e80c9-526">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-526">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-527">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-527">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: '<span data-ttu-id="e80c9-528">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-528">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="e80c9-529">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-529">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="e80c9-530">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="e80c9-530">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="e80c9-531">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-531">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="e80c9-532">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-532">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: <span data-ttu-id="e80c9-533">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="e80c9-533">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: '<span data-ttu-id="e80c9-534">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-534">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#setCellProperties:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-535">根据单元格属性的 2D 数组更新区域，它封装了字体、填充、边框、对齐方式等内容。</span><span class="sxs-lookup"><span data-stu-id="e80c9-535">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="e80c9-536">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-536">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-537">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-537">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Built-in style names are listed in the `BuiltInStyle` enum.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: <span data-ttu-id="e80c9-538">一个二维数组，表示要在每个单元格中设置的属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-538">A 2D array that represents which properties to set in each cell.</span></span>
          type:
            - 'excel!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel!Excel.Range#setColumnProperties:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-539">根据列属性的一维数组更新区域，它封装了字体、填充、边框、对齐方式等内容。</span><span class="sxs-lookup"><span data-stu-id="e80c9-539">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="e80c9-540">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-540">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: <span data-ttu-id="e80c9-541">一个数组，表示要在每个列中设置的属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-541">An array that represents which properties to set in each column.</span></span>
          type:
            - 'excel!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-542">设置下一次重新计算发生时要重新计算的区域。</span><span class="sxs-lookup"><span data-stu-id="e80c9-542">Set a range to be recalculated when the next recalculation occurs.</span></span>

      <span data-ttu-id="e80c9-543">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-543">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setRowProperties:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-544">根据行属性的一维数组更新区域，它封装了字体、填充、边框、对齐方式等内容。</span><span class="sxs-lookup"><span data-stu-id="e80c9-544">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="e80c9-545">\[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-545">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: <span data-ttu-id="e80c9-546">一个数组，表示要在每行中设置的属性。</span><span class="sxs-lookup"><span data-stu-id="e80c9-546">An array that represents which properties to set in each row.</span></span>
          type:
            - 'excel!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-547">显示活动单元格的卡片（如果该单元格具有富值内容）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-547">Displays the card for an active cell if it has rich value content.</span></span>

      <span data-ttu-id="e80c9-548">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-548">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-549">显示行或列组的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-549">Show details of the row or column group.</span></span>

      <span data-ttu-id="e80c9-550">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-550">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: <span data-ttu-id="e80c9-551">指定是否显示分组行或分组列的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-551">Specifies whether to show details of grouped rows or grouped columns.</span></span>
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#showGroupDetails:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-552">显示行或列组的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-552">Show details of the row or column group.</span></span>

      <span data-ttu-id="e80c9-553">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-553">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: showGroupDetails(groupOptionString)
    fullName: showGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: <span data-ttu-id="e80c9-554">指定是否显示分组行或分组列的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e80c9-554">Specifies whether to show details of grouped rows or grouped columns.</span></span>
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#sort:member'
    summary: |-
      <span data-ttu-id="e80c9-555">表示当前 range 的区域排序。</span><span class="sxs-lookup"><span data-stu-id="e80c9-555">Represents the range sort of the current range.</span></span> <span data-ttu-id="e80c9-556">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-556">Read-only.</span></span>

      <span data-ttu-id="e80c9-557">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-557">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-558">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-558">Examples</span></span>

          ```typescript
          async function sortTopToBottom(criteria: string) {
              await Excel.run(async (context) => {
                  const sheet = context.workbook.worksheets.getActiveWorksheet();
                  const range = sheet.getRange("A1:E5");

                  // Find the column header that provides the sort criteria.
                  const header = range.find(criteria, {});
                  header.load("columnIndex");
                  await context.sync();

                  range.sort.apply(
                      [
                          {
                              key: header.columnIndex,
                              sortOn: Excel.SortOn.value
                          }
                      ],
                      false /*matchCase*/,
                      true /*hasHeaders*/,
                      Excel.SortOrientation.rows
                  );
                  await context.sync();
              });
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: |-
      <span data-ttu-id="e80c9-559">表示当前区域的样式。</span><span class="sxs-lookup"><span data-stu-id="e80c9-559">Represents the style of the current range.</span></span> <span data-ttu-id="e80c9-560">如果单元格的样式不一致，则将返回 null。</span><span class="sxs-lookup"><span data-stu-id="e80c9-560">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="e80c9-561">对于自定义样式，将返回样式名称。</span><span class="sxs-lookup"><span data-stu-id="e80c9-561">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="e80c9-562">对于内置样式，将返回一个表示 BuiltInStyle 枚举中的值的字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-562">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>

      <span data-ttu-id="e80c9-563">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-563">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-564">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-564">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      <span data-ttu-id="e80c9-565">指定区域的文本值。</span><span class="sxs-lookup"><span data-stu-id="e80c9-565">Text values of the specified range.</span></span> <span data-ttu-id="e80c9-566">文本值与单元格宽度无关。</span><span class="sxs-lookup"><span data-stu-id="e80c9-566">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="e80c9-567">Excel \# UI 中发生的符号替换不会影响 API 返回的文本值。</span><span class="sxs-lookup"><span data-stu-id="e80c9-567">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="e80c9-568">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-568">Read-only.</span></span>

      <span data-ttu-id="e80c9-569">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-569">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: '<span data-ttu-id="e80c9-570">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="e80c9-570">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="e80c9-571">.</span><span class="sxs-lookup"><span data-stu-id="e80c9-571"></span></span> <span data-ttu-id="e80c9-572">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="e80c9-572"></span></span><!-- --><span data-ttu-id="e80c9-573">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel Range 对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="e80c9-573">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="e80c9-574">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="e80c9-574">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#top:member'
    summary: |-
      <span data-ttu-id="e80c9-575">返回从工作表的上边缘到区域的上边缘的 100％ 缩放的距离（以磅为单位）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-575">Returns the distance in points, for 100% zoom, from top edge of the worksheet to top edge of the range.</span></span> <span data-ttu-id="e80c9-576">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-576">Read-only.</span></span>

      <span data-ttu-id="e80c9-577">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-577">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: '<span data-ttu-id="e80c9-578">根据文档中的相应更改来跟踪对象，以便进行自动调整。</span><span class="sxs-lookup"><span data-stu-id="e80c9-578">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="e80c9-579">此调用是的简写`context.trackedObjects.add(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="e80c9-579">This call is a shorthand for `context.trackedObjects.add(thisObject)`</span></span><!-- --><span data-ttu-id="e80c9-580">.</span><span class="sxs-lookup"><span data-stu-id="e80c9-580"></span></span> <span data-ttu-id="e80c9-581">如果要在多`.sync`个调用中使用此对象，并在 "运行" 批处理的顺序执行之外使用此对象，并在设置属性或对对象调用方法时获取 "InvalidObjectPath" 错误，则需要向跟踪的对象添加对象首次创建对象时的集合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-581">If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#ungroup:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-582">取消边框的列和行的组合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-582">Ungroups columns and rows for an outline.</span></span>

      <span data-ttu-id="e80c9-583">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-583">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-584">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-584">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          });
          ```
      parameters:
        - id: groupOption
          description: <span data-ttu-id="e80c9-585">指定如何将区域与行或列取消组合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-585">Specifies how the range can be ungrouped by rows or columns.</span></span>
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#ungroup:member(2)'
    summary: |-
      <span data-ttu-id="e80c9-586">取消边框的列和行的组合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-586">Ungroups columns and rows for an outline.</span></span>

      <span data-ttu-id="e80c9-587">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-587">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: ungroup(groupOptionString)
    fullName: ungroup(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: <span data-ttu-id="e80c9-588">指定如何将区域与行或列取消组合。</span><span class="sxs-lookup"><span data-stu-id="e80c9-588">Specifies how the range can be ungrouped by rows or columns.</span></span>
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: |-
      <span data-ttu-id="e80c9-589">将范围单元格取消合并为各个单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-589">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="e80c9-590">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-590">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-591">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-591">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: '<span data-ttu-id="e80c9-592">释放与此对象关联的内存（如果先前已跟踪过）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-592">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="e80c9-593">此调用是的简写`context.trackedObjects.remove(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="e80c9-593">This call is shorthand for `context.trackedObjects.remove(thisObject)`</span></span><!-- --><span data-ttu-id="e80c9-594">.</span><span class="sxs-lookup"><span data-stu-id="e80c9-594"></span></span> <span data-ttu-id="e80c9-595">拥有许多跟踪对象会降低主机应用程序的速度，因此请在使用完毕后释放所添加的任何对象。</span><span class="sxs-lookup"><span data-stu-id="e80c9-595">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="e80c9-596">在内存释放生效之前`context.sync()` ，您需要调用该过程。</span><span class="sxs-lookup"><span data-stu-id="e80c9-596">You will need to call `context.sync()` before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e80c9-597">示例</span><span class="sxs-lookup"><span data-stu-id="e80c9-597">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      <span data-ttu-id="e80c9-598">表示指定区域的原始值。</span><span class="sxs-lookup"><span data-stu-id="e80c9-598">Represents the raw values of the specified range.</span></span> <span data-ttu-id="e80c9-599">返回的数据可能是字符串、数字，也可能是布尔值。</span><span class="sxs-lookup"><span data-stu-id="e80c9-599">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="e80c9-600">包含错误的单元格将返回错误字符串。</span><span class="sxs-lookup"><span data-stu-id="e80c9-600">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="e80c9-601">将值设置为一个范围时，value 参数可以是单个值（string、number 或 boolean），也可以是一个二维数组。</span><span class="sxs-lookup"><span data-stu-id="e80c9-601">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="e80c9-602">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="e80c9-602">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="e80c9-603">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-603">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      <span data-ttu-id="e80c9-604">表示每个单元格的数据类型。</span><span class="sxs-lookup"><span data-stu-id="e80c9-604">Represents the type of data of each cell.</span></span> <span data-ttu-id="e80c9-605">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-605">Read-only.</span></span>

      <span data-ttu-id="e80c9-606">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-606">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#width:member'
    summary: |-
      <span data-ttu-id="e80c9-607">返回从区域的左边缘到区域的右边缘的 100％ 缩放的距离（以磅为单位）。</span><span class="sxs-lookup"><span data-stu-id="e80c9-607">Returns the distance in points, for 100% zoom, from left edge of the range to right edge of the range.</span></span> <span data-ttu-id="e80c9-608">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-608">Read-only.</span></span>

      <span data-ttu-id="e80c9-609">\[[API 集： EXCELAPI BETA （仅限预览）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-609">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      <span data-ttu-id="e80c9-610">包含当前区域的工作表。</span><span class="sxs-lookup"><span data-stu-id="e80c9-610">The worksheet containing the current range.</span></span> <span data-ttu-id="e80c9-611">只读。</span><span class="sxs-lookup"><span data-stu-id="e80c9-611">Read-only.</span></span>

      <span data-ttu-id="e80c9-612">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e80c9-612">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getCellProperties~0:complex'
    name: 'OfficeExtension.ClientResult<CellProperties[][]>'
    fullName: 'OfficeExtension.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getColumnProperties~0:complex'
    name: 'OfficeExtension.ClientResult<ColumnProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getRowProperties~0:complex'
    name: 'OfficeExtension.ClientResult<RowProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel!Excel.GroupOption:enum'
    name: Excel.GroupOption
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet