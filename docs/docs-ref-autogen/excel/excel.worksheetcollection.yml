### YamlMime:UniversalReference
ms.openlocfilehash: c827b346f429c90b6637cbaefe26dfa1c8677bb0
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303114"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="8bf86-101">表示属于工作簿的 Worksheet 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="8bf86-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="8bf86-102">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.addFromBase64
  - excel.Excel.WorksheetCollection.addFromBase64_1
  - excel.Excel.WorksheetCollection.context
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.load_1
  - excel.Excel.WorksheetCollection.load_2
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onCalculated
  - excel.Excel.WorksheetCollection.onChanged
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.onFiltered
  - excel.Excel.WorksheetCollection.onFormatChanged
  - excel.Excel.WorksheetCollection.onSelectionChanged
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="8bf86-p101">向工作簿添加新工作表。工作表将添加到现有工作表的末尾。如果您想要激活新添加的工作表，请对其调用 ".activate()。</span><span class="sxs-lookup"><span data-stu-id="8bf86-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="8bf86-106">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-107\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="8bf86-p102">可选。要添加的工作表的名称。如果指定，名称应唯一。如果未指定，Excel 将确定新工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="8bf86-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.addFromBase64
  summary: >-
    <span data-ttu-id="8bf86-112">将工作簿的指定工作表插入到当前工作簿中。</span><span class="sxs-lookup"><span data-stu-id="8bf86-112">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="8bf86-113">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-113">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: "<span data-ttu-id=\"8bf86-114\">一个数组, 其中每个项代表新插入的工作表的 Id。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-114\">An array where each item represents the Id of the new inserted worksheet.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-115\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-115\">Examples</span></span>\n\n```javascript\nconst myFile = <HTMLInputElement>document.getElementById(\"file\");\nconst reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run((context) => {\n        // strip off the metadata before the base64-encoded string\n        const startIndex = (<string>(<FileReader>event.target).result).indexOf(\"base64,\");\n        const workbookContents = (<string>(<FileReader>event.target).result).substr(startIndex + 7);\n\n        const sheets = context.workbook.worksheets;\n        sheets.addFromBase64(\n            workbookContents,\n            null, // get all the worksheets \n            Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets\n            );\n        return context.sync();\n    });\n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
    parameters:
    - id: base64File
      description: <span data-ttu-id="8bf86-116">必需。</span><span class="sxs-lookup"><span data-stu-id="8bf86-116">Required.</span></span> <span data-ttu-id="8bf86-117">代表源工作簿的 Base64 字符串。</span><span class="sxs-lookup"><span data-stu-id="8bf86-117">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="8bf86-118">可选。</span><span class="sxs-lookup"><span data-stu-id="8bf86-118">Optional.</span></span> <span data-ttu-id="8bf86-119">要插入的 speified 工作表名称。</span><span class="sxs-lookup"><span data-stu-id="8bf86-119">The speified worksheet names to insert.</span></span> <span data-ttu-id="8bf86-120">默认情况下, 它将从源工作簿中插入所有工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-120">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionType
      description: <span data-ttu-id="8bf86-121">可选。</span><span class="sxs-lookup"><span data-stu-id="8bf86-121">Optional.</span></span> <span data-ttu-id="8bf86-122">插入位置类型的详细信息, 请参阅 WorksheetPositionType。</span><span class="sxs-lookup"><span data-stu-id="8bf86-122">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="8bf86-123">默认值为 "Start"。</span><span class="sxs-lookup"><span data-stu-id="8bf86-123">Default is "Start".</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="8bf86-124">可选。</span><span class="sxs-lookup"><span data-stu-id="8bf86-124">Optional.</span></span> <span data-ttu-id="8bf86-125">当前工作簿中引用的工作表对象或工作表名称/id。</span><span class="sxs-lookup"><span data-stu-id="8bf86-125">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="8bf86-126">默认值为 null 并基于 postionType 参数, 它将在当前工作簿的开始或结尾插入工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-126">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.addFromBase64_1
  summary: >-
    <span data-ttu-id="8bf86-127">将工作簿的指定工作表插入到当前工作簿中。</span><span class="sxs-lookup"><span data-stu-id="8bf86-127">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="8bf86-128">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-128">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: <span data-ttu-id="8bf86-129">一个数组, 其中每个项代表新插入的工作表的 Id。</span><span class="sxs-lookup"><span data-stu-id="8bf86-129">An array where each item represents the Id of the new inserted worksheet.</span></span>
    parameters:
    - id: base64File
      description: <span data-ttu-id="8bf86-130">必需。</span><span class="sxs-lookup"><span data-stu-id="8bf86-130">Required.</span></span> <span data-ttu-id="8bf86-131">代表源工作簿的 Base64 字符串。</span><span class="sxs-lookup"><span data-stu-id="8bf86-131">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="8bf86-132">可选。</span><span class="sxs-lookup"><span data-stu-id="8bf86-132">Optional.</span></span> <span data-ttu-id="8bf86-133">要插入的 speified 工作表名称。</span><span class="sxs-lookup"><span data-stu-id="8bf86-133">The speified worksheet names to insert.</span></span> <span data-ttu-id="8bf86-134">默认情况下, 它将从源工作簿中插入所有工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-134">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionTypeString
      description: <span data-ttu-id="8bf86-135">可选。</span><span class="sxs-lookup"><span data-stu-id="8bf86-135">Optional.</span></span> <span data-ttu-id="8bf86-136">插入位置类型的详细信息, 请参阅 WorksheetPositionType。</span><span class="sxs-lookup"><span data-stu-id="8bf86-136">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="8bf86-137">默认值为 "Start"。</span><span class="sxs-lookup"><span data-stu-id="8bf86-137">Default is "Start".</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="8bf86-138">可选。</span><span class="sxs-lookup"><span data-stu-id="8bf86-138">Optional.</span></span> <span data-ttu-id="8bf86-139">当前工作簿中引用的工作表对象或工作表名称/id。</span><span class="sxs-lookup"><span data-stu-id="8bf86-139">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="8bf86-140">默认值为 null 并基于 postionType 参数, 它将在当前工作簿的开始或结尾插入工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-140">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.context
  summary: <span data-ttu-id="8bf86-141">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="8bf86-141">The request context associated with the object.</span></span> <span data-ttu-id="8bf86-142">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="8bf86-142">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="8bf86-143">获取工作簿中当前处于活动状态的工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-143">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="8bf86-144">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-144">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-145\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-145\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="8bf86-146">获取集合中的工作表数量。</span><span class="sxs-lookup"><span data-stu-id="8bf86-146">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="8bf86-147">\[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-147">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="8bf86-p112">可选。如果为 true，则仅考虑可见的工作表，跳过任意隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-p112">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="8bf86-150">获取集合中的第一个工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-150">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="8bf86-151">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-151">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-152\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-152\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="8bf86-p113">可选。如果为 true，则仅考虑可见的工作表，跳过任意隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-p113">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="8bf86-155">使用其名称或 ID 获取 worksheet 对象。</span><span class="sxs-lookup"><span data-stu-id="8bf86-155">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="8bf86-156">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-156">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="8bf86-157">工作表的名称或 ID。</span><span class="sxs-lookup"><span data-stu-id="8bf86-157">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="8bf86-p114">按 Worksheet 对象的名称或 ID 获取此对象。如果没有 Worksheet 对象，将返回 NULL 对象。</span><span class="sxs-lookup"><span data-stu-id="8bf86-p114">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="8bf86-160">\[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-160">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="8bf86-161">工作表的名称或 ID。</span><span class="sxs-lookup"><span data-stu-id="8bf86-161">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="8bf86-162">获取集合中的最后一个工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-162">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="8bf86-163">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-163">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-164\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-164\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="8bf86-p115">可选。如果为 true，则仅考虑可见的工作表，跳过任意隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="8bf86-p115">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="8bf86-167">获取此集合中的已加载子项目。</span><span class="sxs-lookup"><span data-stu-id="8bf86-167">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="8bf86-168">对命令进行排队, 以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="8bf86-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8bf86-169">在读取属性之前, 必须先调用 "context, sync ()"。</span><span class="sxs-lookup"><span data-stu-id="8bf86-169">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="8bf86-170">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="8bf86-170">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="8bf86-171">`load(option?: string | string[]): Excel.WorksheetCollection`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="8bf86-171">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="8bf86-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="8bf86-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="8bf86-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="8bf86-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="8bf86-174">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="8bf86-174">It is similar to the preceding signature.</span></span> <span data-ttu-id="8bf86-175">top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="8bf86-175">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8bf86-176">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="8bf86-176">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8bf86-177">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="8bf86-177">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.WorksheetCollection.load_1
  summary: <span data-ttu-id="8bf86-178">对命令进行排队, 以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="8bf86-178">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8bf86-179">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="8bf86-179">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-180\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-180\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="8bf86-181">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="8bf86-181">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="8bf86-182">当工作簿中的任何工作表激活时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="8bf86-182">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="8bf86-183">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-183">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-184\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-184\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="8bf86-185">将新工作表添加到工作簿时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="8bf86-185">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="8bf86-186">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-186">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-187\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-187\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onCalculated
  summary: >-
    <span data-ttu-id="8bf86-188">计算工作簿中的任何工作表时发生。</span><span class="sxs-lookup"><span data-stu-id="8bf86-188">Occurs when any worksheet in the workbook is calculated.</span></span>


    <span data-ttu-id="8bf86-189">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-189">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.WorksheetCollection.onChanged
  summary: >-
    <span data-ttu-id="8bf86-190">在工作簿中的任何工作表发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="8bf86-190">Occurs when any worksheet in the workbook is changed.</span></span>


    <span data-ttu-id="8bf86-191">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-191">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="8bf86-192">当工作簿中的任何工作表被停用时发生。</span><span class="sxs-lookup"><span data-stu-id="8bf86-192">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="8bf86-193">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8bf86-194\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"8bf86-194\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="8bf86-195">当从工作簿中删除工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="8bf86-195">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="8bf86-196">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-196">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.onFiltered
  summary: >-
    <span data-ttu-id="8bf86-197">在工作簿中应用任何工作表的筛选器时发生。</span><span class="sxs-lookup"><span data-stu-id="8bf86-197">Occurs when any worksheet's filter is applied in the workbook.</span></span>


    <span data-ttu-id="8bf86-198">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-198">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.WorksheetCollection.onFormatChanged
  summary: >-
    <span data-ttu-id="8bf86-199">当工作簿中的任何工作表的格式更改时发生。</span><span class="sxs-lookup"><span data-stu-id="8bf86-199">Occurs when any worksheet in the workbook has format changed.</span></span>


    <span data-ttu-id="8bf86-200">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-200">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onSelectionChanged
  summary: >-
    <span data-ttu-id="8bf86-201">在任何工作表上的所选内容更改时发生。</span><span class="sxs-lookup"><span data-stu-id="8bf86-201">Occurs when the selection changes on any worksheet.</span></span>


    <span data-ttu-id="8bf86-202">\[[API 集: ExcelApi BETA (仅限预览)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bf86-202">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  summary: <span data-ttu-id="8bf86-203">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到`JSON.stringify()` <!-- -->时提供更有用的输出。</span><span class="sxs-lookup"><span data-stu-id="8bf86-203">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="8bf86-204">(`JSON.stringify`<!-- -->反过来, 也会调用传递`toJSON`给它的对象的方法。)虽然原始`Excel.WorksheetCollection`对象是 API 对象, 但该`toJSON`方法返回一个纯 JavaScript 对象 (类型为`Excel.Interfaces.WorksheetCollectionData` <!-- -->), 其中包含集合的项中所有加载属性的浅表副本的 "items" 数组。</span><span class="sxs-lookup"><span data-stu-id="8bf86-204">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
