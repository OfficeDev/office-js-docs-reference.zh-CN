### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    创建并打开一个新的演示文稿。 （可选）可以使用 base64 编码的 .pptx 文件预填充演示文稿。


    \[[API 集： PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: 可选。 Base64 编码的 .pptx 文件。 默认值为 null。
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: 使用新的 RequestContext 执行对 PowerPoint 对象模型执行操作的批处理脚本。 解决承诺时，将释放在执行期间自动分配的任何已跟踪对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: '一个采用 RequestContext 的函数，并返回一个承诺 (通常情况下，只是 "context ( # A2" 的结果 ) 。 Context 参数可促进对 PowerPoint 应用程序的请求。 由于 Office 加载项和 PowerPoint 应用程序在两个不同的进程中运行，因此需要 RequestContext 才能从外接程序获取对 PowerPoint 对象模型的访问权限。'
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: 使用以前创建的 API 对象的 RequestContext，执行对 PowerPoint 对象模型执行操作的批处理脚本。 解决承诺时，将释放在执行期间自动分配的任何已跟踪对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: '以前创建的 API 对象。 批处理将使用与传入的对象相同的 RequestContext，这意味着应用于该对象的任何更改都将由 "context. sync ( # A1" 选取。'
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />
    - id: batch
      description: '一个采用 RequestContext 的函数，并返回一个承诺 (通常情况下，只是 "context ( # A2" 的结果 ) 。 Context 参数可促进对 PowerPoint 应用程序的请求。 由于 Office 加载项和 PowerPoint 应用程序在两个不同的进程中运行，因此需要 RequestContext 才能从外接程序获取对 PowerPoint 对象模型的访问权限。'
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: 使用以前创建的 API 对象的 RequestContext，执行对 PowerPoint 对象模型执行操作的批处理脚本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: '以前创建的 API 对象的数组。 将验证该数组，以确保所有对象都共享相同的上下文。 批处理将使用此共享 RequestContext，这意味着，应用于这些对象的任何更改都将由 "context. sync ( # A1" 选取。'
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: '一个采用 RequestContext 的函数，并返回一个承诺 (通常情况下，只是 "context ( # A2" 的结果 ) 。 Context 参数可促进对 PowerPoint 应用程序的请求。 由于 Office 加载项和 PowerPoint 应用程序在两个不同的进程中运行，因此需要 RequestContext 才能从外接程序获取对 PowerPoint 对象模型的访问权限。'
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 3e5b024651dd5d1d211168d7cd1339dd58b6d7bd
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49263643"
