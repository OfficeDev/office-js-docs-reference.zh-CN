### YamlMime:TSType
name: Visio.ShapeView
uid: visio!Visio.ShapeView:class
package: visio!
fullName: Visio.ShapeView
summary: >-
  表示 ShapeView 类。


  \[[API 集： 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: visio!Visio.ShapeView#context:member
  package: visio!
  fullName: context
  summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="visio!Visio.RequestContext:class" />
- name: highlight
  uid: visio!Visio.ShapeView#highlight:member
  package: visio!
  fullName: highlight
  summary: >-
    表示形状周围的突出显示内容。


    \[[API 集： 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'highlight: Visio.Highlight;'
    return:
      type: <xref uid="visio!Visio.Highlight:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nVisio.run(session, function (ctx) {\n    var activePage = ctx.document.getActivePage();\n    var shape = activePage.shapes.getItem(0);\n    shape.view.highlight = { color: \"#E7E7E7\", width: 100 };\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
methods:
- name: addOverlay(OverlayType, Content, OverlayHorizontalAlignment, OverlayVerticalAlignment, Width, Height)
  uid: visio!Visio.ShapeView#addOverlay:member(1)
  package: visio!
  fullName: addOverlay(OverlayType, Content, OverlayHorizontalAlignment, OverlayVerticalAlignment, Width, Height)
  summary: >-
    在形状之上添加覆盖。


    \[[API 集： 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addOverlay(OverlayType: Visio.OverlayType, Content: string, OverlayHorizontalAlignment: Visio.OverlayHorizontalAlignment, OverlayVerticalAlignment: Visio.OverlayVerticalAlignment, Width: number, Height: number): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: OverlayType
      description: 覆盖类型。 可以是 "Text" 或 "Image"。
      type: <xref uid="visio!Visio.OverlayType:enum" />
    - id: Content
      description: 覆盖的内容。
      type: string
    - id: OverlayHorizontalAlignment
      description: 重叠的水平对齐方式。 可以是 "Left"、"Center" 或 "Right"。
      type: <xref uid="visio!Visio.OverlayHorizontalAlignment:enum" />
    - id: OverlayVerticalAlignment
      description: 重叠的垂直对齐方式。 可以是 ' Top '、' 中间 '、' 底端 '。
      type: <xref uid="visio!Visio.OverlayVerticalAlignment:enum" />
    - id: Width
      description: 覆盖宽度。
      type: number
    - id: Height
      description: 覆盖高度。
      type: number
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nVisio.run(session, function (ctx) {\n    var activePage = ctx.document.getActivePage();\n    var shape = activePage.shapes.getItem(0);\n    var overlayId = shape.view.addOverlay(\"Image\", \"Visio Online\", \"Center\", \"Middle\", 50, 50);\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: addOverlay(OverlayTypeString, Content, OverlayHorizontalAlignment, OverlayVerticalAlignment, Width, Height)
  uid: visio!Visio.ShapeView#addOverlay:member(2)
  package: visio!
  fullName: addOverlay(OverlayTypeString, Content, OverlayHorizontalAlignment, OverlayVerticalAlignment, Width, Height)
  summary: >-
    在形状之上添加覆盖。


    \[[API 集： 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addOverlay(OverlayTypeString: "Text" | "Image" | "Html", Content: string, OverlayHorizontalAlignment: "Left" | "Center" | "Right", OverlayVerticalAlignment: "Top" | "Middle" | "Bottom", Width: number, Height: number): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: OverlayTypeString
      description: 覆盖类型。 可以是 "Text" 或 "Image"。
      type: "\"Text\" | \"Image\" | \"Html\""
    - id: Content
      description: 覆盖的内容。
      type: string
    - id: OverlayHorizontalAlignment
      description: 重叠的水平对齐方式。 可以是 "Left"、"Center" 或 "Right"。
      type: "\"Left\" | \"Center\" | \"Right\""
    - id: OverlayVerticalAlignment
      description: 重叠的垂直对齐方式。 可以是 ' Top '、' 中间 '、' 底端 '。
      type: "\"Top\" | \"Middle\" | \"Bottom\""
    - id: Width
      description: 覆盖宽度。
      type: number
    - id: Height
      description: 覆盖高度。
      type: number
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: load(option)
  uid: visio!Visio.ShapeView#load:member(1)
  package: visio!
  fullName: load(option)
  summary: 将命令加入队列以加载对象的指定属性。 在读取属性之前，你必须调用“context.sync()”。
  remarks: >-
    除了此签名之外，此方法还具有以下签名：


    `load(option?: string | string[]): Visio.ShapeView` -Where 选项是一个逗号分隔的字符串或一个字符串数组，用于指定要加载的属性。


    `load(option?: { select?: string; expand?: string; }): Visio.ShapeView` -Where 选项。选择是一个用逗号分隔的字符串，用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串，用于指定要加载的导航属性。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.ShapeView` -仅适用于集合类型。 它类似于前面的签名。 Top 指定结果中可包含的集合项的最大数量。 选项。 skip 指定要跳过且不包含在结果中的项目数。 如果指定了 top 选项，则在跳过指定数目的项目后将启动结果集。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: Visio.Interfaces.ShapeViewLoadOptions): Visio.ShapeView;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="visio!Visio.Interfaces.ShapeViewLoadOptions:interface" />
    return:
      type: <xref uid="visio!Visio.ShapeView:class" />
      description: ''
- name: load(propertyNames)
  uid: visio!Visio.ShapeView#load:member(2)
  package: visio!
  fullName: load(propertyNames)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Visio.ShapeView;'
    parameters:
    - id: propertyNames
      description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
      type: string | string[]
    return:
      type: <xref uid="visio!Visio.ShapeView:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: visio!Visio.ShapeView#load:member(3)
  package: visio!
  fullName: load(propertyNamesAndPaths)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Visio.ShapeView;'
    parameters:
    - id: propertyNamesAndPaths
      description: 其中，propertyNamesAndPaths 是用逗号分隔的字符串，用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串，用于指定要加载的导航属性。
      type: '{ select?: string; expand?: string; }'
    return:
      type: <xref uid="visio!Visio.ShapeView:class" />
      description: ''
- name: removeOverlay(OverlayId)
  uid: visio!Visio.ShapeView#removeOverlay:member(1)
  package: visio!
  fullName: removeOverlay(OverlayId)
  summary: >-
    删除形状上的特定覆盖或所有覆盖。


    \[[API 集： 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeOverlay(OverlayId: number): void;'
    parameters:
    - id: OverlayId
      description: 覆盖 ID。删除形状上特定 ID 的覆盖。
      type: number
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nVisio.run(session, function (ctx) {\n    var activePage = ctx.document.getActivePage();\n    var shape = activePage.shapes.getItem(0);\n    shape.view.removeOverlay(1);\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: set(properties, options)
  uid: visio!Visio.ShapeView#set:member(1)
  package: visio!
  fullName: set(properties, options)
  summary: 同时设置一个对象的多个属性。 您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。
  remarks: >-
    此方法具有以下附加签名：


    `set(properties: Visio.ShapeView): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ShapeViewUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: 一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。
      type: <xref uid="visio!Visio.Interfaces.ShapeViewUpdateData:interface" />
    - id: options
      description: 提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: visio!Visio.ShapeView#set:member(2)
  package: visio!
  fullName: set(properties)
  summary: 基于现有加载的对象同时设置该对象的多个属性。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Visio.ShapeView): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="visio!Visio.ShapeView:class" />
    return:
      type: void
      description: ''
- name: showOverlay(overlayId, show)
  uid: visio!Visio.ShapeView#showOverlay:member(1)
  package: visio!
  fullName: showOverlay(overlayId, show)
  summary: >-
    在形状上显示特定的覆盖。


    \[[API 集： 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showOverlay(overlayId: number, show: boolean): void;'
    parameters:
    - id: overlayId
      description: 上下文中的覆盖 id
      type: number
    - id: show
      description: 显示或隐藏
      type: boolean
    return:
      type: void
      description: ''
- name: toJSON()
  uid: visio!Visio.ShapeView#toJSON:member(1)
  package: visio!
  fullName: toJSON()
  summary: 重写 JavaScript `toJSON()` 方法，以便在将 API 对象传递到时提供更有用的输出 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，调用 `toJSON` 传递给它的对象的方法。 ) ，而原始 ShapeView 对象是 API 对象，则该 `toJSON` 方法返回一个 (类型为的纯 JavaScript 对象。 `Visio.Interfaces.ShapeViewData`<!-- -->) ，其中包含原始对象中任何已加载的子属性的浅表副本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Visio.Interfaces.ShapeViewData;'
    return:
      type: <xref uid="visio!Visio.Interfaces.ShapeViewData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 7f489412c5dbf265bf265aefb8fe53636b56869a
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49193006"
