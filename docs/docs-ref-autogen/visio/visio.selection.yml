### YamlMime:UniversalReference
items:
  - uid: visio.Visio.Selection
    summary: |-
      <span data-ttu-id="1a99a-101">表示页面中的 Selection 对象。</span><span class="sxs-lookup"><span data-stu-id="1a99a-101">Represents the Selection in the page.</span></span>

      <span data-ttu-id="1a99a-102">\[[API 集: 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]</span><span class="sxs-lookup"><span data-stu-id="1a99a-102">\[ [API set: 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview) \]</span></span>
    name: Visio.Selection
    fullName: Visio.Selection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: visio
    children:
      - visio.Visio.Selection.context
      - visio.Visio.Selection.load
      - visio.Visio.Selection.load_1
      - visio.Visio.Selection.shapes
      - visio.Visio.Selection.toJSON
  - uid: visio.Visio.Selection.context
    summary: <span data-ttu-id="1a99a-103">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="1a99a-103">The request context associated with the object.</span></span> <span data-ttu-id="1a99a-104">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="1a99a-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: visio.Visio.Selection.load
    summary: '<span data-ttu-id="1a99a-105">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="1a99a-105">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1a99a-106">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="1a99a-106">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Visio.Selection;'
      return:
        type:
          - visio.Visio.Selection
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="1a99a-107">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="1a99a-107">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: visio.Visio.Selection.load_1
    summary: '<span data-ttu-id="1a99a-108">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="1a99a-108">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1a99a-109">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="1a99a-109">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Visio.Selection;'
      return:
        type:
          - visio.Visio.Selection
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="1a99a-110">其中, propertyNamesAndPaths 是用逗号分隔的字符串, 用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="1a99a-110">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: visio.Visio.Selection.shapes
    summary: |-
      <span data-ttu-id="1a99a-111">获取所选内容的形状。</span><span class="sxs-lookup"><span data-stu-id="1a99a-111">Gets the Shapes of the Selection.</span></span> <span data-ttu-id="1a99a-112">只读。</span><span class="sxs-lookup"><span data-stu-id="1a99a-112">Read-only.</span></span>

      <span data-ttu-id="1a99a-113">\[[API 集: 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]</span><span class="sxs-lookup"><span data-stu-id="1a99a-113">\[ [API set: 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview) \]</span></span>
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Visio.ShapeCollection;'
      return:
        type:
          - Visio.ShapeCollection
  - uid: visio.Visio.Selection.toJSON
    summary: '<span data-ttu-id="1a99a-114">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="1a99a-114">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="1a99a-115">.</span><span class="sxs-lookup"><span data-stu-id="1a99a-115"></span></span> <span data-ttu-id="1a99a-116">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="1a99a-116"></span></span><!-- --><span data-ttu-id="1a99a-117">反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始的 Visio. Selection 对象是一个 API 对象, 但`toJSON`该方法返回一个简单的 JavaScript 对象 (类型为`Visio.Interfaces.SelectionData`</span><span class="sxs-lookup"><span data-stu-id="1a99a-117">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Visio.Selection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Visio.Interfaces.SelectionData`</span></span><!-- --><span data-ttu-id="1a99a-118">), 其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="1a99a-118">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Visio.Interfaces.SelectionData;'
      return:
        type:
          - visio.Visio.Interfaces.SelectionData
        description: ''