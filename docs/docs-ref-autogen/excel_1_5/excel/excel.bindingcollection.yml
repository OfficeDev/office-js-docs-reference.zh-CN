### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.BindingCollection:class'
    summary: |-
      表示属于工作簿的所有绑定对象的集合。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.BindingCollection
    fullName: Excel.BindingCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.BindingCollection#add:member(1)'
      - 'excel!Excel.BindingCollection#add:member(2)'
      - 'excel!Excel.BindingCollection#addFromNamedItem:member(1)'
      - 'excel!Excel.BindingCollection#addFromNamedItem:member(2)'
      - 'excel!Excel.BindingCollection#addFromSelection:member(1)'
      - 'excel!Excel.BindingCollection#addFromSelection:member(2)'
      - 'excel!Excel.BindingCollection#context:member'
      - 'excel!Excel.BindingCollection#count:member'
      - 'excel!Excel.BindingCollection#getCount:member(1)'
      - 'excel!Excel.BindingCollection#getItem:member(1)'
      - 'excel!Excel.BindingCollection#getItemAt:member(1)'
      - 'excel!Excel.BindingCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.BindingCollection#items:member'
      - 'excel!Excel.BindingCollection#load:member(1)'
      - 'excel!Excel.BindingCollection#load:member(2)'
      - 'excel!Excel.BindingCollection#load:member(3)'
      - 'excel!Excel.BindingCollection#toJSON:member(1)'
  - uid: 'excel!Excel.BindingCollection#add:member(1)'
    summary: |-
      将新的 binding 对象添加到特定区域。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(range, bindingType, id)'
    fullName: 'add(range, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: range
          description: 要将绑定绑定到的范围。可以是 Excel 范围对象，也可以是字符串。如果是字符串，必须包含完整地址，包括工作表名称
          type:
            - 'excel!Excel.BindingCollection#add~0:complex'
        - id: bindingType
          description: 绑定的类型。 请参阅 BindingType。
          type:
            - 'excel!Excel.BindingType:enum'
        - id: id
          description: 绑定的名称。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#add:member(2)'
    summary: |-
      将新的 binding 对象添加到特定区域。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(range, bindingTypeString, id)'
    fullName: 'add(range, bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: range
          description: 要将绑定绑定到的范围。可以是 Excel 范围对象，也可以是字符串。如果是字符串，必须包含完整地址，包括工作表名称
          type:
            - 'excel!Excel.BindingCollection#add~1:complex'
        - id: bindingTypeString
          description: 绑定的类型。 请参阅 BindingType。
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: 绑定的名称。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromNamedItem:member(1)'
    summary: |-
      根据工作簿中的命名项添加新的 binding 对象。 如果已命名项目引用多个区域，则将返回 "InvalidReference" 错误。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromNamedItem(name, bindingType, id)'
    fullName: 'addFromNamedItem(name, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: name
          description: 从中创建绑定的名称。
          type:
            - string
        - id: bindingType
          description: 绑定的类型。 请参阅 BindingType。
          type:
            - 'excel!Excel.BindingType:enum'
        - id: id
          description: 绑定的名称。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromNamedItem:member(2)'
    summary: |-
      根据工作簿中的命名项添加新的 binding 对象。 如果已命名项目引用多个区域，则将返回 "InvalidReference" 错误。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromNamedItem(name, bindingTypeString, id)'
    fullName: 'addFromNamedItem(name, bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: name
          description: 从中创建绑定的名称。
          type:
            - string
        - id: bindingTypeString
          description: 绑定的类型。 请参阅 BindingType。
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: 绑定的名称。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromSelection:member(1)'
    summary: |-
      根据当前选择的内容添加新的 binding 对象。 如果所选内容有多个区域，则将返回 "InvalidReference" 错误。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromSelection(bindingType, id)'
    fullName: 'addFromSelection(bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: bindingType
          description: 绑定的类型。 请参阅 BindingType。
          type:
            - 'excel!Excel.BindingType:enum'
        - id: id
          description: 绑定的名称。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#addFromSelection:member(2)'
    summary: |-
      根据当前选择的内容添加新的 binding 对象。 如果所选内容有多个区域，则将返回 "InvalidReference" 错误。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromSelection(bindingTypeString, id)'
    fullName: 'addFromSelection(bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: bindingTypeString
          description: 绑定的类型。 请参阅 BindingType。
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: 绑定的名称。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#context:member'
    summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.BindingCollection#count:member'
    summary: |-
      返回集合中绑定的数量。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.BindingCollection#getCount:member(1)'
    summary: |-
      获取集合中的绑定数量。

      \[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.BindingCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.BindingCollection#getItem:member(1)'
    summary: |-
      按 ID 获取绑定对象。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // Create a table binding to monitor data changes in the table. 
          // When data is changed, the background color of the table will be changed to orange.
          function addEventHandler() {
              // Create Table1
              Excel.run(function (ctx) { 
                  ctx.workbook.tables.add("Sheet1!A1:C4", true);
                  return ctx.sync().then(function() {
                          console.log("My Diet Data Inserted!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
              //Create a new table binding for Table1
              Office.context.document.bindings.addFromNamedItemAsync(
                  "Table1", Office.CoercionType.Table, { id: "myBinding" }, function (asyncResult) {
                  if (asyncResult.status == "failed") {
                      console.log("Action failed with error: " + asyncResult.error.message);
                  }
                  else {
                      // If succeeded, then add event handler to the table binding.
                      Office.select("bindings#myBinding").addHandlerAsync(
                          Office.EventType.BindingDataChanged, onBindingDataChanged);
                  }
              });
          }
              
          // when data in the table is changed, this event will be triggered.
          function onBindingDataChanged(eventArgs) {
              Excel.run(function (ctx) { 
                  // highlight the table in orange to indicate data has been changed.
                  ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
                  return ctx.sync().then(function() {
                          console.log("The value in this table got changed!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
          }
          ```
      parameters:
        - id: id
          description: 要检索的绑定对象的 ID。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#getItemAt:member(1)'
    summary: |-
      根据其在项目数组中的位置获取绑定对象。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var lastPosition = ctx.workbook.bindings.count - 1;
              var binding = ctx.workbook.bindings.getItemAt(lastPosition);
              binding.load('type')
              return ctx.sync().then(function() {
                      console.log(binding.type); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 要检索的对象的索引值。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.BindingCollection#getItemOrNullObject:member(1)'
    summary: |-
      按 ID 获取 Binding 对象。 如果没有 Binding 对象，将返回 NULL 对象。

      \[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: id
          description: 要检索的绑定对象的 ID。
          type:
            - string
  - uid: 'excel!Excel.BindingCollection#items:member'
    summary: 获取此集合中已加载的子项。
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type:
          - 'excel!Excel.BindingCollection#items~0:complex'
  - uid: 'excel!Excel.BindingCollection#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
        description: ''
      parameters:
        - id: options
          description: 提供要加载的对象的属性的选项。
          type:
            - 'excel!Excel.BindingCollection#load~0:complex'
  - uid: 'excel!Excel.BindingCollection#load:member(2)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < bindings.items.length; i++)
                  {
                      console.log(bindings.items[i].id);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of bindings
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('count');
              return ctx.sync().then(function() {
                  console.log("Bindings: Count= " + bindings.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.BindingCollection#load:member(3)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.BindingCollection;'
      return:
        type:
          - 'excel!Excel.BindingCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.BindingCollection#toJSON:member(1)'
    summary: 重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始`Excel.BindingCollection`对象是 API 对象，但`toJSON`方法返回一个无格式的 JavaScript 对象（类型为`Excel.Interfaces.BindingCollectionData`<!-- -->），其中包含集合的项中所有加载属性的浅表副本的 "items" 数组。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.BindingCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Binding:class'
    name: Excel.Binding
  - uid: 'excel!Excel.BindingCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.BindingType:enum'
    name: Excel.BindingType
  - uid: 'excel!Excel.BindingCollection#add~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.BindingCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.BindingCollection#items~0:complex'
    name: 'Excel.Binding[]'
    fullName: 'Excel.Binding[]'
    spec.typeScript:
      - uid: 'excel!Excel.Binding:class'
        name: Excel.Binding
        fullName: Excel.Binding
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.BindingCollection:class'
    name: Excel.BindingCollection
  - uid: 'excel!Excel.BindingCollection#load~0:complex'
    name: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.BindingCollectionLoadOptions:interface'
        name: Excel.Interfaces.BindingCollectionLoadOptions
        fullName: Excel.Interfaces.BindingCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.BindingCollectionData:interface'
    name: Excel.Interfaces.BindingCollectionData