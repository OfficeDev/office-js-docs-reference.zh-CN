### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Mailbox:interface'
    summary: |-
      为 Microsoft Outlook 和 Microsoft Outlook 网页版提供对 Outlook 外接程序对象模型的访问权限。

      命名

      - diagnostics：将诊断信息提供给 Outlook 外接程序。

      - item：提供用于访问 Outlook 外接程序中的邮件或约会的方法和属性。

      - userProfile：提供有关 Outlook 外接程序中的用户的信息。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**：受限

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读
    name: Office.Mailbox
    fullName: Office.Mailbox
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
      - 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
      - 'outlook!Office.Mailbox#diagnostics:member'
      - 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
      - 'outlook!Office.Mailbox#displayMessageForm:member(1)'
      - 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
      - 'outlook!Office.Mailbox#ewsUrl:member'
      - 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
      - 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
      - 'outlook!Office.Mailbox#item:member'
      - 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
      - 'outlook!Office.Mailbox#userProfile:member'
  - uid: 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
    summary: |-
      获取包含以本地客户端时间表示的时间信息的字典。

      Outlook 网页版或桌面客户端上的邮件应用程序使用的日期和时间可以使用不同的时区。 Outlook 使用客户端计算机时区;Web 上的 Outlook 使用 Exchange 管理中心（EAC）上设置的时区。 应对日期和时间值进行处理，以便用户界面上显示的值始终与用户预期的时区一致。

      如果邮件应用程序在桌面客户端上的 Outlook 中运行，则 convertToLocalClientTime 方法将返回一个 dictionary 对象，并将值设置为客户端计算机时区。 如果邮件应用程序在 web 上的 Outlook 中运行，则 convertToLocalClientTime 方法将返回一个 dictionary 对象，其中的值设置为 EAC 中指定的时区。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读
    name: convertToLocalClientTime(timeValue)
    fullName: convertToLocalClientTime(timeValue)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      return:
        type:
          - 'outlook!Office.LocalClientTime:interface'
        description: ''
      parameters:
        - id: timeValue
          description: Date 对象。
          type:
            - '!Date:interface'
  - uid: 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
    summary: |-
      从包含时间信息的字典中获取 Date 对象。

      ConvertToUtcClientTime 方法将包含本地日期和时间的字典转换为带有本地日期和时间的正确值的 Date 对象。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      #### <a name="examples"></a>示例

      ```javascript
      // Represents 3:37 PM PDT on Monday, August 26, 2019.
      var input = {
          date: 26,
          hours: 15,
          milliseconds: 2,
          minutes: 37,
          month: 7,
          seconds: 2,
          timezoneOffset: -420,
          year: 2019
      };

      // result should be a Date object.
      var result = Office.context.mailbox.convertToUtcClientTime(input);

      // Output should be "2019-08-26T22:37:02.002Z".
      console.log(result.toISOString());
      ```
    name: convertToUtcClientTime(input)
    fullName: convertToUtcClientTime(input)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      return:
        type:
          - '!Date:interface'
        description: 包含以 UTC 表示的时间的 Date 对象。
      parameters:
        - id: input
          description: 要转换的本地时间值。
          type:
            - 'outlook!Office.LocalClientTime:interface'
  - uid: 'outlook!Office.Mailbox#diagnostics:member'
    summary: |-
      将诊断信息提供给 Outlook 外接程序。

      包含以下成员：

      - hostName （string）：一个表示主机应用程序的名称的字符串。 它应为以下值之一： "Outlook"、"OutlookWebApp"、"OutlookIOS" 或 "OutlookAndroid"。 **注意**：针对桌面客户端（即 Windows 和 Mac）上的 outlook 返回了 "outlook" 值。

      - Diagnostics.hostversion （string）：表示主机应用程序或 Exchange Server 的版本的字符串（例如，"15.0.468.0"）。 如果邮件外接程序在桌面或移动客户端上的 Outlook 中运行，则 Diagnostics.hostversion 属性将返回主机应用程序（Outlook）的版本。 在 Outlook 网页版中，该属性返回的是 Exchange 服务器的版本。

      - OWAView （MailboxEnums 或 string）：代表 web 上的 Outlook 当前视图的枚举（或字符串文字）。 如果主机应用程序不是 web 上的 Outlook，则访问此属性将导致未定义。 Web 上的 Outlook 具有三个视图（"OneColumn"-在屏幕变宽时显示，"TwoColumns"-当屏幕变宽时显示，在屏幕宽度显示为 "ThreeColumns" 时显示）与屏幕和窗口的宽度相对应，以及可以显示的列。

      有关详细信息，请与[Office 诊断](xref:outlook!Office.Diagnostics:interface)<!-- -->.

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type:
          - 'outlook!Office.Diagnostics:interface'
  - uid: 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
    summary: |-
      显示现有日历约会。

      DisplayAppointmentForm 方法打开桌面的新窗口中或移动设备对话框中的现有日历约会。

      在 Mac 版 Outlook 中，可以使用此方法来显示不属于重复时序的一个约会，或显示重复时序的主约会，但无法显示重复时序的实例。这是因为在 Mac 版 Outlook 中，无法访问重复时序的实例属性（包括项 ID）。

      在 Outlook 网页版中，此方法仅在窗体正文的字符数小于或等于 32KB 时，才会打开指定的窗体。

      如果指定的项标识符没有识别现有约会，将在客户端计算机或设备上打开一个空白窗格，并且不会返回错误消息。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.displayAppointmentForm(appointmentId);
      ```
    name: displayAppointmentForm(itemId)
    fullName: displayAppointmentForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 现有日历约会的 Exchange Web 服务 (EWS) 标识符。
          type:
            - string
  - uid: 'outlook!Office.Mailbox#displayMessageForm:member(1)'
    summary: |-
      显示现有邮件。

      DisplayMessageForm 方法打开桌面的新窗口中或移动设备对话框中的现有邮件。

      在 Outlook 网页版中，此方法仅在窗体正文的字符数小于或等于 32KB 时，才会打开指定的窗体。

      如果指定的项标识符未识别现有消息，则客户端计算机上不会显示任何消息，并且也不会返回错误消息。

      请勿将 displayMessageForm 与代表约会的 itemId 一起使用。 使用 displayAppointmentForm 方法显示现有约会，并 displayNewAppointmentForm 显示创建新约会的窗体。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.displayMessageForm(messageId);
      ```
    name: displayMessageForm(itemId)
    fullName: displayMessageForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 现有消息的 Exchange Web 服务 (EWS) 标识符。
          type:
            - string
  - uid: 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
    summary: |-
      显示用于新建日历约会的表单。

      DisplayNewAppointmentForm 方法打开一个窗体，使用户可以创建新的约会或会议。 如果指定了参数，将使用参数的内容自动填充约会窗体字段。

      在 web 上的 Outlook 中，此方法始终显示一个包含 "与会者" 字段的窗体。 如果你未将任何与会者指定为输入参数，该方法将显示为一个包含“保存”按钮的窗体。 如果已指定与会者，窗体将包含与会者和“发送”按钮。

      在 Outlook 富客户端和 Outlook RT 中，如果您在 requiredAttendees、optionalAttendees 或 resources 参数中指定了任何与会者或资源，则此方法显示带有 "发送" 按钮的会议窗体。 如果不指定任何收件人，此方法将显示带有 "保存&amp;关闭" 按钮的约会窗体。

      如果任何参数超过指定大小限制，或者指定了未知参数名称，则会引发异常。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：读取

      #### <a name="examples"></a>示例

      ```javascript
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      Office.context.mailbox.displayNewAppointmentForm(
      {
          requiredAttendees: ['bob@contoso.com'],
          optionalAttendees: ['sam@contoso.com'],
          start: start,
          end: end,
          location: 'Home',
          resources: ['projector@contoso.com'],
          subject: 'meeting',
          body: 'Hello World!'
      });
      ```
    name: displayNewAppointmentForm(parameters)
    fullName: displayNewAppointmentForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: 描述新约会的 AppointmentForm。 所有属性都是可选的。
          type:
            - 'outlook!Office.AppointmentForm:interface'
  - uid: 'outlook!Office.Mailbox#ewsUrl:member'
    summary: |-
      获取此电子邮件帐户的 Exchange Web Services (EWS) 终点的 URL。 仅限阅读模式。

      您的应用程序必须在其清单中指定了 ReadItem 权限，才能在阅读模式下调用 Mailbox.ewsurl 成员。

      在撰写模式下，您必须先调用 saveAsync 方法，然后才能使用 Mailbox.ewsurl 成员。 您的应用程序必须具有 ReadWriteItem 权限，才能调用 saveAsync 方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      远程服务可使用 Mailbox.ewsurl 值对用户邮箱进行 EWS 调用。 例如，可以创建远程服务以[从所选项目中获取附件](https://docs.microsoft.com/outlook/add-ins/get-attachments-of-an-outlook-item)<!-- -->.

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此成员。
    name: ewsUrl
    fullName: ewsUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ewsUrl: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
    summary: |-
      获取一个字符串，其中包含用于从 Exchange Server 获取附件或项目的令牌。

      `getCallbackTokenAsync` 方法进行异步调用，从托管用户邮箱的 Exchange Server 获取非跳转令牌。回调令牌的生存期为 5 分钟。

      令牌作为`asyncResult.value`属性中的字符串返回。

      可以将令牌和附件标识符或项标识符传递到第三方系统。 第三方系统使用令牌作为持有者身份验证令牌调用 Exchange Web 服务 (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) 操作或 [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) 操作，以返回附件或项目。 例如，可以创建远程服务以[从所选项目中获取附件](https://docs.microsoft.com/outlook/add-ins/get-attachments-of-an-outlook-item)<!-- -->.

      在阅读模式下调用 `getCallbackTokenAsync` 方法要求最低权限级别的 **ReadItem**。

      在撰写`getCallbackTokenAsync`模式下调用方法需要您保存项目。 `saveAsync` 方法要求最低权限级别的 **ReadWriteItem**。

      \[[API 集：用于读取模式支持的邮箱 1.0; 适用于撰写模式支持的 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      **错误**：

      - HTTPRequestFailure：请求失败。 请查看诊断对象，了解 HTTP 错误代码。

      - InternalServerError： Exchange 服务器返回一个错误。 请查看诊断对象，了解详细信息。

      - NetworkError：用户不再连接到网络。 请检查网络连接并重试。

      #### <a name="examples"></a>示例

      ```javascript
      function getCallbackToken() {
          var options = {
              isRest: true,
              asyncContext: { message: 'Hello World!' }
          };

          Office.context.mailbox.getCallbackTokenAsync(options, cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(callback, userContext)'
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，将使用类型为 AsyncResult 的单个参数调用在 callback 参数中传递的函数。 令牌作为`asyncResult.value`属性中的字符串返回。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~0:complex'
        - id: userContext
          description: 可选。 传递给异步方法的任何状态数据。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
    summary: |-
      获取用于标识用户和 Office 外接程序的令牌。

      令牌作为`asyncResult.value`属性中的字符串返回。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      GetUserIdentityTokenAsync 方法返回一个令牌，可用于[通过第三方系统识别和验证外接程序和用户](https://docs.microsoft.com/outlook/add-ins/authentication)<!-- -->.

      **错误**：

      - HTTPRequestFailure：请求失败。 请查看诊断对象，了解 HTTP 错误代码。

      - InternalServerError： Exchange 服务器返回一个错误。 请查看诊断对象，了解详细信息。

      - NetworkError：用户不再连接到网络。 请检查网络连接并重试。

      #### <a name="examples"></a>示例

      ```javascript
      function getIdentityToken() {
          Office.context.mailbox.getUserIdentityTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getUserIdentityTokenAsync(callback, userContext)'
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，将使用类型为 AsyncResult 的单个参数调用在 callback 参数中传递的函数。 令牌作为`asyncResult.value`属性中的字符串返回。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
          type:
            - 'outlook!Office.Mailbox#getUserIdentityTokenAsync~0:complex'
        - id: userContext
          description: 可选。 传递给异步方法的任何状态数据。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#item:member'
    summary: '邮箱项目。 根据在其中打开外接的上下文，该项目可以是任意数量的类型。 如果只想查看特定类型的 IntelliSense，应将此项转换为以下项之一：`ItemCompose`<!-- -->, `ItemRead`<!-- -->, `MessageCompose`<!-- -->, `MessageRead`<!-- -->, `AppointmentCompose`<!-- -->, `AppointmentRead`'
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose;'
      return:
        type:
          - 'outlook!Office.Mailbox#item~0:complex'
  - uid: 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
    summary: |-
      向承载用户邮箱的 Exchange 服务器上的 Exchange Web 服务（EWS）服务发出异步请求。

      在这些情况下，加载项应该使用 REST API 来改为访问用户的邮箱。

      MakeEwsRequestAsync 方法代表外接程序将 EWS 请求发送到 Exchange。

      您不能使用 makeEwsRequestAsync 方法请求与文件夹相关联的项目。

      XML 请求必须指定 UTF-8 编码。 &lt;<!-- -->？ xml 版本 = "1.0" 编码 = "utf-8"？<!-- -->&gt;

      您的外接程序必须具有 ReadWriteMailbox 权限才能使用 makeEwsRequestAsync 方法。 有关使用 ReadWriteMailbox 权限和您可以使用 makeEwsRequestAsync 方法调用的 EWS 操作的信息，请参阅[指定邮件外接程序对用户邮箱的访问权限](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->.

      EWS 调用的 XML 结果作为 asyncResult 属性中的字符串提供。 如果结果大小超过 1 MB，则改为返回一条错误消息。

      **注意**：在以下情况下，不支持此方法：

      - 在 iOS 或 Android 上的 Outlook 中。

      - 将加载项加载到 Gmail 邮箱中时。

      **注意**：服务器管理员必须在客户端访问服务器 EWS 目录上将 OAuthAuthentication 设置为 true，以使 makeEwsRequestAsync 方法能够发出 EWS 请求。

      *版本差异*

      当您在早于较15.0.4535.1004 版本的 Outlook 版本中运行的邮件应用程序中使用 makeEwsRequestAsync 方法时，应将编码值设置为 ISO-8859-1。

      `<?xml version="1.0" encoding="iso-8859-1"?>`

      当邮件应用程序运行在 Outlook 网页版中时，您不需要设置编码值。可以通过使用 mailbox.diagnostics.hostName 属性来确定您的邮件应用程序在 Outlook 中还是 Outlook 网页版中运行。可以通过使用 mailbox.diagnostics.hostVersion 属性来确定正在运行的是 Outlook 的哪个版本。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadWriteMailbox

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：撰写或阅读

      #### <a name="examples"></a>示例

      ```javascript
      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          var request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }

      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }

      function callback(asyncResult)  {
          var result = asyncResult.value;
          var context = asyncResult.asyncContext;

          // Process the returned response here.
      }
      ```
    name: 'makeEwsRequestAsync(data, callback, userContext)'
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: EWS 请求。
          type:
            - any
        - id: callback
          description: 方法完成后，将使用类型为 AsyncResult 的单个参数调用在 callback 参数中传递的函数。 结果`value`的属性是以字符串形式提供的 EWS 请求的 XML。 如果结果大小超过 1 MB，则改为返回一条错误消息。
          type:
            - 'outlook!Office.Mailbox#makeEwsRequestAsync~0:complex'
        - id: userContext
          description: 可选。 传递给异步方法的任何状态数据。
          type:
            - any
  - uid: 'outlook!Office.Mailbox#userProfile:member'
    summary: |-
      有关与邮箱关联的用户的信息。 这包括帐户类型、显示名称、电子邮件地址和时区。

      有关详细信息，请在[Office. UserProfile](xref:outlook!Office.UserProfile:interface)
    name: userProfile
    fullName: userProfile
    langs:
      - typeScript
    type: property
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type:
          - 'outlook!Office.UserProfile:interface'
references:
  - uid: 'outlook!Office.LocalClientTime:interface'
    name: LocalClientTime
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.Diagnostics:interface'
    name: Diagnostics
  - uid: 'outlook!Office.AppointmentForm:interface'
    name: AppointmentForm
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#item~0:complex'
    name: Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose
    fullName: Office.Item & Office.ItemCompose & Office.ItemRead & Office.MessageRead & Office.MessageCompose & Office.AppointmentRead & Office.AppointmentCompose
    spec.typeScript:
      - uid: 'outlook!Office.Item:interface'
        name: Item
        fullName: Office.Item
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.ItemCompose:interface'
        name: ItemCompose
        fullName: Office.ItemCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.ItemRead:interface'
        name: ItemRead
        fullName: Office.ItemRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.MessageRead:interface'
        name: MessageRead
        fullName: Office.MessageRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.MessageCompose:interface'
        name: MessageCompose
        fullName: Office.MessageCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.AppointmentRead:interface'
        name: AppointmentRead
        fullName: Office.AppointmentRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.AppointmentCompose:interface'
        name: AppointmentCompose
        fullName: Office.AppointmentCompose
  - uid: 'outlook!Office.Mailbox#makeEwsRequestAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.UserProfile:interface'
    name: UserProfile