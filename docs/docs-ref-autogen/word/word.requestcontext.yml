### YamlMime:UniversalReference
ms.openlocfilehash: 766f82ade93b195202e34f4ce216d6481528906b
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 11/09/2018
ms.locfileid: "26228202"
items:
- uid: word.Word.RequestContext
  summary: RequestContext 对象方便了 Word 应用程序的请求。 Office 加载项和 Word 应用程序在两个不同的进程中运行，以来请求上下文，需要获得访问 Word 对象模型向外接程序。
  name: Word.RequestContext
  fullName: Word.RequestContext
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientRequestContext
  package: word
  remarks: "\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// The following example shows how the request context is used to load the text property on a paragraph collection.\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the paragraphs collection.\n    var paragraphs = context.document.body.paragraphs;\n\n    // Queue a commmand to load the text property for all of the paragraphs.\n    context.load(paragraphs, 'text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        // Queue a a set of commands to get the HTML of the first paragraph.\n        var html = paragraphs.items[0].getHtml();\n\n        // Synchronize the document state by executing the queued commands,\n        // and return a promise to indicate task completion.\n        return context.sync().then(function () {\n            console.log('Paragraph HTML: ' + html.value);\n        });\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n// Note: You must call load() after adding tracked objects.    \n```\n```javascript\n// The following example shows the sync method used twice: \n//   1) load the content controls collection with the text property for each content control, and\n//   2) clearing the contents of the first content control in the collection.\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the content controls collection.\n    var contentControls = context.document.contentControls;\n\n    // Queue a command to load the content controls collection.\n    contentControls.load('text');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n\n        if (contentControls.items.length === 0) {\n            console.log(\"There isn't a content control in this document.\");\n        } else {\n\n            // Queue a command to clear the contents of the first content control.\n            contentControls.items[0].clear();\n            // Synchronize the document state by executing the queued commands,\n            // and return a promise to indicate task completion.\n            return context.sync().then(function () {\n                console.log('Content control cleared of contents.');\n            });\n        }\n\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  children:
  - word.Word.RequestContext.constructor
  - word.Word.RequestContext.application
  - word.Word.RequestContext.document
- uid: word.Word.RequestContext.constructor
  summary: 构造[RequestContext](xref:word.Word.RequestContext)类的新实例
  name: constructor(url)
  fullName: constructor
  langs:
  - typeScript
  type: constructor
  syntax:
    content: 'constructor(url?: string);'
    parameters:
    - id: url
      description: ''
      type:
      - string
- uid: word.Word.RequestContext.application
  name: application
  fullName: application
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly application: Application;'
    return:
      type:
      - Application
- uid: word.Word.RequestContext.document
  name: document
  fullName: document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly document: Document;'
    return:
      type:
      - Document
