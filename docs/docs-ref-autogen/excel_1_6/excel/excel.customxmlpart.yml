### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPart
    summary: |-
      <span data-ttu-id="4ead9-101">表示工作簿中的自定义 XML 部件对象。</span><span class="sxs-lookup"><span data-stu-id="4ead9-101">Represents a custom XML part object in a workbook.</span></span>

      <span data-ttu-id="4ead9-102">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4ead9-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPart
    fullName: Excel.CustomXmlPart
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.CustomXmlPart.context
      - excel.Excel.CustomXmlPart.delete
      - excel.Excel.CustomXmlPart.getXml
      - excel.Excel.CustomXmlPart.id
      - excel.Excel.CustomXmlPart.load
      - excel.Excel.CustomXmlPart.load_1
      - excel.Excel.CustomXmlPart.load_2
      - excel.Excel.CustomXmlPart.namespaceUri
      - excel.Excel.CustomXmlPart.setXml
      - excel.Excel.CustomXmlPart.toJSON
  - uid: excel.Excel.CustomXmlPart.context
    summary: <span data-ttu-id="4ead9-103">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="4ead9-103">The request context associated with the object.</span></span> <span data-ttu-id="4ead9-104">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="4ead9-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.CustomXmlPart.delete
    summary: |-
      <span data-ttu-id="4ead9-105">删除自定义 XML 部件。</span><span class="sxs-lookup"><span data-stu-id="4ead9-105">Deletes the custom XML part.</span></span>

      <span data-ttu-id="4ead9-106">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4ead9-106">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4ead9-107">示例</span><span class="sxs-lookup"><span data-stu-id="4ead9-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
  - uid: excel.Excel.CustomXmlPart.getXml
    summary: |-
      <span data-ttu-id="4ead9-108">获取自定义 XML 部件的完整 XML 内容。</span><span class="sxs-lookup"><span data-stu-id="4ead9-108">Gets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="4ead9-109">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4ead9-109">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getXml()
    fullName: getXml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4ead9-110">示例</span><span class="sxs-lookup"><span data-stu-id="4ead9-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.id
    summary: |-
      <span data-ttu-id="4ead9-111">自定义 XML 部件的 ID。</span><span class="sxs-lookup"><span data-stu-id="4ead9-111">The custom XML part's ID.</span></span> <span data-ttu-id="4ead9-112">只读。</span><span class="sxs-lookup"><span data-stu-id="4ead9-112">Read-only.</span></span>

      <span data-ttu-id="4ead9-113">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4ead9-113">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4ead9-114">示例</span><span class="sxs-lookup"><span data-stu-id="4ead9-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.load
    summary: <span data-ttu-id="4ead9-115">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4ead9-116">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="4ead9-116">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="4ead9-117">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="4ead9-117">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="4ead9-118">`load(option?: string | string[]): Excel.CustomXmlPart`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-118">`load(option?: string | string[]): Excel.CustomXmlPart` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="4ead9-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="4ead9-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="4ead9-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only available on collection types.</span></span> <span data-ttu-id="4ead9-121">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="4ead9-121">It is similar to the preceding signature.</span></span> <span data-ttu-id="4ead9-122">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="4ead9-122">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="4ead9-123">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="4ead9-123">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="4ead9-124">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="4ead9-124">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartLoadOptions): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.CustomXmlPartLoadOptions
  - uid: excel.Excel.CustomXmlPart.load_1
    summary: '<span data-ttu-id="4ead9-125">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4ead9-126">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="4ead9-126">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="4ead9-127">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-127">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPart.load_2
    summary: '<span data-ttu-id="4ead9-128">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4ead9-129">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="4ead9-129">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="4ead9-130">其中, propertyNamesAndPaths 是用逗号分隔的字符串, 用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="4ead9-130">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.CustomXmlPart.namespaceUri
    summary: |-
      <span data-ttu-id="4ead9-131">自定义 XML 部件的命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="4ead9-131">The custom XML part's namespace URI.</span></span> <span data-ttu-id="4ead9-132">只读。</span><span class="sxs-lookup"><span data-stu-id="4ead9-132">Read-only.</span></span>

      <span data-ttu-id="4ead9-133">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4ead9-133">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: namespaceUri
    fullName: namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type:
          - string
  - uid: excel.Excel.CustomXmlPart.setXml
    summary: |-
      <span data-ttu-id="4ead9-134">设置自定义 XML 部件的完整 XML 内容。</span><span class="sxs-lookup"><span data-stu-id="4ead9-134">Sets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="4ead9-135">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4ead9-135">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setXml(xml)
    fullName: setXml(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXml(xml: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4ead9-136">示例</span><span class="sxs-lookup"><span data-stu-id="4ead9-136">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="4ead9-137">部件的 XML 内容。</span><span class="sxs-lookup"><span data-stu-id="4ead9-137">XML content for the part.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPart.toJSON
    summary: '<span data-ttu-id="4ead9-138">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="4ead9-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="4ead9-139">.</span><span class="sxs-lookup"><span data-stu-id="4ead9-139"></span></span> <span data-ttu-id="4ead9-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="4ead9-140"></span></span><!-- --><span data-ttu-id="4ead9-141">反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始 CustomXmlPart 对象是 API 对象, 但`toJSON`方法返回一个无格式的 JavaScript 对象 (类型为`Excel.Interfaces.CustomXmlPartData`</span><span class="sxs-lookup"><span data-stu-id="4ead9-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`</span></span><!-- --><span data-ttu-id="4ead9-142">), 其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="4ead9-142">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartData
        description: ''