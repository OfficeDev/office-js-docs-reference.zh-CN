### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Binding
    summary: |-
      <span data-ttu-id="a4a7f-101">表示工作簿中定义的 Office.js 绑定。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-101">Represents an Office.js binding that is defined in the workbook.</span></span>

      <span data-ttu-id="a4a7f-102">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Binding
    fullName: Excel.Binding
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Binding.context
      - excel.Excel.Binding.delete
      - excel.Excel.Binding.getRange
      - excel.Excel.Binding.getTable
      - excel.Excel.Binding.getText
      - excel.Excel.Binding.id
      - excel.Excel.Binding.load
      - excel.Excel.Binding.load_1
      - excel.Excel.Binding.load_2
      - excel.Excel.Binding.onDataChanged
      - excel.Excel.Binding.onSelectionChanged
      - excel.Excel.Binding.toJSON
      - excel.Excel.Binding.type
  - uid: excel.Excel.Binding.context
    summary: <span data-ttu-id="a4a7f-103">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-103">The request context associated with the object.</span></span> <span data-ttu-id="a4a7f-104">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Binding.delete
    summary: |-
      <span data-ttu-id="a4a7f-105">删除 binding 对象。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-105">Deletes the binding.</span></span>

      <span data-ttu-id="a4a7f-106">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-106">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Binding.getRange
    summary: |-
      <span data-ttu-id="a4a7f-107">返回绑定表示的区域。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-107">Returns the range represented by the binding.</span></span> <span data-ttu-id="a4a7f-108">如果绑定类型不正确，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-108">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="a4a7f-109">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4a7f-110">示例</span><span class="sxs-lookup"><span data-stu-id="a4a7f-110">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var range = binding.getRange();
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getTable
    summary: |-
      <span data-ttu-id="a4a7f-111">返回绑定表示的表。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-111">Returns the table represented by the binding.</span></span> <span data-ttu-id="a4a7f-112">如果绑定类型不正确，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-112">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="a4a7f-113">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTable()
    fullName: getTable()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4a7f-114">示例</span><span class="sxs-lookup"><span data-stu-id="a4a7f-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var table = binding.getTable();
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getText
    summary: |-
      <span data-ttu-id="a4a7f-115">返回绑定表示的文本。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-115">Returns the text represented by the binding.</span></span> <span data-ttu-id="a4a7f-116">如果绑定类型不正确，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-116">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="a4a7f-117">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4a7f-118">示例</span><span class="sxs-lookup"><span data-stu-id="a4a7f-118">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var text = binding.getText();
              binding.load('text');
              return ctx.sync().then(function() {
                  console.log(text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.id
    summary: |-
      <span data-ttu-id="a4a7f-119">表示绑定标识符。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-119">Represents binding identifier.</span></span> <span data-ttu-id="a4a7f-120">只读。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-120">Read-only.</span></span>

      <span data-ttu-id="a4a7f-121">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-121">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Binding.load
    summary: <span data-ttu-id="a4a7f-122">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-122">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a4a7f-123">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-123">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="a4a7f-124">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="a4a7f-124">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="a4a7f-125">`load(option?: string | string[]): Excel.Binding`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-125">`load(option?: string | string[]): Excel.Binding` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="a4a7f-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="a4a7f-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types.</span></span> <span data-ttu-id="a4a7f-128">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-128">It is similar to the preceding signature.</span></span> <span data-ttu-id="a4a7f-129">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-129">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a4a7f-130">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-130">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a4a7f-131">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-131">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.BindingLoadOptions): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.BindingLoadOptions
  - uid: excel.Excel.Binding.load_1
    summary: '<span data-ttu-id="a4a7f-132">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-132">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a4a7f-133">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-133">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4a7f-134">示例</span><span class="sxs-lookup"><span data-stu-id="a4a7f-134">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              binding.load('type');
              return ctx.sync().then(function() {
                  console.log(binding.type);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="a4a7f-135">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-135">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Binding.load_2
    summary: '<span data-ttu-id="a4a7f-136">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a4a7f-137">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-137">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="a4a7f-138">其中, propertyNamesAndPaths 是用逗号分隔的字符串, 用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-138">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Binding.onDataChanged
    summary: |-
      <span data-ttu-id="a4a7f-139">当绑定内的数据或格式变化时发生。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-139">Occurs when data or formatting within the binding is changed.</span></span>

      <span data-ttu-id="a4a7f-140">\[[API 集: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-140">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDataChanged
    fullName: onDataChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4a7f-141">示例</span><span class="sxs-lookup"><span data-stu-id="a4a7f-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");    
              const salesTable = sheet.tables.getItem("SalesTable");
              const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
              salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

              console.log("The data changed handler is registered.");

              await context.sync();
          });
          ```
  - uid: excel.Excel.Binding.onSelectionChanged
    summary: |-
      <span data-ttu-id="a4a7f-142">当绑定中的所选内容更改时发生。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-142">Occurs when the selected content in the binding is changed.</span></span>

      <span data-ttu-id="a4a7f-143">\[[API 集: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-143">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>
  - uid: excel.Excel.Binding.toJSON
    summary: '<span data-ttu-id="a4a7f-144">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="a4a7f-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="a4a7f-145">.</span><span class="sxs-lookup"><span data-stu-id="a4a7f-145"></span></span> <span data-ttu-id="a4a7f-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="a4a7f-146"></span></span><!-- --><span data-ttu-id="a4a7f-147">反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel. Binding 对象是 API 对象, 但`toJSON`方法返回一个简单的 JavaScript 对象 (类型为`Excel.Interfaces.BindingData`</span><span class="sxs-lookup"><span data-stu-id="a4a7f-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`</span></span><!-- --><span data-ttu-id="a4a7f-148">), 其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingData;'
      return:
        type:
          - excel.Excel.Interfaces.BindingData
        description: ''
  - uid: excel.Excel.Binding.type
    summary: |-
      <span data-ttu-id="a4a7f-149">返回绑定的类型。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-149">Returns the type of the binding.</span></span> <span data-ttu-id="a4a7f-150">有关详细信息, 请参阅 BindingType。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-150">See Excel.BindingType for details.</span></span> <span data-ttu-id="a4a7f-151">只读。</span><span class="sxs-lookup"><span data-stu-id="a4a7f-151">Read-only.</span></span>

      <span data-ttu-id="a4a7f-152">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4a7f-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
      return:
        type:
          - Excel.BindingType | "Range" | "Table" | "Text"