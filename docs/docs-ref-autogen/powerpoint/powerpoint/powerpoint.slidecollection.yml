### YamlMime:UniversalReference
items:
  - uid: 'powerpoint!PowerPoint.SlideCollection:class'
    summary: |-
      代表演示文稿中幻灯片的集合。

      \[[API 集： POWERPOINTAPI BETA (仅预览) ](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
    isPreview: true
    name: PowerPoint.SlideCollection
    fullName: PowerPoint.SlideCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'powerpoint!OfficeExtension.ClientObject:class'
    package: powerpoint!
    children:
      - 'powerpoint!PowerPoint.SlideCollection#context:member'
      - 'powerpoint!PowerPoint.SlideCollection#getCount:member(1)'
      - 'powerpoint!PowerPoint.SlideCollection#getItem:member(1)'
      - 'powerpoint!PowerPoint.SlideCollection#getItemAt:member(1)'
      - 'powerpoint!PowerPoint.SlideCollection#getItemOrNullObject:member(1)'
      - 'powerpoint!PowerPoint.SlideCollection#items:member'
      - 'powerpoint!PowerPoint.SlideCollection#load:member(1)'
      - 'powerpoint!PowerPoint.SlideCollection#load:member(2)'
      - 'powerpoint!PowerPoint.SlideCollection#load:member(3)'
      - 'powerpoint!PowerPoint.SlideCollection#toJSON:member(1)'
  - uid: 'powerpoint!PowerPoint.SlideCollection#context:member'
    summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
    isPreview: true
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'powerpoint!PowerPoint.RequestContext:class'
  - uid: 'powerpoint!PowerPoint.SlideCollection#getCount:member(1)'
    summary: |-
      获取集合中的幻灯片数。

      \[[API 集： POWERPOINTAPI BETA (仅预览) ](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
    isPreview: true
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'powerpoint!PowerPoint.SlideCollection#getCount~0:complex'
        description: 集合中的幻灯片数。
  - uid: 'powerpoint!PowerPoint.SlideCollection#getItem:member(1)'
    summary: |-
      使用其唯一 ID 获取幻灯片。 如果幻灯片不存在，则会引发异常。

      \[[API 集： POWERPOINTAPI BETA (仅预览) ](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
    isPreview: true
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): PowerPoint.Slide;'
      return:
        type:
          - 'powerpoint!PowerPoint.Slide:class'
        description: 具有唯一 ID 的幻灯片。 如果不存在这样的幻灯片，则会引发异常。
      parameters:
        - id: key
          description: 幻灯片的 ID。
          type:
            - string
  - uid: 'powerpoint!PowerPoint.SlideCollection#getItemAt:member(1)'
    summary: |-
      使用集合中的从零开始的索引获取幻灯片。 幻灯片的存储顺序与演示文稿中显示的顺序相同。 如果 index 超出范围，则会引发异常。

      \[[API 集： POWERPOINTAPI BETA (仅预览) ](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
    isPreview: true
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): PowerPoint.Slide;'
      return:
        type:
          - 'powerpoint!PowerPoint.Slide:class'
        description: 给定索引处的幻灯片。 如果 index 超出范围，则会引发异常。
      parameters:
        - id: index
          description: 集合中的幻灯片的索引。
          type:
            - number
  - uid: 'powerpoint!PowerPoint.SlideCollection#getItemOrNullObject:member(1)'
    summary: |-
      使用其唯一 ID 获取幻灯片。 返回一个对象，其 `isNullObject` 属性设置为 `true` 如果幻灯片不存在。

      \[[API 集： POWERPOINTAPI BETA (仅预览) ](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
    isPreview: true
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): PowerPoint.Slide;'
      return:
        type:
          - 'powerpoint!PowerPoint.Slide:class'
        description: 具有唯一 ID 的幻灯片。 如果不存在这样的幻灯片，则 `isNullObject` 返回其属性设置为的对象 `true` 。
      parameters:
        - id: id
          description: 幻灯片的 ID。
          type:
            - string
  - uid: 'powerpoint!PowerPoint.SlideCollection#items:member'
    summary: 获取此集合中已加载的子项。
    isPreview: true
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: PowerPoint.Slide[];'
      return:
        type:
          - 'powerpoint!PowerPoint.SlideCollection#items~0:complex'
  - uid: 'powerpoint!PowerPoint.SlideCollection#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
    isPreview: true
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: PowerPoint.Interfaces.SlideCollectionLoadOptions & PowerPoint.Interfaces.CollectionLoadOptions): PowerPoint.SlideCollection;'
      return:
        type:
          - 'powerpoint!PowerPoint.SlideCollection:class'
        description: ''
      parameters:
        - id: options
          description: 提供要加载的对象的属性的选项。
          type:
            - 'powerpoint!PowerPoint.SlideCollection#load~0:complex'
  - uid: 'powerpoint!PowerPoint.SlideCollection#load:member(2)'
    summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
    isPreview: true
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.SlideCollection;'
      return:
        type:
          - 'powerpoint!PowerPoint.SlideCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'powerpoint!PowerPoint.SlideCollection#load:member(3)'
    summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
    isPreview: true
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): PowerPoint.SlideCollection;'
      return:
        type:
          - 'powerpoint!PowerPoint.SlideCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select` 是一个以逗号分隔的字符串，用于指定要加载的属性，并且 `propertyNamesAndPaths.expand` 是一个以逗号分隔的字符串，用于指定要加载的导航属性。'
          type:
            - 'powerpoint!OfficeExtension.LoadOption:interface'
  - uid: 'powerpoint!PowerPoint.SlideCollection#toJSON:member(1)'
    summary: 重写 JavaScript `toJSON()` 方法，以便在将 API 对象传递到时提供更有用的输出 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，调用 `toJSON` 传递给它的对象的方法。 ) 而原始 `PowerPoint.SlideCollection` 对象是 API 对象，则该 `toJSON` 方法返回一个纯 JavaScript 对象 (类型为 `PowerPoint.Interfaces.SlideCollectionData`<!-- -->包含集合项中任何已加载属性的浅表的 "items" 数组 ) 。
    isPreview: true
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.SlideCollectionData;'
      return:
        type:
          - 'powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface'
        description: ''
references:
  - uid: 'powerpoint!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'powerpoint!PowerPoint.RequestContext:class'
    name: RequestContext
  - uid: 'powerpoint!PowerPoint.SlideCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'powerpoint!PowerPoint.Slide:class'
    name: PowerPoint.Slide
  - uid: 'powerpoint!PowerPoint.SlideCollection#items~0:complex'
    name: 'PowerPoint.Slide[]'
    fullName: 'PowerPoint.Slide[]'
    spec.typeScript:
      - uid: 'powerpoint!PowerPoint.Slide:class'
        name: PowerPoint.Slide
        fullName: PowerPoint.Slide
      - name: '[]'
        fullName: '[]'
  - uid: 'powerpoint!PowerPoint.SlideCollection:class'
    name: PowerPoint.SlideCollection
  - uid: 'powerpoint!PowerPoint.SlideCollection#load~0:complex'
    name: PowerPoint.Interfaces.SlideCollectionLoadOptions & PowerPoint.Interfaces.CollectionLoadOptions
    fullName: PowerPoint.Interfaces.SlideCollectionLoadOptions & PowerPoint.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface'
        name: PowerPoint.Interfaces.SlideCollectionLoadOptions
        fullName: PowerPoint.Interfaces.SlideCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
        name: PowerPoint.Interfaces.CollectionLoadOptions
        fullName: PowerPoint.Interfaces.CollectionLoadOptions
  - uid: 'powerpoint!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface'
    name: PowerPoint.Interfaces.SlideCollectionData