### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
interfaces:
- powerpoint!PowerPoint.AddSlideOptions:interface
- powerpoint!PowerPoint.InsertSlideOptions:interface
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.ShapeCollectionData:interface
- powerpoint!PowerPoint.Interfaces.ShapeCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.ShapeCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.ShapeData:interface
- powerpoint!PowerPoint.Interfaces.ShapeLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterData:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.TagCollectionData:interface
- powerpoint!PowerPoint.Interfaces.TagCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.TagCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.TagData:interface
- powerpoint!PowerPoint.Interfaces.TagLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.TagUpdateData:interface
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
- powerpoint!PowerPoint.Shape:class
- powerpoint!PowerPoint.ShapeCollection:class
- powerpoint!PowerPoint.Slide:class
- powerpoint!PowerPoint.SlideCollection:class
- powerpoint!PowerPoint.SlideLayout:class
- powerpoint!PowerPoint.SlideLayoutCollection:class
- powerpoint!PowerPoint.SlideMaster:class
- powerpoint!PowerPoint.SlideMasterCollection:class
- powerpoint!PowerPoint.Tag:class
- powerpoint!PowerPoint.TagCollection:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
- powerpoint!PowerPoint.InsertSlideFormatting:enum
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    创建并打开一个新演示文稿。 （可选）可以使用 base64 编码的 .pptx 文件预填充演示文稿。


    \[[API 集：PowerPointApi 1.1](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: 可选。 base64 编码的 .pptx 文件。 默认值为 null。
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: 使用新的 RequestContext 执行对 PowerPoint 对象模型执行动作的批处理脚本。 当实现承诺时，将释放在执行期间自动分配的任何跟踪对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: 一个接受 RequestContext 并返回承诺 (的函数，通常只是"context.sync () ") 。 context 参数便于对 PowerPoint 应用程序的请求。 由于 Office 加载项和 PowerPoint 应用程序在两个不同的进程中运行，因此 RequestContext 需要从加载项访问 PowerPoint 对象模型。
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: 使用以前创建的 API 对象的 RequestContext 对 PowerPoint 对象模型执行操作，执行批处理脚本。 当实现承诺时，将释放在执行期间自动分配的任何跟踪对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: 以前创建的 API 对象。 批处理将使用与传入对象相同的 RequestContext，这意味着应用于该对象的任何更改都将由"context.sync () "进行选取。
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: 一个接受 RequestContext 并返回承诺 (的函数，通常只是"context.sync () ") 。 context 参数便于对 PowerPoint 应用程序的请求。 由于 Office 加载项和 PowerPoint 应用程序在两个不同的进程中运行，因此 RequestContext 需要从加载项访问 PowerPoint 对象模型。
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: 使用以前创建的 API 对象的 RequestContext 对 PowerPoint 对象模型执行操作，执行批处理脚本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: 由以前创建的 API 对象数组。 将验证数组以确保所有对象共享同一上下文。 批处理将使用此共享 RequestContext，这意味着应用到这些对象的任何更改都将由"context.sync () "。
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: 一个接受 RequestContext 并返回承诺 (的函数，通常只是"context.sync () ") 。 context 参数便于对 PowerPoint 应用程序的请求。 由于 Office 加载项和 PowerPoint 应用程序在两个不同的进程中运行，因此 RequestContext 需要从加载项访问 PowerPoint 对象模型。
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 1ddf49e5e032061c0948d5dabba8fe72b1c4feae
  ms.sourcegitcommit: 0649842a034c42b1c1ec0b56c5ac3144ff51a849
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/12/2021
  ms.locfileid: "50756394"
