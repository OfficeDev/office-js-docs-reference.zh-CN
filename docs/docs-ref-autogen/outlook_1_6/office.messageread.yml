### YamlMime:UniversalReference
ms.openlocfilehash: f51efbd7c0089e4d502c3aac29240ac34eba3dae
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 02/13/2019
ms.locfileid: "29977760"
items:
- uid: Outlook_1_6.Office.MessageRead
  summary: >-
    邮件阅读模式[Office.context.mailbox.item](xref:Outlook_1_6.Office.Item)<!-- -->。


    **重要说明**： 这是一个内部的 Outlook 对象，不能直接通过现有接口公开。 您应将此视为 Office.context.mailbox.item 模式。 请参阅[模型](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.6/office.context.mailbox.item)页上的详细信息。
  name: Office.MessageRead
  fullName: Office.MessageRead
  langs:
  - typeScript
  type: interface
  extends:
  - Message
  - 'ItemRead '
  package: Outlook_1_6
  children:
  - Outlook_1_6.Office.MessageRead.displayReplyAllForm
  - Outlook_1_6.Office.MessageRead.displayReplyForm
  - Outlook_1_6.Office.MessageRead.getEntities
  - Outlook_1_6.Office.MessageRead.getEntitiesByType
  - Outlook_1_6.Office.MessageRead.getFilteredEntitiesByName
  - Outlook_1_6.Office.MessageRead.getRegExMatches
  - Outlook_1_6.Office.MessageRead.getRegExMatchesByName
  - Outlook_1_6.Office.MessageRead.getSelectedEntities
  - Outlook_1_6.Office.MessageRead.getSelectedRegExMatches
  - Outlook_1_6.Office.MessageRead.loadCustomPropertiesAsync
  - Outlook_1_6.Office.MessageRead.attachments
  - Outlook_1_6.Office.MessageRead.body
  - Outlook_1_6.Office.MessageRead.cc
  - Outlook_1_6.Office.MessageRead.conversationId
  - Outlook_1_6.Office.MessageRead.dateTimeCreated
  - Outlook_1_6.Office.MessageRead.dateTimeModified
  - Outlook_1_6.Office.MessageRead.from
  - Outlook_1_6.Office.MessageRead.internetMessageId
  - Outlook_1_6.Office.MessageRead.itemClass
  - Outlook_1_6.Office.MessageRead.itemId
  - Outlook_1_6.Office.MessageRead.itemType
  - Outlook_1_6.Office.MessageRead.normalizedSubject
  - Outlook_1_6.Office.MessageRead.notificationMessages
  - Outlook_1_6.Office.MessageRead.sender
  - Outlook_1_6.Office.MessageRead.subject
  - Outlook_1_6.Office.MessageRead.to
- uid: Outlook_1_6.Office.MessageRead.displayReplyAllForm
  summary: >-
    显示答复窗体，其中包括所选邮件的发件人和所有收件人或所选约会的组织者和所有与会者。


    在 Outlook Web App 中，答复窗体显示为包含 3 列视图的弹出式窗体以及包含 2 列或 1 列视图的弹出式窗体。


    如果任意字符串参数超出其限制，displayReplyAllForm 将引发异常。


    当在 formData.attachments 参数中指定附件时，Outlook 和 Outlook Web App 尝试下载所有附件并将其附加到答复窗体。如果无法添加任何附件，则在窗体 UI 中显示错误。如果这不可能，则不引发错误消息。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyAllForm(formData)
  fullName: displayReplyAllForm(formData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: 一个包含文本和 HTML 且表示答复窗体的正文的字符串。 字符串仅限于 32 KB 或[Office.ReplyFormData](xref:Outlook_1_6.Office.ReplyFormData)对象包含正文或附件数据和回调函数
      type:
      - string | ReplyFormData
- uid: Outlook_1_6.Office.MessageRead.displayReplyForm
  summary: >-
    显示答复窗体，其中仅包括所选邮件的发件人或所选约会的组织者。


    在 Outlook Web App 中，答复窗体显示为包含 3 列视图的弹出式窗体以及包含 2 列或 1 列视图的弹出式窗体。


    如果任意字符串参数超出其限制，displayReplyForm 将引发异常。


    当在 formData.attachments 参数中指定附件时，Outlook 和 Outlook Web App 尝试下载所有附件并将其附加到答复窗体。如果无法添加任何附件，则在窗体 UI 中显示错误。如果这不可能，则不引发错误消息。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyForm(formData)
  fullName: displayReplyForm(formData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: 一个包含文本和 HTML 且表示答复窗体的正文的字符串。 字符串限制为 32 KB。 或[Office.ReplyFormData](xref:Outlook_1_6.Office.ReplyFormData)对象包含正文或附件数据和回调函数。
      type:
      - string | ReplyFormData
- uid: Outlook_1_6.Office.MessageRead.getEntities
  summary: >-
    获取在所选项目的正文中找到的实体。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>
  name: getEntities()
  fullName: getEntities()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type:
      - Entities
      description: ''
- uid: Outlook_1_6.Office.MessageRead.getEntitiesByType
  summary: >-
    获取所选项目的正文中找到的指定实体类型的所有实体的数组。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>受限</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>阅读</td></tr></table>


    当使用此方法的最低权限级别受限时，某些实体类型需要 ReadItem 才能进行访问，如下表中所指定。


    <table> <tr> <th>entityType 的值</th> <th>返回的数组中对象的类型</th> <th>所需的权限级别</th> </tr> <tr> <td>Address</td> <td>String</td> <td>受限</td> </tr> <tr> <td>联系人</td> <td>联系人</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>受限</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>受限</td> </tr> </table>

    #### 示例


    ```javascript

    // The following example shows how to access an array of strings that represent postal addresses

    // in the current item's body.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            // Get an array of strings that represent postal addresses in the current item's body.
            var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
            // Continue processing the array of addresses.
        });
    };

    ```
  name: getEntitiesByType(entityType)
  fullName: getEntitiesByType(entityType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: 如果 entityType 中传递的值不是有效 EntityType 枚举的成员，则该方法返回 null。 如果指定类型的任何实体都不存在于该项目的正文中，该方法将返回空数组。 否则，返回的数组中的对象类型取决于请求 entityType 参数中的实体的类型。
    parameters:
    - id: entityType
      description: EntityType 枚举值之一。
      type:
      - MailboxEnums.EntityType
- uid: Outlook_1_6.Office.MessageRead.getFilteredEntitiesByName
  summary: >-
    返回传递清单 XML 文件中定义的命名筛选器的所选项目中的已知实体。


    getFilteredEntitiesByName 方法返回匹配在具有指定 FilterName 元素值的清单 XML 文件中的 ItemHasKnownEntity 规则元素中定义的正则表达式的实体。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>
  name: getFilteredEntitiesByName(name)
  fullName: getFilteredEntitiesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: 如果具有匹配 name 参数的 FilterName 元素值的清单中没有任何 ItemHasKnownEntity 元素，则该方法返回 null。如果 name 参数匹配清单中的 ItemHasKnownEntity 元素，但在匹配的当前项目中没有实体，则该方法返回一个空数组。
    parameters:
    - id: name
      description: 定义筛选器匹配的 ItemHasKnownEntity 规则元素的名称。
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.getRegExMatches
  summary: >-
    返回所选项目中匹配在清单 XML 文件中定义的正则表达式的字符串值。


    getRegExMatches 方法返回匹配在清单 XML 文件中的每个 ItemHasRegularExpressionMatch 或 ItemHasKnownEntity 规则元素中定义的正则表达式的字符串。对于 ItemHasRegularExpressionMatch 规则，匹配字符串必须发生在该规则指定的项目的属性中。PropertyName 简单类型定义支持的属性。


    如果在项目的正文属性上指定 ItemHasRegularExpressionMatch 规则，则正则表达式应进一步筛选正文并应尝试返回该项目的整个正文。使用正则表达式（如 .*）获取项目的整个正文并不总是返回预期的结果。而是使用 Body.getAsync 方法检索整个正文。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veges = allMatches.veggies;

    ```
  name: getRegExMatches()
  fullName: getRegExMatches()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type:
      - any
      description: 一个包含匹配在清单 XML 文件中定义的正则表达式的字符串数组的对象。每个数组的名称等于匹配 ItemHasRegularExpressionMatch 规则的 RegExName 属性或匹配 ItemHasKnownEntity 规则的 FilterName 属性的相应值。
- uid: Outlook_1_6.Office.MessageRead.getRegExMatchesByName
  summary: >-
    返回匹配在清单 XML 文件中定义的命名正则表达式的所选项目中的字符串值。


    getRegExMatchesByName 方法返回匹配在具有指定 RegExName 元素值的清单 XML 文件中的 ItemHasRegularExpressionMatch 规则元素中定义的正则表达式的字符串。


    如果在项目的正文属性上指定 ItemHasRegularExpressionMatch 规则，则正则表达式应进一步筛选正文并应尝试返回该项目的整个正文。使用正则表达式（如 .*）获取项目的整个正文并不总是返回预期的结果。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```
  name: getRegExMatchesByName(name)
  fullName: getRegExMatchesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    return:
      type:
      - string[]
      description: 一个包含匹配在清单 XML 文件中定义的正则表达式的字符串的数组。
    parameters:
    - id: name
      description: 定义筛选器匹配的 ItemHasRegularExpressionMatch 规则元素的名称。
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.getSelectedEntities
  summary: >-
    获取在用户已选择的突出显示匹配项中找到的实体。突出显示匹配项适用于上下文加载项。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following example accesses the addresses entities in the highlighted

    // match selected by the user.

    var addresses = Office.context.mailbox.item.getSelectedEntities().addresses;

    ```
  name: getSelectedEntities()
  fullName: getSelectedEntities()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedEntities(): Entities;'
    return:
      type:
      - Entities
      description: ''
- uid: Outlook_1_6.Office.MessageRead.getSelectedRegExMatches
  summary: >-
    返回突出显示匹配项中匹配在清单 XML 文件中定义的正则表达式的字符串值。突出显示匹配项适用于上下文外接程序。


    GetSelectedRegExMatches 方法将返回匹配在清单 XML 文件中每个 ItemHasRegularExpressionMatch 或 ItemHasKnownEntity 规则元素中定义的正则表达式的字符串。 ItemHasRegularExpressionMatch 规则，匹配的字符串有发生该规则指定项目的属性。 PropertyName 简单类型定义的受支持的属性。


    如果在项目的正文属性上指定 ItemHasRegularExpressionMatch 规则，则正则表达式应进一步筛选正文并应尝试返回该项目的整个正文。使用正则表达式（如 .*）获取项目的整个正文并不总是返回预期的结果。而是使用 Body.getAsync 方法检索整个正文。


    **注意**： 此方法不支持在适用于 iOS 的 Outlook 或 Outlook for Android。


    \[[API 集： 邮箱 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following example shows how to access the array of matches for the

    // regular expression rule elements `fruits` and `veggies`, which are

    // specified in the manifest.

    var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();

    var fruits = selectedMatches.fruits;

    var veggies = selectedMatches.veggies;

    ```
  name: getSelectedRegExMatches()
  fullName: getSelectedRegExMatches()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedRegExMatches(): any;'
    return:
      type:
      - any
      description: 一个包含匹配在清单 XML 文件中定义的正则表达式的字符串数组的对象。每个数组的名称等于匹配 ItemHasRegularExpressionMatch 规则的 RegExName 属性或匹配 ItemHasKnownEntity 规则的 FilterName 属性的相应值。
- uid: Outlook_1_6.Office.MessageRead.loadCustomPropertiesAsync
  summary: >-
    异步加载所选项目上此外接程序的自定义属性。


    自定义属性基于每个应用、每个项目存储为键/值对。此方法在回调中返回 CustomProperties，该回调提供访问特定于当前项目和当前外接程序的自定义属性的方法。自定义属性未在项目上加密，因此这不应用作安全存储。


    自定义属性作为 asyncResult.value 属性中的 CustomProperties 对象提供。此对象可用于获取、设置以及从项目中删除自定义属性，并将自定义属性集的更改重新保存到服务器。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: 该方法完成后，使用类型 Office.AsyncResult 的单个参数调用中的 callback 参数传递的函数。
      type:
      - '(result: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: 可选。 开发人员可以提供他们想要在回调函数中访问的任何对象。 AsyncResult.asyncContext 属性的回调函数中，可以访问此对象。
      type:
      - any
- uid: Outlook_1_6.Office.MessageRead.attachments
  summary: >-
    获取项目的附件作为数组。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>


    **注意**： 由于潜在的安全问题阻止 outlook 并因此不返回的某些类型的文件。 有关详细信息，请参阅[在 Outlook 中被阻止的附件](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->。

    #### <a name="examples"></a>示例


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```
  name: attachments
  fullName: attachments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type:
      - AttachmentDetails[]
- uid: Outlook_1_6.Office.MessageRead.body
  summary: >-
    获取一个提供用于处理项目正文的方法的对象。


    \[[API 集： 邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_6.Office.MessageRead.cc
  summary: >-
    提供对邮件的抄送 (Cc) 收件人的访问权限。 对象的类型和访问级别取决于当前项目的模式。


    cc 属性返回包含邮件抄送行上所列的每个收件人的 EmailAddressDetails 对象的数组。集合上限为 100 个成员。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    console.log(JSON.stringify(Office.context.mailbox.item.cc));

    ```
  name: cc
  fullName: cc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cc: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
- uid: Outlook_1_6.Office.MessageRead.conversationId
  summary: >-
    获取包含特定消息的电子邮件会话的标识符。


    如果在阅读窗体或撰写窗体的回复中激活邮件应用程序，则此属性可以获得一个整数值。如果用户随后更改了回复邮件的主题（若发送回复），则该邮件的对话 ID 将改变且之前获取的值将不适用。


    对于撰写窗体的新项目，此属性获得一个 null 值。如果用户设置一个主题并保存该项目，conversationId 属性将返回一个值。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var conversationId = Office.context.mailbox.item.conversationId;

    console.log("conversationId: " + conversationId);

    ```
  name: conversationId
  fullName: conversationId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'conversationId: string;'
    return:
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.dateTimeCreated
  summary: >-
    获取项创建的日期和时间。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;

    console.log("Date and time created: " + dateTimeCreated);

    ```
  name: dateTimeCreated
  fullName: dateTimeCreated
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_6.Office.MessageRead.dateTimeModified
  summary: >-
    获取项最近一次修改的日期和时间。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>


    **注意**： 此成员不支持适用于 iOS 的 Outlook 或 Outlook for Android。

    #### <a name="examples"></a>示例


    ```javascript

    var dateTimeModified = Office.context.mailbox.item.dateTimeModified;

    console.log("Date and time modified: " + dateTimeModified);

    ```
  name: dateTimeModified
  fullName: dateTimeModified
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_6.Office.MessageRead.from
  summary: >-
    获取邮件发件人的电子邮件地址。


    from 和 sender 属性表示同一个人，邮件由代理人发送除外。在此情况下，from 属性表示代理程序，而 sender 属性表示代理人。


    **注意**： 中的 EmailAddressDetails 对象的 recipientType 属性从属性未定义。


    从属性返回的 EmailAddressDetails 对象。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var from = Office.context.mailbox.item.from;

    console.log("From " + from);

    ```
  name: from
  fullName: from
  langs:
  - typeScript
  type: property
  syntax:
    content: 'from: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_6.Office.MessageRead.internetMessageId
  summary: >-
    获取电子邮件的 Internet 消息标识符。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var internetMessageId = Office.context.mailbox.item.internetMessageId;

    console.log("internetMessageId: " + internetMessageId);

    ```
  name: internetMessageId
  fullName: internetMessageId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'internetMessageId: string;'
    return:
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.itemClass
  summary: >-
    获取选定项目的 Exchange Web 服务项目类。


    您可以创建用于扩展默认邮件类别的自定义邮件类别，例如，自定义约会邮件类别 IPM.Appointment.Contoso。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>


    itemClass 属性指定所选项目的邮件类别。以下是邮件或约会项目的默认邮件类别。


    <table> <tr> <th>Type</th> <th>说明</th> <th>项类</th> </tr> <tr> <td>约会项目</td> <td>这些是日历项目的项类 IPM。约会或 IPM。Appointment.Occurrence。</td> <td>IPM。约会，IPM。Appointment.Occurrence</td> </tr> <tr> <td>邮件项目</td> <td>这些项目包括具有默认邮件类别 IPM.Note 的电子邮件，以及使用 IPM.Schedule.Meeting 作为基础邮件类别的会议请求、响应和取消。</td> <td>IPM。请注意，IPM。Schedule.Meeting.Request,IPM。Schedule.Meeting.Neg,IPM。Schedule.Meeting.Pos,IPM。Schedule.Meeting.Tent,IPM。Schedule.Meeting.Canceled</td> </tr> </table>

    #### 示例


    ```javascript

    var itemClass = Office.context.mailbox.item.itemClass;

    console.log("Item class: " + itemClass);

    ```
  name: itemClass
  fullName: itemClass
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemClass: string;'
    return:
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.itemId
  summary: >-
    获取当前项目的 Exchange Web 服务项目标识符。


    ItemId 属性不可用在撰写模式。 如果所需的项标识符，saveAsync 方法可用于将项目保存到存储库，将返回的项标识符的 asyncResult.value 参数的回调函数中。


    **注意**： itemId 属性返回的标识符是 Exchange Web 服务的项标识符相同。 ItemId 属性不与 Outlook 条目 ID 或使用 Outlook REST API 的 ID。 使用此值进行 REST API 调用前，应使用 Office.context.mailbox.convertToRestId 对它进行转换。 有关详细信息，请参阅[使用 Outlook REST Api 从 Outlook 外接程序](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  name: itemId
  fullName: itemId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemId: string;'
    return:
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.itemType
  summary: >-
    获取实例表示的项的类型。


    itemType 属性返回其中一个 ItemType 枚举值，指示 item 对象实例是邮件还是约会。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // do something
    } else {
        // do something else
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_6.Office.MessageRead.normalizedSubject
  summary: >-
    获取主题的项目，移除所有前缀 (包括 RE: 和 FWD:)。


    normalizedSubject 属性获取包含由电子邮件程序添加的任何标准前缀（如 RE: 和 FW:）的项目主题。若要获取包含完整前缀的项目主题，请使用 subject 属性。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var normalizedSubject = Office.context.mailbox.item.normalizedSubject;

    console.log("Normalized subject: " + normalizedSubject);

    ```
  name: normalizedSubject
  fullName: normalizedSubject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.notificationMessages
  summary: >-
    获取项目的通知邮件。


    \[[API 集： 邮箱 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>撰写或阅读</td></tr></table>

    ####示例


    ```javascript

    // Get all notifications

    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );

    ```
  name: notificationMessages
  fullName: notificationMessages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type:
      - NotificationMessages
- uid: Outlook_1_6.Office.MessageRead.sender
  summary: >-
    获取电子邮件发件人的电子邮件地址。


    from 和 sender 属性表示同一个人，邮件由代理人发送除外。在此情况下，from 属性表示代理程序，而 sender 属性表示代理人。


    **注意**： 发件人属性中的 EmailAddressDetails 对象的 recipientType 属性未定义。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    var senderName = Office.context.mailbox.item.sender.displayName;

    var senderAddress = Office.context.mailbox.item.sender.emailAddress;

    console.log("Sender: " + senderName + " (" + senderAddress + ")");

    ```
  name: sender
  fullName: sender
  langs:
  - typeScript
  type: property
  syntax:
    content: 'sender: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_6.Office.MessageRead.subject
  summary: >-
    获取项目的主题字段中显示的说明。


    subject 属性获取或设置由电子邮件服务器发送项目时的整个主题。


    subject 属性返回一个字符串。使用 normalizedSubject 属性获取不带任何前导前缀（如 RE: 和 FW:）的主题。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    // The following JavaScript code example shows how to access the

    // `subject` property of the current item in Outlook.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            var subject = item.subject;
            // Continue with processing the subject of the current item,
            // which can be a message or appointment.
        });
    };

    ```
  name: subject
  fullName: subject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'subject: string;'
    return:
      type:
      - string
- uid: Outlook_1_6.Office.MessageRead.to
  summary: >-
    提供对邮件的“收件人”行上的收件人的访问权限。 对象的类型和访问级别取决于当前项目的模式。


    to 属性返回包含邮件收件人行上所列的每个收件人的 EmailAddressDetails 对象的数组。集合上限为 100 个成员。


    \[[API 集： 邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>邮件阅读</td></tr></table>

    ####示例


    ```javascript

    console.log(JSON.stringify(Office.context.mailbox.item.to));

    ```
  name: to
  fullName: to
  langs:
  - typeScript
  type: property
  syntax:
    content: 'to: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
