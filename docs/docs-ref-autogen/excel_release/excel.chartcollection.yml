### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.ChartCollection
    summary: |-
      工作表中的所有 chart 对象的集合。

      \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.ChartCollection
    fullName: Excel.ChartCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.ChartCollection.add
      - excel_release.Excel.ChartCollection.add_1
      - excel_release.Excel.ChartCollection.context
      - excel_release.Excel.ChartCollection.count
      - excel_release.Excel.ChartCollection.getCount
      - excel_release.Excel.ChartCollection.getItem
      - excel_release.Excel.ChartCollection.getItemAt
      - excel_release.Excel.ChartCollection.getItemOrNullObject
      - excel_release.Excel.ChartCollection.items
      - excel_release.Excel.ChartCollection.load
      - excel_release.Excel.ChartCollection.load_1
      - excel_release.Excel.ChartCollection.load_2
      - excel_release.Excel.ChartCollection.onActivated
      - excel_release.Excel.ChartCollection.onAdded
      - excel_release.Excel.ChartCollection.onDeactivated
      - excel_release.Excel.ChartCollection.onDeleted
      - excel_release.Excel.ChartCollection.toJSON
  - uid: excel_release.Excel.ChartCollection.add
    summary: |-
      创建新图表。

      \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(type, sourceData, seriesBy)'
    fullName: 'add(type, sourceData, seriesBy)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ChartType, sourceData: Range, seriesBy?: Excel.ChartSeriesBy): Excel.Chart;'
      return:
        type:
          - excel.Excel.Chart
        description: ''
      parameters:
        - id: type
          description: '表示图表的类型。 有关详细信息, 请参阅 ChartType。'
          type:
            - excel.Excel.ChartType
        - id: sourceData
          description: 对应于源数据的 Range 对象。
          type:
            - Range
        - id: seriesBy
          description: '可选。 指定列或行在图表上用作数据系列的方式。 有关详细信息, 请参阅 ChartSeriesBy。'
          type:
            - excel.Excel.ChartSeriesBy
  - uid: excel_release.Excel.ChartCollection.add_1
    summary: |-
      创建新图表。

      \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(typeString, sourceData, seriesBy)'
    fullName: 'add(typeString, sourceData, seriesBy)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(typeString: "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel", sourceData: Range, seriesBy?: "Auto" | "Columns" | "Rows"): Excel.Chart;'
      return:
        type:
          - excel.Excel.Chart
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // Add a chart of chartType "ColumnClustered" on worksheet "Charts" 
          // with sourceData from Range "A1:B4" and seriresBy is set to be "auto".
          Excel.run(function (ctx) { 
              var rangeSelection = "A1:B4";
              var range = ctx.workbook.worksheets.getItem(sheetName)
                  .getRange(rangeSelection);
              var chart = ctx.workbook.worksheets.getItem(sheetName)
                  .charts.add("ColumnClustered", range, "auto");    return ctx.sync().then(function() {
                      console.log("New Chart Added");
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: typeString
          description: '表示图表的类型。 有关详细信息, 请参阅 ChartType。'
          type:
            - '"Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel"'
        - id: sourceData
          description: 对应于源数据的 Range 对象。
          type:
            - Range
        - id: seriesBy
          description: '可选。 指定列或行在图表上用作数据系列的方式。 有关详细信息, 请参阅 ChartSeriesBy。'
          type:
            - '"Auto" | "Columns" | "Rows"'
  - uid: excel_release.Excel.ChartCollection.context
    summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.ChartCollection.count
    summary: |-
      返回工作表中的图表数。 只读。

      \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.ChartCollection.getCount
    summary: |-
      返回工作表中的图表数。

      \[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel_release.Excel.ChartCollection.getItem
    summary: |-
      使用图表名称获取图表。 如果存在多个名称相同的图表，将返回第一个图表。

      \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Excel.Chart;'
      return:
        type:
          - excel.Excel.Chart
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var chartname = 'Chart1';
              var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem(chartname);
              return ctx.sync().then(function() {
                      console.log(chart.height);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var chartId = 'SampleChartId';
              var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItem(chartId);
              return ctx.sync().then(function() {
                      console.log(chart.height);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var lastPosition = ctx.workbook.worksheets.getItem("Sheet1").charts.count - 1;
              var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItemAt(lastPosition);
              return ctx.sync().then(function() {
                      console.log(chart.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: 要检索的图表的名称。
          type:
            - string
  - uid: excel_release.Excel.ChartCollection.getItemAt
    summary: |-
      根据其在集合中的位置获取图表。

      \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Chart;'
      return:
        type:
          - excel.Excel.Chart
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var lastPosition = ctx.workbook.worksheets.getItem("Sheet1").charts.count - 1;
              var chart = ctx.workbook.worksheets.getItem("Sheet1").charts.getItemAt(lastPosition);
              return ctx.sync().then(function() {
                      console.log(chart.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 要检索的对象的索引值。 从零开始编制索引。
          type:
            - number
  - uid: excel_release.Excel.ChartCollection.getItemOrNullObject
    summary: |-
      使用图表名称获取图表。 如果存在多个名称相同的图表，将返回第一个图表。 如果图表不存在, 将返回一个 null 对象。

      \[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(name)
    fullName: getItemOrNullObject(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(name: string): Excel.Chart;'
      return:
        type:
          - excel.Excel.Chart
        description: ''
      parameters:
        - id: name
          description: 要检索的图表的名称。
          type:
            - string
  - uid: excel_release.Excel.ChartCollection.items
    summary: 获取此集合中已加载的子项。
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Chart[];'
      return:
        type:
          - 'Excel.Chart[]'
  - uid: excel_release.Excel.ChartCollection.load
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性之前，你必须调用“context.sync()”。
    remarks: |-
      除了此签名之外, 此方法还具有以下签名:

      `load(option?: string | string[]): Excel.ChartCollection`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。

      `load(option?: { select?: string; expand?: string; }): Excel.ChartCollection`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartCollection`-仅适用于集合类型。 它类似于前面的签名。 top 指定结果中可包含的集合项的最大数量。 选项。 skip 指定要跳过且不包含在结果中的项目数。 如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ChartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.ChartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel_release.Excel.ChartCollection.load_1
    summary: '将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前, 必须先调用。'
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var charts = ctx.workbook.worksheets.getItem("Sheet1").charts;
              charts.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < charts.items.length; i++)
                  {
                      console.log(charts.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of charts
          Excel.run(function (ctx) { 
              var charts = ctx.workbook.worksheets.getItem("Sheet1").charts;
              charts.load('count');
              return ctx.sync().then(function() {
                  console.log("charts: Count= " + charts.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。'
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.ChartCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel_release.Excel.ChartCollection.onActivated
    summary: |-
      在激活图表时发生。

      \[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (context){
              context.workbook.worksheets.getActiveWorksheet()
                  .charts.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The ID of the active chart is: " + event.chartId)
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.ChartCollection.onAdded
    summary: |-
      将新图表添加到工作表时发生此事件。

      \[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onAdded
    fullName: onAdded
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.ChartAddedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.ChartAddedEventArgs>
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (context){
              context.workbook.worksheets.getActiveWorksheet()
                  .charts.onAdded.add(function (event) {
                  return Excel.run((context) => {
                      console.log("A chart has been added with ID: " + event.chartId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.ChartCollection.onDeactivated
    summary: |-
      当停用图表时发生此事件。

      \[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (context){
              context.workbook.worksheets.getActiveWorksheet()
                  .charts.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The chart with this ID was deactivated: " + event.chartId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.ChartCollection.onDeleted
    summary: |-
      在删除图表时发生。

      \[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onDeleted
    fullName: onDeleted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.ChartDeletedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.ChartDeletedEventArgs>
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (context){
              context.workbook.worksheets.getActiveWorksheet()
                  .charts.onDeleted.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The chart with this ID was deleted: " + event.chartId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel_release.Excel.ChartCollection.toJSON
    summary: '重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始`Excel.ChartCollection`对象是 API 对象, 但`toJSON`方法返回一个无格式的 JavaScript 对象 (类型为`Excel.Interfaces.ChartCollectionData`<!-- -->), 其中包含集合的项中所有加载属性的浅表副本的 "items" 数组。'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ChartCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.ChartCollectionData
        description: ''