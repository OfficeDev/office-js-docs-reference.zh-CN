### YamlMime:UniversalReference
ms.openlocfilehash: 21ad62e657f0c036502f9888a70ceabe0dbd0fb2
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 02/20/2019
ms.locfileid: "30109995"
items:
- uid: excel_release.Excel.RangeBorderCollection
  summary: >-
    表示构成区域边框的 Border 对象。


    \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.RangeBorderCollection
  fullName: Excel.RangeBorderCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.RangeBorderCollection.context
  - excel_release.Excel.RangeBorderCollection.count
  - excel_release.Excel.RangeBorderCollection.getItem
  - excel_release.Excel.RangeBorderCollection.getItem_1
  - excel_release.Excel.RangeBorderCollection.getItemAt
  - excel_release.Excel.RangeBorderCollection.items
  - excel_release.Excel.RangeBorderCollection.load
  - excel_release.Excel.RangeBorderCollection.load_1
  - excel_release.Excel.RangeBorderCollection.load_2
  - excel_release.Excel.RangeBorderCollection.toJSON
- uid: excel_release.Excel.RangeBorderCollection.context
  summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.RangeBorderCollection.count
  summary: >-
    集合中的 border 对象数量。只读。


    \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.RangeBorderCollection.getItem
  summary: >-
    使用其名称获取 border 对象


    \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(index)
  fullName: getItem(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: Excel.BorderIndex): Excel.RangeBorder;'
    return:
      type:
      - excel.Excel.RangeBorder
      description: "\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var borderName = 'EdgeTop';\n    var border = range.format.borders.getItem(borderName);\n    border.load('style');\n    return ctx.sync().then(function() {\n            console.log(border.style);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: 要检索的 border 对象的索引值。 有关详细信息, 请参阅 BorderIndex。
      type:
      - excel.Excel.BorderIndex
- uid: excel_release.Excel.RangeBorderCollection.getItem_1
  summary: >-
    使用其名称获取 border 对象


    \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(indexString)
  fullName: getItem(indexString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(indexString: "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight" | "InsideVertical" | "InsideHorizontal" | "DiagonalDown" | "DiagonalUp"): Excel.RangeBorder;'
    return:
      type:
      - excel.Excel.RangeBorder
      description: ''
    parameters:
    - id: indexString
      description: 要检索的 border 对象的索引值。 有关详细信息, 请参阅 BorderIndex。
      type:
      - "\"EdgeTop\" | \"EdgeBottom\" | \"EdgeLeft\" | \"EdgeRight\" | \"InsideVertical\" | \"InsideHorizontal\" | \"DiagonalDown\" | \"DiagonalUp\""
- uid: excel_release.Excel.RangeBorderCollection.getItemAt
  summary: >-
    使用其索引获取 border 对象


    \[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.RangeBorder;'
    return:
      type:
      - excel.Excel.RangeBorder
      description: "\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var border = range.format.borders.getItemAt(0);\n    border.load('sideIndex');\n    return ctx.sync().then(function() {\n        console.log(border.sideIndex);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: 要检索的对象的索引值。从零开始编制索引。
      type:
      - number
- uid: excel_release.Excel.RangeBorderCollection.items
  summary: 获取此集合中的已加载子项目。
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.RangeBorder[];'
    return:
      type:
      - Excel.RangeBorder[]
- uid: excel_release.Excel.RangeBorderCollection.load
  summary: 对命令进行排队, 以加载对象的指定属性。 在读取属性之前, 必须先调用 "context, sync ()"。
  remarks: >-
    除了此签名之外, 此方法还具有以下签名:


    `load(option?: string | string[]): Excel.RangeBorderCollection`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。


    `load(option?: { select?: string; expand?: string; }): Excel.RangeBorderCollection`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeBorderCollection`-仅适用于集合类型。 它类似于前面的签名。 top 指定结果中可包含的集合项的最大数量。 选项。 skip 指定要跳过且不包含在结果中的项目数。 如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.RangeBorderCollection;'
    return:
      type:
      - excel.Excel.RangeBorderCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel_release.Excel.RangeBorderCollection.load_1
  summary: 对命令进行排队, 以加载对象的指定属性。 在读取属性`context.sync()`之前, 必须先调用。
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.RangeBorderCollection;'
    return:
      type:
      - excel.Excel.RangeBorderCollection
      description: "\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var borders = range.format.borders;\n    border.load('items');\n    return ctx.sync().then(function() {\n        console.log(borders.count);\n        for (var i = 0; i < borders.items.length; i++)\n        {\n            console.log(borders.items[i].sideIndex);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// The example below adds grid border around the range.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.format.borders.getItem('InsideHorizontal').style = 'Continuous';\n    range.format.borders.getItem('InsideVertical').style = 'Continuous';\n    range.format.borders.getItem('EdgeBottom').style = 'Continuous';\n    range.format.borders.getItem('EdgeLeft').style = 'Continuous';\n    range.format.borders.getItem('EdgeRight').style = 'Continuous';\n    range.format.borders.getItem('EdgeTop').style = 'Continuous';\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: 一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。
      type:
      - string | string[]
- uid: excel_release.Excel.RangeBorderCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.RangeBorderCollection;'
    return:
      type:
      - excel.Excel.RangeBorderCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel_release.Excel.RangeBorderCollection.toJSON
  summary: 重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到`JSON.stringify()` <!-- -->时提供更有用的输出。 (`JSON.stringify`<!-- -->反过来, 也会调用传递`toJSON`给它的对象的方法。)虽然原始`Excel.RangeBorderCollection`对象是 API 对象, 但该`toJSON`方法返回一个纯 JavaScript 对象 (类型为`Excel.Interfaces.RangeBorderCollectionData` <!-- -->), 其中包含集合的项中所有加载属性的浅表副本的 "items" 数组。
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeBorderCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.RangeBorderCollectionData
      description: ''
