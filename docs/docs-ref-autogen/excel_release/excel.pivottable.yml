### YamlMime:UniversalReference
ms.openlocfilehash: bc724ea7fc6e5a67dd34313d83f94878fd6f9895
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 02/20/2019
ms.locfileid: "30105494"
items:
- uid: excel_release.Excel.PivotTable
  summary: >-
    <span data-ttu-id="0be6a-101">表示 Excel 数据透视表。</span><span class="sxs-lookup"><span data-stu-id="0be6a-101">Represents an Excel PivotTable.</span></span>


    <span data-ttu-id="0be6a-102">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-102">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.PivotTable
  fullName: Excel.PivotTable
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.PivotTable.columnHierarchies
  - excel_release.Excel.PivotTable.context
  - excel_release.Excel.PivotTable.dataHierarchies
  - excel_release.Excel.PivotTable.delete
  - excel_release.Excel.PivotTable.filterHierarchies
  - excel_release.Excel.PivotTable.hierarchies
  - excel_release.Excel.PivotTable.id
  - excel_release.Excel.PivotTable.layout
  - excel_release.Excel.PivotTable.load
  - excel_release.Excel.PivotTable.load_1
  - excel_release.Excel.PivotTable.load_2
  - excel_release.Excel.PivotTable.name
  - excel_release.Excel.PivotTable.refresh
  - excel_release.Excel.PivotTable.rowHierarchies
  - excel_release.Excel.PivotTable.set
  - excel_release.Excel.PivotTable.set_1
  - excel_release.Excel.PivotTable.toJSON
  - excel_release.Excel.PivotTable.worksheet
- uid: excel_release.Excel.PivotTable.columnHierarchies
  summary: >-
    <span data-ttu-id="0be6a-103">数据透视表的列透视层级结构。</span><span class="sxs-lookup"><span data-stu-id="0be6a-103">The Column Pivot Hierarchies of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-104">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnHierarchies
  fullName: columnHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnHierarchies: Excel.RowColumnPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.RowColumnPivotHierarchyCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0be6a-105\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"0be6a-105\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");       \n\n    // check if the PivotTable already has a column\n    const column = pivotTable.columnHierarchies.getItemOrNullObject(\"Farm\");\n    column.load(\"id\");\n    await context.sync();\n\n    if (column.isNullObject) {\n        // ading the farm column to the column hierarchy automatically removes it from the row hierarchy\n        pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    } else {\n        pivotTable.columnHierarchies.remove(column);\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.PivotTable.context
  summary: <span data-ttu-id="0be6a-106">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="0be6a-106">The request context associated with the object.</span></span> <span data-ttu-id="0be6a-107">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="0be6a-107">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.PivotTable.dataHierarchies
  summary: >-
    <span data-ttu-id="0be6a-108">数据透视表的数据透视层级结构。</span><span class="sxs-lookup"><span data-stu-id="0be6a-108">The Data Pivot Hierarchies of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-109">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-109">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataHierarchies
  fullName: dataHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataHierarchies: Excel.DataPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.DataPivotHierarchyCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0be6a-110\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"0be6a-110\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold at Farm\"));\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold Wholesale\"));\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.PivotTable.delete
  summary: >-
    <span data-ttu-id="0be6a-111">删除 PivotTable 对象。</span><span class="sxs-lookup"><span data-stu-id="0be6a-111">Deletes the PivotTable.</span></span>


    <span data-ttu-id="0be6a-112">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-112">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0be6a-113\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"0be6a-113\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.getItem(\"Farm Sales\").delete();\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.PivotTable.filterHierarchies
  summary: >-
    <span data-ttu-id="0be6a-114">数据透视表的筛选器透视层级结构。</span><span class="sxs-lookup"><span data-stu-id="0be6a-114">The Filter Pivot Hierarchies of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-115">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-115">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: filterHierarchies
  fullName: filterHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly filterHierarchies: Excel.FilterPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.FilterPivotHierarchyCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0be6a-116\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"0be6a-116\">Examples</span></span>\n\n```typescript\nasync function filter(functionType: Excel.AggregationFunction) {\n    await Excel.run(async (context) => {\n        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n        const filters = pivotTable.filterHierarchies;\n        const filter = filters.getItemOrNullObject(\"Classification\");\n        filter.load();\n        await context.sync();\n\n        // add the Classification hierarchy to the filter, if it's not already there\n        if (filter.isNullObject) {\n            filters.add(pivotTable.hierarchies.getItem(\"Classification\"));\n            await context.sync();\n        }\n    });\n}\n```"
- uid: excel_release.Excel.PivotTable.hierarchies
  summary: >-
    <span data-ttu-id="0be6a-117">数据透视表的透视层级结构。</span><span class="sxs-lookup"><span data-stu-id="0be6a-117">The Pivot Hierarchies of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-118">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-118">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hierarchies
  fullName: hierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hierarchies: Excel.PivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.PivotHierarchyCollection
- uid: excel_release.Excel.PivotTable.id
  summary: >-
    <span data-ttu-id="0be6a-p102">数据透视表的 ID。只读。</span><span class="sxs-lookup"><span data-stu-id="0be6a-p102">Id of the PivotTable. Read-only.</span></span>


    <span data-ttu-id="0be6a-121">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-121">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.PivotTable.layout
  summary: >-
    <span data-ttu-id="0be6a-122">PivotLayout，用于说明数据透视表的布局和可视化结构。</span><span class="sxs-lookup"><span data-stu-id="0be6a-122">The PivotLayout describing the layout and visual structure of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-123">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-123">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: layout
  fullName: layout
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly layout: Excel.PivotLayout;'
    return:
      type:
      - excel.Excel.PivotLayout
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0be6a-124\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"0be6a-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.layout.load(\"layoutType\");\n    await context.sync();\n\n    // cycle between the three layout types\n    if (pivotTable.layout.layoutType === \"Compact\") {\n        pivotTable.layout.layoutType = \"Outline\";\n    } else if (pivotTable.layout.layoutType === \"Outline\") {\n        pivotTable.layout.layoutType = \"Tabular\";\n    } else {\n        pivotTable.layout.layoutType = \"Compact\";\n    }\n    await context.sync();\n    console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n});\n```"
- uid: excel_release.Excel.PivotTable.load
  summary: <span data-ttu-id="0be6a-125">对命令进行排队, 以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0be6a-126">在读取属性之前, 必须先调用 "context, sync ()"。</span><span class="sxs-lookup"><span data-stu-id="0be6a-126">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="0be6a-127">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="0be6a-127">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="0be6a-128">`load(option?: string | string[]): Excel.PivotTable`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-128">`load(option?: string | string[]): Excel.PivotTable` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="0be6a-129">`load(option?: { select?: string; expand?: string; }): Excel.PivotTable`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-129">`load(option?: { select?: string; expand?: string; }): Excel.PivotTable` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="0be6a-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotTable`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="0be6a-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotTable` - Only available on collection types.</span></span> <span data-ttu-id="0be6a-131">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="0be6a-131">It is similar to the preceding signature.</span></span> <span data-ttu-id="0be6a-132">top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="0be6a-132">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="0be6a-133">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="0be6a-133">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="0be6a-134">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="0be6a-134">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.PivotTableLoadOptions): Excel.PivotTable;'
    return:
      type:
      - excel.Excel.PivotTable
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.PivotTableLoadOptions
- uid: excel_release.Excel.PivotTable.load_1
  summary: <span data-ttu-id="0be6a-135">对命令进行排队, 以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0be6a-136">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="0be6a-136">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.PivotTable;'
    return:
      type:
      - excel.Excel.PivotTable
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="0be6a-137">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel_release.Excel.PivotTable.load_2
  summary: <span data-ttu-id="0be6a-138">对命令进行排队, 以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-138">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0be6a-139">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="0be6a-139">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.PivotTable;'
    return:
      type:
      - excel.Excel.PivotTable
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="0be6a-140">其中, propertyNamesAndPaths 是用逗号分隔的字符串, 用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-140">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel_release.Excel.PivotTable.name
  summary: >-
    <span data-ttu-id="0be6a-141">PivotTable 对象的名称。</span><span class="sxs-lookup"><span data-stu-id="0be6a-141">Name of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-142">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-142">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.PivotTable.refresh
  summary: >-
    <span data-ttu-id="0be6a-143">刷新 PivotTable 对象。</span><span class="sxs-lookup"><span data-stu-id="0be6a-143">Refreshes the PivotTable.</span></span>


    <span data-ttu-id="0be6a-144">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-144">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: refresh()
  fullName: refresh()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'refresh(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel_release.Excel.PivotTable.rowHierarchies
  summary: >-
    <span data-ttu-id="0be6a-145">数据透视表的行透视层级结构。</span><span class="sxs-lookup"><span data-stu-id="0be6a-145">The Row Pivot Hierarchies of the PivotTable.</span></span>


    <span data-ttu-id="0be6a-146">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-146">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowHierarchies
  fullName: rowHierarchies
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowHierarchies: Excel.RowColumnPivotHierarchyCollection;'
    return:
      type:
      - excel.Excel.RowColumnPivotHierarchyCollection
- uid: excel_release.Excel.PivotTable.set
  summary: <span data-ttu-id="0be6a-147">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-147">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="0be6a-148">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="0be6a-148">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="0be6a-149">此方法具有以下附加签名:</span><span class="sxs-lookup"><span data-stu-id="0be6a-149">This method has the following additional signature:</span></span>


    `set(properties: Excel.PivotTable): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.PivotTableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="0be6a-150">一个 JavaScript 对象, 其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-150">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.PivotTableUpdateData
    - id: options
      description: <span data-ttu-id="0be6a-151">提供一个选项, 以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="0be6a-151">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel_release.Excel.PivotTable.set_1
  summary: <span data-ttu-id="0be6a-152">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="0be6a-152">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.PivotTable): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.PivotTable
- uid: excel_release.Excel.PivotTable.toJSON
  summary: <span data-ttu-id="0be6a-153">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到`JSON.stringify()` <!-- -->时提供更有用的输出。</span><span class="sxs-lookup"><span data-stu-id="0be6a-153">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="0be6a-154">(`JSON.stringify`<!-- -->反过来, 也会调用传递`toJSON`给它的对象的方法。)尽管原始的 Excel 数据透视表对象是 API 对象, 但`toJSON`该方法返回一个简单的 JavaScript 对象 ( `Excel.Interfaces.PivotTableData` <!-- -->类型为), 其中包含原始对象中任何已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="0be6a-154">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.PivotTable object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.PivotTableData;'
    return:
      type:
      - excel.Excel.Interfaces.PivotTableData
      description: ''
- uid: excel_release.Excel.PivotTable.worksheet
  summary: >-
    <span data-ttu-id="0be6a-155">包含当前数据透视表的工作表。</span><span class="sxs-lookup"><span data-stu-id="0be6a-155">The worksheet containing the current PivotTable.</span></span>


    <span data-ttu-id="0be6a-156">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0be6a-156">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
