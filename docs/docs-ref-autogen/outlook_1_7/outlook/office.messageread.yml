### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageRead:interface'
    summary: |-
      Office 的邮件读取模式： "[邮箱](xref:outlook!Office.Item:interface)"。<!-- -->.

      **重要说明**：这是一个内部 Outlook 对象，而不是直接通过现有接口公开。 应将其视为 "context.subname" 模式。 有关详细信息，请参阅[对象模型](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.7/office.context.mailbox.item)页。
    name: Office.MessageRead
    fullName: Office.MessageRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemRead:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageRead#addHandlerAsync:member(1)'
      - 'outlook!Office.MessageRead#addHandlerAsync:member(2)'
      - 'outlook!Office.MessageRead#attachments:member'
      - 'outlook!Office.MessageRead#body:member'
      - 'outlook!Office.MessageRead#cc:member'
      - 'outlook!Office.MessageRead#conversationId:member'
      - 'outlook!Office.MessageRead#dateTimeCreated:member'
      - 'outlook!Office.MessageRead#dateTimeModified:member'
      - 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.MessageRead#displayReplyForm:member(1)'
      - 'outlook!Office.MessageRead#end:member'
      - 'outlook!Office.MessageRead#from:member'
      - 'outlook!Office.MessageRead#getEntities:member(1)'
      - 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
      - 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.MessageRead#getRegExMatches:member(1)'
      - 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
      - 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
      - 'outlook!Office.MessageRead#internetMessageId:member'
      - 'outlook!Office.MessageRead#itemClass:member'
      - 'outlook!Office.MessageRead#itemId:member'
      - 'outlook!Office.MessageRead#itemType:member'
      - 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageRead#location:member'
      - 'outlook!Office.MessageRead#normalizedSubject:member'
      - 'outlook!Office.MessageRead#notificationMessages:member'
      - 'outlook!Office.MessageRead#recurrence:member'
      - 'outlook!Office.MessageRead#removeHandlerAsync:member(1)'
      - 'outlook!Office.MessageRead#removeHandlerAsync:member(2)'
      - 'outlook!Office.MessageRead#sender:member'
      - 'outlook!Office.MessageRead#seriesId:member'
      - 'outlook!Office.MessageRead#start:member'
      - 'outlook!Office.MessageRead#subject:member'
      - 'outlook!Office.MessageRead#to:member'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync:member(1)'
    summary: |-
      添加支持事件的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应调用处理程序的事件。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~0:complex'
        - id: handler
          description: 用于处理事件的函数。 此函数必须接受一个参数，即对象文本。 参数的 type 属性将与传递给 addHandlerAsync 的事件类型参数相匹配。
          type:
            - any
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 asyncContext：开发人员可以在回调方法中提供要访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数 asyncResult 调用在 callback 参数中传递的函数，该参数是一个作为一个 AsyncResult 对象的参数。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync:member(2)'
    summary: |-
      添加支持事件的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应调用处理程序的事件。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~2:complex'
        - id: handler
          description: 用于处理事件的函数。 此函数必须接受一个参数，即对象文本。 参数的 type 属性将与传递给 addHandlerAsync 的事件类型参数相匹配。
          type:
            - any
        - id: callback
          description: 可选。 方法完成后，使用单个参数 asyncResult 调用在 callback 参数中传递的函数，该参数是一个作为一个 AsyncResult 对象的参数。
          type:
            - 'outlook!Office.MessageRead#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageRead#attachments:member'
    summary: |-
      以数组的形式获取项目的附件。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      **注意**：由于潜在的安全问题，Outlook 阻止了某些类型的文件，因此不会返回这些文件。 有关详细信息，请参阅[Outlook 中阻止的附件](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

      #### <a name="examples"></a>示例

      ```javascript
      // The following code builds an HTML string with details of all attachments on the current item.
      var item = Office.context.mailbox.item;
      var outputString = "";

      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }

      console.log(outputString);
      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#attachments~0:complex'
  - uid: 'outlook!Office.MessageRead#body:member'
    summary: |-
      获取一个提供用于处理项目正文的方法的对象。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageRead#cc:member'
    summary: |-
      提供对邮件的抄送 (Cc) 收件人的访问权限。 对象的类型和访问级别取决于当前项目的模式。

      Cc 属性返回一个数组，其中包含邮件的 "抄送" 行上列出的每个收件人的 EmailAddressDetails 对象。 默认情况下，集合上限为 100 个成员。 但是，在 Windows 和 Mac 上，最多可包含 500 个成员。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      console.log(JSON.stringify(Office.context.mailbox.item.cc));
      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#cc~0:complex'
  - uid: 'outlook!Office.MessageRead#conversationId:member'
    summary: |-
      获取包含特定消息的电子邮件会话的标识符。

      如果在阅读窗体或撰写窗体的回复中激活邮件应用程序，则此属性可以获得一个整数值。如果用户随后更改了回复邮件的主题（若发送回复），则该邮件的对话 ID 将改变且之前获取的值将不适用。

      对于撰写窗体的新项目，此属性获得一个 null 值。 如果用户设置主题并保存项，则 conversationId 属性将返回一个值。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var conversationId = Office.context.mailbox.item.conversationId;
      console.log("conversationId: " + conversationId);
      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#dateTimeCreated:member'
    summary: |-
      获取项目创建的日期和时间。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;
      console.log("Date and time created: " + dateTimeCreated);
      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#dateTimeModified:member'
    summary: |-
      获取项目最近一次修改的日期和时间。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此成员。

      #### <a name="examples"></a>示例

      ```javascript
      var dateTimeModified = Office.context.mailbox.item.dateTimeModified;
      console.log("Date and time modified: " + dateTimeModified);
      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm:member(1)'
    summary: |-
      显示答复窗体，其中包括所选邮件的发件人和所有收件人或所选约会的组织者和所有与会者。

      在 Outlook 网页版中，答复窗体显示为包含 3 列视图的弹出式窗体，以及包含 2 列或 1 列视图的弹出式窗体。

      如果任何字符串参数超出其限制，displayReplyAllForm 将引发异常。

      当附件在 formData 参数中指定时，web 上的 Outlook 和桌面客户端将尝试下载所有附件并将其附加到答复窗体。 如果无法添加任何附件，则在窗体 UI 中显示错误。 如果这不可能，则不引发错误消息。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // The following code passes a string to the `displayReplyAllForm` function.
      Office.context.mailbox.item.displayReplyAllForm('hello there');
      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyAllForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyAllForm(
      {
      'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
    name: 'displayReplyAllForm(formData, callback)'
    fullName: 'displayReplyAllForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: '一个包含文本和 HTML 且表示答复窗体的正文的字符串。 该字符串限制为 32 KB 或包含 body 或附件数据以及回调函数的[ReplyFormData](xref:outlook!Office.ReplyFormData:interface)对象。'
          type:
            - 'outlook!Office.MessageRead#displayReplyAllForm~0:complex'
        - id: callback
          description: 可选。 方法完成后，使用单个参数 asyncResult 调用在 callback 参数中传递的函数，该参数是一个作为一个 AsyncResult 对象的参数。
          type:
            - 'outlook!Office.MessageRead#displayReplyAllForm~1:complex'
  - uid: 'outlook!Office.MessageRead#displayReplyForm:member(1)'
    summary: |-
      显示答复窗体，其中仅包括所选邮件的发件人或所选约会的组织者。

      在 Outlook 网页版中，答复窗体显示为包含 3 列视图的弹出式窗体，以及包含 2 列或 1 列视图的弹出式窗体。

      如果任何字符串参数超出其限制，displayReplyForm 将引发异常。

      当附件在 formData 参数中指定时，web 上的 Outlook 和桌面客户端将尝试下载所有附件并将其附加到答复窗体。 如果无法添加任何附件，则在窗体 UI 中显示错误。 如果这不可能，则不引发错误消息。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // The following code passes a string to the `displayReplyForm` function.
      Office.context.mailbox.item.displayReplyForm('hello there');
      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
    name: 'displayReplyForm(formData, callback)'
    fullName: 'displayReplyForm(formData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: '一个包含文本和 HTML 且表示答复窗体的正文的字符串。 该字符串限制为 32 KB 或包含 body 或附件数据以及回调函数的[ReplyFormData](xref:outlook!Office.ReplyFormData:interface)对象。'
          type:
            - 'outlook!Office.MessageRead#displayReplyForm~0:complex'
        - id: callback
          description: 可选。 方法完成后，使用单个参数 asyncResult 调用在 callback 参数中传递的函数，该参数是一个作为一个 AsyncResult 对象的参数。
          type:
            - 'outlook!Office.MessageRead#displayReplyForm~1:complex'
  - uid: 'outlook!Office.MessageRead#end:member'
    summary: |-
      获取约会结束的日期和时间。

      End 属性是以协调世界时（UTC）日期和时间值表示的 Date 对象。 您可以使用 convertToLocalClientTime 方法将 end 属性值转换为客户端的本地日期和时间。

      使用 setAsync 方法设置结束时间时，应使用 convertToUtcClientTime 方法将客户端上的本地时间转换为服务器的 UTC。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#from:member'
    summary: |-
      获取邮件发件人的电子邮件地址。

      "发件人" 和 "发件人" 属性表示同一个人，除非该邮件是由代理发送的。 在这种情况下，from 属性表示代理者，而 sender 属性表示委托。

      **注意**： from 属性中 EmailAddressDetails 对象的 recipientType 属性未定义。

      From 属性返回一个 EmailAddressDetails 对象。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var from = Office.context.mailbox.item.from;
      console.log("From " + from);
      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.MessageRead#getEntities:member(1)'
    summary: |-
      获取在所选项目的正文中找到的实体。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // The following example accesses the contacts entities in the current item's body.

      var contacts = Office.context.mailbox.item.getEntities().contacts;
      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.MessageRead#getEntitiesByType:member(1)'
    summary: |-
      获取所选项目的正文中找到的指定实体类型的所有实体的数组。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**：受限

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      当使用此方法的最低权限级别受限时，某些实体类型需要 ReadItem 才能进行访问，如下表中所指定。

      <table> <tr> <th>EntityType 的值</th> <th>返回的数组中对象的类型</th> <th>所需权限级别</th> </tr> <tr> <td>Address</td> <td>String</td> <td>受限</td> </tr> <tr> <td>Contact</td> <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>受限</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>受限</td> </tr> </table>

      #### <a name="examples"></a>示例

      ```javascript
      // The following example shows how to access an array of strings that represent postal addresses
      // in the current item's body.

      // The initialize function is required for all apps.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              // Get an array of strings that represent postal addresses in the current item's body.
              var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
              // Continue processing the array of addresses.
          });
      };
      ```
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.MessageRead#getEntitiesByType~0:complex'
        description: 如果在 entityType 中传递的值不是 EntityType 枚举的有效成员，则该方法返回 null。 如果指定类型的任何实体都不存在于该项目的正文中，该方法将返回空数组。 否则，返回的数组中对象的类型取决于 entityType 参数中请求的实体的类型。
      parameters:
        - id: entityType
          description: EntityType 枚举值之一。
          type:
            - 'outlook!Office.MessageRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)'
    summary: |-
      返回传递清单 XML 文件中定义的命名筛选器的所选项目中的已知实体。

      GetFilteredEntitiesByName 方法返回与在清单 XML 文件中的 ItemHasKnownEntity rule 元素中定义的正则表达式匹配的实体，具有指定的 FilterName 元素值。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.MessageRead#getFilteredEntitiesByName~0:complex'
        description: 如果清单中没有 ItemHasKnownEntity 元素与 name 参数匹配的 FilterName 元素值，则该方法返回 null。 如果 name 参数与清单中的 ItemHasKnownEntity 元素匹配，但当前项目中没有匹配的实体，则该方法将返回一个空数组。
      parameters:
        - id: name
          description: 定义要匹配的筛选器的 ItemHasKnownEntity 规则元素的名称。
          type:
            - string
  - uid: 'outlook!Office.MessageRead#getRegExMatches:member(1)'
    summary: |-
      返回所选项目中匹配在清单 XML 文件中定义的正则表达式的字符串值。

      GetRegExMatches 方法返回匹配在清单 XML 文件中的每个 ItemHasRegularExpressionMatch 或 ItemHasKnownEntity 规则元素中定义的正则表达式的字符串。 对于 ItemHasRegularExpressionMatch 规则，匹配的字符串必须出现在由该规则指定的项的属性中。 PropertyName 简单类型定义受支持的属性。

      如果您在项目的 body 属性上指定 ItemHasRegularExpressionMatch 规则，则正则表达式应进一步筛选正文，并且不应尝试返回项目的整个正文。 使用正则表达式（如. *）获取项目的整个正文并不总是返回预期的结果。 而是使用 getAsync 方法检索整个正文。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of
      // matches for the regular expression rule elements `fruits`
      // and `veggies`, which are specified in the manifest.
      var allMatches = Office.context.mailbox.item.getRegExMatches();
      var fruits = allMatches.fruits;
      var veggies = allMatches.veggies;
      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: 一个包含匹配在清单 XML 文件中定义的正则表达式的字符串数组的对象。 每个数组的名称等于匹配的 ItemHasRegularExpressionMatch 规则的 RegExName 属性的相应值或匹配 ItemHasKnownEntity 规则的 FilterName 属性的值。
  - uid: 'outlook!Office.MessageRead#getRegExMatchesByName:member(1)'
    summary: |-
      返回匹配在清单 XML 文件中定义的命名正则表达式的所选项目中的字符串值。

      GetRegExMatchesByName 方法返回与在清单 XML 文件中的 ItemHasRegularExpressionMatch rule 元素中定义的正则表达式匹配的字符串，该正则表达式具有指定的 RegExName 元素值。

      如果您在项目的 body 属性上指定 ItemHasRegularExpressionMatch 规则，则正则表达式应进一步筛选正文，并且不应尝试返回项目的整个正文。 使用正则表达式（如. *）获取项目的整个正文并不总是返回预期的结果。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: 一个包含匹配在清单 XML 文件中定义的正则表达式的字符串的数组。
      parameters:
        - id: name
          description: 定义要匹配的筛选器的 ItemHasRegularExpressionMatch 规则元素的名称。
          type:
            - string
  - uid: 'outlook!Office.MessageRead#getSelectedEntities:member(1)'
    summary: |-
      获取在用户已选择的突出显示匹配项中找到的实体。 突出显示的匹配项适用于上下文外接程序。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // The following example accesses the addresses entities in the highlighted
      // match selected by the user.
      var addresses = Office.context.mailbox.item.getSelectedEntities().addresses;
      ```
    name: getSelectedEntities()
    fullName: getSelectedEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.MessageRead#getSelectedRegExMatches:member(1)'
    summary: |-
      返回突出显示匹配项中匹配在清单 XML 文件中定义的正则表达式的字符串值。 突出显示的匹配项适用于上下文外接程序。

      Office.context.mailbox.item.getselectedregexmatches 方法返回匹配在清单 XML 文件中的每个 ItemHasRegularExpressionMatch 或 ItemHasKnownEntity 规则元素中定义的正则表达式的字符串。 对于 ItemHasRegularExpressionMatch 规则，匹配的字符串必须出现在由该规则指定的项的属性中。 PropertyName 简单类型定义受支持的属性。

      如果您在项目的 body 属性上指定 ItemHasRegularExpressionMatch 规则，则正则表达式应进一步筛选正文，并且不应尝试返回项目的整个正文。 使用正则表达式（如. *）获取项目的整个正文并不总是返回预期的结果。 而是使用 getAsync 方法检索整个正文。

      **注意**：在 IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of matches for the
      // regular expression rule elements `fruits` and `veggies`, which are
      // specified in the manifest.
      var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();
      var fruits = selectedMatches.fruits;
      var veggies = selectedMatches.veggies;
      ```
    name: getSelectedRegExMatches()
    fullName: getSelectedRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRegExMatches(): any;'
      return:
        type:
          - any
        description: 一个包含匹配在清单 XML 文件中定义的正则表达式的字符串数组的对象。 每个数组的名称等于匹配的 ItemHasRegularExpressionMatch 规则的 RegExName 属性的相应值或匹配 ItemHasKnownEntity 规则的 FilterName 属性的值。
  - uid: 'outlook!Office.MessageRead#internetMessageId:member'
    summary: |-
      获取电子邮件的 Internet 消息标识符。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var internetMessageId = Office.context.mailbox.item.internetMessageId;
      console.log("internetMessageId: " + internetMessageId);
      ```
    name: internetMessageId
    fullName: internetMessageId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'internetMessageId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemClass:member'
    summary: |-
      获取选定项目的 Exchange Web 服务项目类。

      您可以创建扩展默认邮件类别的自定义邮件类别，例如，自定义约会邮件类 IPM。Contoso。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      ItemClass 属性指定选定项目的邮件类。 以下是邮件或约会项目的默认邮件类别。

      <table> <tr> <th>类型</th> <th>说明</th> <th>Item 类</th> </tr> <tr> <td>约会项目</td> <td>这些是项目类 IPM 的日历项目。约会或 IPM。约会。</td> <td>IPM.NOTE.约会、IPM。约会事件</td> </tr> <tr> <td>邮件项目</td> <td>其中包括具有默认邮件类别 IPM 的电子邮件。注意，以及使用 IPM 的会议请求、响应和取消。Schedule：作为基本邮件类的会议。</td> <td>IPM.NOTE.请注意，IPM。Schedule （会议）请求，IPM。Schedule. Neg、IPM。Schedule、IPM、IPM。日程安排：会议，IPM。日程安排. 会议. 已取消</td> </tr> </table>

      #### <a name="examples"></a>示例

      ```javascript
      var itemClass = Office.context.mailbox.item.itemClass;
      console.log("Item class: " + itemClass);
      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemId:member'
    summary: |-
      获取当前项的[Exchange Web 服务项标识符](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)。

      ItemId 属性在撰写模式中不可用。 如果需要项目标识符，则可以使用 saveAsync 方法将项目保存到存储区，这将在回调函数的 asyncResult 参数中返回项目标识符。

      **注意**： itemId 属性返回的标识符与[Exchange Web 服务项目标识符](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)相同。<!-- -->. ItemId 属性与 outlook 条目 ID 或 Outlook REST API 使用的 ID 不相同。 使用此值进行 REST API 调用前，应使用 Office.context.mailbox.convertToRestId 对它进行转换。 有关更多详细信息，请参阅[使用 outlook 外接程序中的 OUTLOOK REST api](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // The following code checks for the presence of an item
      // identifier. If the `itemId` property returns `null` or
      // `undefined`, it saves the item to the store and gets the
      // item identifier from the asynchronous result.
      var itemId = Office.context.mailbox.item.itemId;
      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }
      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#itemType:member'
    summary: |-
      获取实例表示的项的类型。

      ItemType 属性返回一个 ItemType 枚举值，指示 item 对象实例是邮件还是约会。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageRead#itemType~0:complex'
  - uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)'
    summary: |-
      异步加载所选项目上此外接程序的自定义属性。

      自定义属性基于每个应用、每个项目存储为键/值对。 此方法在回调中返回一个 CustomProperties 对象，该对象提供用于访问特定于当前项目和当前加载项的自定义属性的方法。 自定义属性未在项目上加密，因此这不应用作安全存储。

      自定义属性作为 asyncResult 属性中的 CustomProperties 对象提供。 此对象可用于获取、设置以及从项目中删除自定义属性，并将自定义属性集的更改重新保存到服务器。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，将使用类型为 AsyncResult 的单个参数调用在 callback 参数中传递的函数。
          type:
            - 'outlook!Office.MessageRead#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 可选。 开发人员可以提供他们想要在回调函数中访问的任何对象。 此对象可以通过回调函数中的 asyncContext 属性来访问。
          type:
            - any
  - uid: 'outlook!Office.MessageRead#location:member'
    summary: |-
      获取会议请求的位置。

      Location 属性返回一个包含约会位置的字符串。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#normalizedSubject:member'
    summary: |-
      获取项目的主题，删除所有前缀（包括 RE：和 FWD：）。

      NormalizedSubject 属性获取项目的主题，其中包含任何标准前缀（如 RE：和 FW：）由电子邮件程序添加的。 若要获取具有完整前缀的项的主题，请使用 subject 属性。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var normalizedSubject = Office.context.mailbox.item.normalizedSubject;
      console.log("Normalized subject: " + normalizedSubject);
      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#notificationMessages:member'
    summary: |-
      获取项目的通知邮件。

      \[[API 集：邮箱 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // Get all notifications.
      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.MessageRead#recurrence:member'
    summary: |-
      获取约会的定期模式。 获取会议请求的定期模式。 约会项目的阅读和撰写模式。 会议请求项目的阅读模式。

      如果项目是系列或系列中的实例，则定期属性将返回定期约会或会议请求的定期对象。 `null`返回单个约会的单个约会和会议请求。 `undefined`对于不是会议请求的邮件，将返回。

      **注意**：会议请求的 itemClass 值为 IPM。Schedule. 会议请求。

      **注意**：如果定期对象为 null，则表示该对象是单个约会的单个约会或会议请求，而不是某个系列的一部分。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var recurrence = Office.context.mailbox.item.recurrence;
      console.log("Recurrence: " + JSON.stringify(recurrence));
      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - 'outlook!Office.Recurrence:interface'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync:member(1)'
    summary: |-
      删除受支持事件类型的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应撤销处理程序的事件。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~0:complex'
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 asyncContext：开发人员可以在回调方法中提供要访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数 asyncResult 调用在 callback 参数中传递的函数，该参数是一个作为一个 AsyncResult 对象的参数。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync:member(2)'
    summary: |-
      删除受支持事件类型的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应撤销处理程序的事件。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~2:complex'
        - id: callback
          description: 可选。 方法完成后，使用单个参数 asyncResult 调用在 callback 参数中传递的函数，该参数是一个作为一个 AsyncResult 对象的参数。
          type:
            - 'outlook!Office.MessageRead#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageRead#sender:member'
    summary: |-
      获取电子邮件发件人的电子邮件地址。

      "发件人" 和 "发件人" 属性表示同一个人，除非该邮件是由代理发送的。 在这种情况下，from 属性表示代理者，而 sender 属性表示委托。

      **注意**： sender 属性中 EmailAddressDetails 对象的 recipientType 属性未定义。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var senderName = Office.context.mailbox.item.sender.displayName;
      var senderAddress = Office.context.mailbox.item.sender.emailAddress;
      console.log("Sender: " + senderName + " (" + senderAddress + ")");
      ```
    name: sender
    fullName: sender
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sender: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.MessageRead#seriesId:member'
    summary: |-
      获取实例所属的系列的 id。

      在 web 和桌面客户端上的 Outlook 中，Webcasts&seriesid 返回此项所属的父（系列）项的 Exchange Web 服务（EWS） ID。 但是，在 iOS 和 Android 上，Webcasts&seriesid 返回父项的 REST ID。

      **注意**： webcasts&seriesid 属性返回的标识符与 Exchange Web 服务项目标识符相同。 Webcasts&seriesid 属性与 Outlook REST API 使用的 Outlook Id 不相同。 使用此值进行 REST API 调用前，应使用 Office.context.mailbox.convertToRestId 对它进行转换。 有关更多详细信息，请参阅[使用 outlook 外接程序中的 OUTLOOK REST api](https://docs.microsoft.com/outlook/add-ins/use-rest-api)<!-- -->.

      对于不包含父项目（如单个约会、系列项目或会议请求）的项目，Webcasts&seriesid 属性将返回 null，并且对于不是会议请求的任何其他项目，返回 "未定义"。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      // The seriesId property returns null for items that do
      // not have parent items (such as single appointments,
      // series items, or meeting requests) and returns
      // undefined for messages that are not meeting requests.
      var isSeriesInstance = (seriesId != null);
      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#start:member'
    summary: |-
      获取约会开始的日期和时间。

      Start 属性是以协调世界时（UTC）日期和时间值表示的 Date 对象。 您可以使用 convertToLocalClientTime 方法将值转换为客户端的本地日期和时间。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.MessageRead#subject:member'
    summary: |-
      获取项目的 "主题" 字段中显示的说明。

      Subject 属性获取或设置由电子邮件服务器发送的项目的整个主题。

      Subject 属性返回一个字符串。 使用 normalizedSubject 属性可获取主题减去任何前导前缀，如 RE：和 FW：。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      // The following JavaScript code example shows how to access the
      // `subject` property of the current item in Outlook.

      // The initialize function is required for all apps.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              var subject = item.subject;
              // Continue with processing the subject of the current item,
              // which can be a message or appointment.
          });
      };
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageRead#to:member'
    summary: |-
      提供对邮件的“收件人”行上的收件人的访问权限。 对象的类型和访问级别取决于当前项目的模式。

      To 属性返回一个数组，该数组包含邮件的 "收件人" 行中列出的每个收件人的 EmailAddressDetails 对象。 默认情况下，集合上限为 100 个成员。 但是，在 Windows 和 Mac 上，最多可包含 500 个成员。

      \[[API 集：邮箱 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**： ReadItem

      **[适用的 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**：邮件已阅读

      #### <a name="examples"></a>示例

      ```javascript
      console.log(JSON.stringify(Office.context.mailbox.item.to));
      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.MessageRead#to~0:complex'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemRead:interface'
    name: ItemRead
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.MessageRead#cc~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.MessageRead#displayReplyAllForm~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.MessageRead#displayReplyForm~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.EmailAddressDetails:interface'
    name: EmailAddressDetails
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.MessageRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.MessageRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.MessageRead#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Recurrence:interface'
    name: Recurrence
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageRead#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageRead#to~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'