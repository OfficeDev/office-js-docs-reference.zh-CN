### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Binding:class'
    summary: |-
      <span data-ttu-id="c6cb8-101">表示工作簿中定义的 Office.js 绑定。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-101">Represents an Office.js binding that is defined in the workbook.</span></span>

      <span data-ttu-id="c6cb8-102">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c6cb8-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Binding
    fullName: Excel.Binding
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Binding#context:member'
      - 'excel!Excel.Binding#getRange:member(1)'
      - 'excel!Excel.Binding#getTable:member(1)'
      - 'excel!Excel.Binding#getText:member(1)'
      - 'excel!Excel.Binding#id:member'
      - 'excel!Excel.Binding#load:member(1)'
      - 'excel!Excel.Binding#load:member(2)'
      - 'excel!Excel.Binding#load:member(3)'
      - 'excel!Excel.Binding#toJSON:member(1)'
      - 'excel!Excel.Binding#type:member'
  - uid: 'excel!Excel.Binding#context:member'
    summary: <span data-ttu-id="c6cb8-103">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-103">The request context associated with the object.</span></span> <span data-ttu-id="c6cb8-104">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Binding#getRange:member(1)'
    summary: |-
      <span data-ttu-id="c6cb8-105">返回绑定表示的区域。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-105">Returns the range represented by the binding.</span></span> <span data-ttu-id="c6cb8-106">如果绑定类型不正确，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-106">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="c6cb8-107">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c6cb8-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c6cb8-108">示例</span><span class="sxs-lookup"><span data-stu-id="c6cb8-108">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var range = binding.getRange();
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Binding#getTable:member(1)'
    summary: |-
      <span data-ttu-id="c6cb8-109">返回绑定表示的表。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-109">Returns the table represented by the binding.</span></span> <span data-ttu-id="c6cb8-110">如果绑定类型不正确，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-110">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="c6cb8-111">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c6cb8-111">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTable()
    fullName: getTable()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c6cb8-112">示例</span><span class="sxs-lookup"><span data-stu-id="c6cb8-112">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var table = binding.getTable();
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Binding#getText:member(1)'
    summary: |-
      <span data-ttu-id="c6cb8-113">返回绑定表示的文本。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-113">Returns the text represented by the binding.</span></span> <span data-ttu-id="c6cb8-114">如果绑定类型不正确，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-114">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="c6cb8-115">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c6cb8-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Binding#getText~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c6cb8-116">示例</span><span class="sxs-lookup"><span data-stu-id="c6cb8-116">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var text = binding.getText();
              binding.load('text');
              return ctx.sync().then(function() {
                  console.log(text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Binding#id:member'
    summary: |-
      <span data-ttu-id="c6cb8-117">表示绑定标识符。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-117">Represents binding identifier.</span></span> <span data-ttu-id="c6cb8-118">只读。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-118">Read-only.</span></span>

      <span data-ttu-id="c6cb8-119">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c6cb8-119">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Binding#load:member(1)'
    summary: <span data-ttu-id="c6cb8-120">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-120">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c6cb8-121">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-121">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="c6cb8-122">除了此签名之外，此方法还具有以下签名：</span><span class="sxs-lookup"><span data-stu-id="c6cb8-122">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="c6cb8-123">`load(option?: string | string[]): Excel.Binding`-Where 选项是一个逗号分隔的字符串或一个字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-123">`load(option?: string | string[]): Excel.Binding` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="c6cb8-124">`load(option?: { select?: string; expand?: string; }): Excel.Binding`-Where 选项。选择是一个用逗号分隔的字符串，用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-124">`load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="c6cb8-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types.</span></span> <span data-ttu-id="c6cb8-126">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-126">It is similar to the preceding signature.</span></span> <span data-ttu-id="c6cb8-127">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-127">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="c6cb8-128">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-128">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="c6cb8-129">如果指定了 top 选项，则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-129">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.BindingLoadOptions): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.BindingLoadOptions:interface'
  - uid: 'excel!Excel.Binding#load:member(2)'
    summary: <span data-ttu-id="c6cb8-130">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-130">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c6cb8-131">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-131">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c6cb8-132">示例</span><span class="sxs-lookup"><span data-stu-id="c6cb8-132">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              binding.load('type');
              return ctx.sync().then(function() {
                  console.log(binding.type);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="c6cb8-133">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-133">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Binding#load:member(3)'
    summary: <span data-ttu-id="c6cb8-134">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c6cb8-135">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-135">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Binding;'
      return:
        type:
          - 'excel!Excel.Binding:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="c6cb8-136">其中，propertyNamesAndPaths 是用逗号分隔的字符串，用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-136">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.Binding#toJSON:member(1)'
    summary: '<span data-ttu-id="c6cb8-137">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="c6cb8-137">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="c6cb8-138">.</span><span class="sxs-lookup"><span data-stu-id="c6cb8-138"></span></span> <span data-ttu-id="c6cb8-139">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="c6cb8-139"></span></span><!-- --><span data-ttu-id="c6cb8-140">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel. Binding 对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.BindingData`</span><span class="sxs-lookup"><span data-stu-id="c6cb8-140">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`</span></span><!-- --><span data-ttu-id="c6cb8-141">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-141">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingData;'
      return:
        type:
          - 'excel!Excel.Interfaces.BindingData:interface'
        description: ''
  - uid: 'excel!Excel.Binding#type:member'
    summary: |-
      <span data-ttu-id="c6cb8-142">返回绑定的类型。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-142">Returns the type of the binding.</span></span> <span data-ttu-id="c6cb8-143">有关详细信息，请参阅 BindingType。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-143">See Excel.BindingType for details.</span></span> <span data-ttu-id="c6cb8-144">只读。</span><span class="sxs-lookup"><span data-stu-id="c6cb8-144">Read-only.</span></span>

      <span data-ttu-id="c6cb8-145">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c6cb8-145">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
      return:
        type:
          - 'excel!Excel.Binding#type~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.Table:class'
    name: Excel.Table
  - uid: 'excel!Excel.Binding#getText~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Binding:class'
    name: Excel.Binding
  - uid: 'excel!Excel.Interfaces.BindingLoadOptions:interface'
    name: Excel.Interfaces.BindingLoadOptions
  - uid: 'excel!Excel.Interfaces.BindingData:interface'
    name: Excel.Interfaces.BindingData
  - uid: 'excel!Excel.Binding#type~0:complex'
    name: Excel.BindingType | "Range" | "Table" | "Text"
    fullName: Excel.BindingType | "Range" | "Table" | "Text"
    spec.typeScript:
      - uid: 'excel!Excel.BindingType:enum'
        name: Excel.BindingType
        fullName: Excel.BindingType
      - name: ' | "Range" | "Table" | "Text"'
        fullName: ' | "Range" | "Table" | "Text"'