### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      <span data-ttu-id="8ff29-101">Range 表示一个或多个连续单元格的集合，例如单元格、行、列、单元格块等。若要了解有关如何在整个 API 中使用范围的详细信息，请参阅[使用 Excel JAVASCRIPT Api 处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)并使用[excel javascript api （高级）处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="8ff29-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="8ff29-102">.</span><span class="sxs-lookup"><span data-stu-id="8ff29-102"></span></span>

      <span data-ttu-id="8ff29-103">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      <span data-ttu-id="8ff29-104">表示 A1 样式的区域引用。</span><span class="sxs-lookup"><span data-stu-id="8ff29-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="8ff29-105">Address 值将包含工作表引用（例如，"Sheet1！A1： B4 "）。</span><span class="sxs-lookup"><span data-stu-id="8ff29-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="8ff29-106">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-106">Read-only.</span></span>

      <span data-ttu-id="8ff29-107">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      <span data-ttu-id="8ff29-108">以用户语言表示对指定区域的区域引用。</span><span class="sxs-lookup"><span data-stu-id="8ff29-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="8ff29-109">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-109">Read-only.</span></span>

      <span data-ttu-id="8ff29-110">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      <span data-ttu-id="8ff29-111">范围中的单元格数。</span><span class="sxs-lookup"><span data-stu-id="8ff29-111">Number of cells in the range.</span></span> <span data-ttu-id="8ff29-112">如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。</span><span class="sxs-lookup"><span data-stu-id="8ff29-112">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="8ff29-113">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-113">Read-only.</span></span>

      <span data-ttu-id="8ff29-114">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-114">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-115">清除区域值、格式、填充、边框等。</span><span class="sxs-lookup"><span data-stu-id="8ff29-115">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="8ff29-116">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-117">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-117">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="8ff29-118">可选。</span><span class="sxs-lookup"><span data-stu-id="8ff29-118">Optional.</span></span> <span data-ttu-id="8ff29-119">确定清除操作的类型。</span><span class="sxs-lookup"><span data-stu-id="8ff29-119">Determines the type of clear action.</span></span> <span data-ttu-id="8ff29-120">有关详细信息，请参阅 ClearApplyTo。</span><span class="sxs-lookup"><span data-stu-id="8ff29-120">See Excel.ClearApplyTo for details.</span></span>
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      <span data-ttu-id="8ff29-121">清除区域值、格式、填充、边框等。</span><span class="sxs-lookup"><span data-stu-id="8ff29-121">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="8ff29-122">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="8ff29-123">可选。</span><span class="sxs-lookup"><span data-stu-id="8ff29-123">Optional.</span></span> <span data-ttu-id="8ff29-124">确定清除操作的类型。</span><span class="sxs-lookup"><span data-stu-id="8ff29-124">Determines the type of clear action.</span></span> <span data-ttu-id="8ff29-125">有关详细信息，请参阅 ClearApplyTo。</span><span class="sxs-lookup"><span data-stu-id="8ff29-125">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      <span data-ttu-id="8ff29-126">表示区域中的列总数。</span><span class="sxs-lookup"><span data-stu-id="8ff29-126">Represents the total number of columns in the range.</span></span> <span data-ttu-id="8ff29-127">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-127">Read-only.</span></span>

      <span data-ttu-id="8ff29-128">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      <span data-ttu-id="8ff29-129">表示区域中第一个单元格的列编号。</span><span class="sxs-lookup"><span data-stu-id="8ff29-129">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="8ff29-130">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="8ff29-130">Zero-indexed.</span></span> <span data-ttu-id="8ff29-131">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-131">Read-only.</span></span>

      <span data-ttu-id="8ff29-132">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-132">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#context:member'
    summary: <span data-ttu-id="8ff29-133">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="8ff29-133">The request context associated with the object.</span></span> <span data-ttu-id="8ff29-134">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="8ff29-134">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-135">删除与区域相关的单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-135">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="8ff29-136">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-136">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-137">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-137">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="8ff29-138">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="8ff29-138">Specifies which way to shift the cells.</span></span> <span data-ttu-id="8ff29-139">有关详细信息，请参阅 DeleteShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="8ff29-139">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      <span data-ttu-id="8ff29-140">删除与区域相关的单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-140">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="8ff29-141">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-141">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="8ff29-142">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="8ff29-142">Specifies which way to shift the cells.</span></span> <span data-ttu-id="8ff29-143">有关详细信息，请参阅 DeleteShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="8ff29-143">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      <span data-ttu-id="8ff29-144">返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-144">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="8ff29-145">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-145">Read-only.</span></span>

      <span data-ttu-id="8ff29-146">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      <span data-ttu-id="8ff29-147">表示采用 A1 表示法的公式。</span><span class="sxs-lookup"><span data-stu-id="8ff29-147">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="8ff29-148">将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="8ff29-148">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="8ff29-149">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-149">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="8ff29-150">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-150">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      <span data-ttu-id="8ff29-151">表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。</span><span class="sxs-lookup"><span data-stu-id="8ff29-151">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="8ff29-152">例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。</span><span class="sxs-lookup"><span data-stu-id="8ff29-152">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="8ff29-153">将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="8ff29-153">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="8ff29-154">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-154">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="8ff29-155">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-155">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-156">获取包含指定区域的最小 range 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-156">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="8ff29-157">例如，“B2:C5”和“D10:E15”的 GetBoundingRect 为“B2:E15”。</span><span class="sxs-lookup"><span data-stu-id="8ff29-157">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="8ff29-158">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-159">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-159">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="8ff29-160">range 对象或地址或区域名称。</span><span class="sxs-lookup"><span data-stu-id="8ff29-160">The range object or address or range name.</span></span>
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-161">根据行和列编号获取包含单个单元格的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-161">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="8ff29-162">单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。</span><span class="sxs-lookup"><span data-stu-id="8ff29-162">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="8ff29-163">返回的单元格位于相对于区域左上角的单元格的位置。</span><span class="sxs-lookup"><span data-stu-id="8ff29-163">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="8ff29-164">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-164">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-165">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-165">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="8ff29-166">要检索的单元格的行号。</span><span class="sxs-lookup"><span data-stu-id="8ff29-166">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="8ff29-167">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="8ff29-167">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="8ff29-168">要检索的单元格的列号。</span><span class="sxs-lookup"><span data-stu-id="8ff29-168">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="8ff29-169">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="8ff29-169">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-170">获取范围中包含的列。</span><span class="sxs-lookup"><span data-stu-id="8ff29-170">Gets a column contained in the range.</span></span>

      <span data-ttu-id="8ff29-171">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-171">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-172">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-172">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="8ff29-173">要检索的区域的列号。</span><span class="sxs-lookup"><span data-stu-id="8ff29-173">Column number of the range to be retrieved.</span></span> <span data-ttu-id="8ff29-174">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="8ff29-174">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-175">获取一个对象，该对象代表区域的整列（例如，如果当前区域表示单元格 "B4： E11"，则它`getEntireColumn`是表示列 "B:E" 的区域）。</span><span class="sxs-lookup"><span data-stu-id="8ff29-175">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="8ff29-176">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-176">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-177">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-177">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-178">获取一个对象，该对象表示区域的整行（例如，如果当前区域表示单元格 "B4： E11"，则它`GetEntireRow`是表示行 "4:11" 的区域）。</span><span class="sxs-lookup"><span data-stu-id="8ff29-178">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="8ff29-179">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-180">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-180">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-181">获取表示指定区域的矩形交集的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-181">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="8ff29-182">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-182">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-183">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-183">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="8ff29-184">将用于确定区域交集的 range 对象或区域地址。</span><span class="sxs-lookup"><span data-stu-id="8ff29-184">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-185">获取区域内的最后一个单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-185">Gets the last cell within the range.</span></span> <span data-ttu-id="8ff29-186">例如，“B2:D5”的最后一个单元格是“D5”。</span><span class="sxs-lookup"><span data-stu-id="8ff29-186">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="8ff29-187">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-187">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-188">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-188">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-189">获取区域内的最后一列。</span><span class="sxs-lookup"><span data-stu-id="8ff29-189">Gets the last column within the range.</span></span> <span data-ttu-id="8ff29-190">例如，“B2:D5”的最后一列是“D2:D5”。</span><span class="sxs-lookup"><span data-stu-id="8ff29-190">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="8ff29-191">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-191">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-192">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-192">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-193">获取区域内的最后一行。</span><span class="sxs-lookup"><span data-stu-id="8ff29-193">Gets the last row within the range.</span></span> <span data-ttu-id="8ff29-194">例如，“B2:D5”的最后一行是“B5:D5”。</span><span class="sxs-lookup"><span data-stu-id="8ff29-194">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="8ff29-195">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-195">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-196">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-196">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-p122">获取表示与指定区域偏移的区域的对象。返回的区域的尺寸将与此区域一致。如果强制在工作表网格的边界之外生成区域，将引发错误。</span><span class="sxs-lookup"><span data-stu-id="8ff29-p122">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="8ff29-200">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-200">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-201">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-201">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="8ff29-p123">区域偏移的行数（正数、负数或 0）。正数表示向下偏移，负数表示向上偏移。</span><span class="sxs-lookup"><span data-stu-id="8ff29-p123">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="8ff29-p124">区域偏移的列数（正数、负数或 0）。正数表示向右偏移，负数表示向左偏移。</span><span class="sxs-lookup"><span data-stu-id="8ff29-p124">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-206">获取范围中包含的行。</span><span class="sxs-lookup"><span data-stu-id="8ff29-206">Gets a row contained in the range.</span></span>

      <span data-ttu-id="8ff29-207">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-208">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-208">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="8ff29-209">要检索的区域的行号。</span><span class="sxs-lookup"><span data-stu-id="8ff29-209">Row number of the range to be retrieved.</span></span> <span data-ttu-id="8ff29-210">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="8ff29-210">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-p126">将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-p126">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="8ff29-213">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-213">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-214">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-214">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="8ff29-215">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="8ff29-215">Specifies which way to shift the cells.</span></span> <span data-ttu-id="8ff29-216">有关详细信息，请参阅 InsertShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="8ff29-216">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      <span data-ttu-id="8ff29-p128">将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-p128">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="8ff29-219">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-219">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="8ff29-220">指定移动单元格的方式。</span><span class="sxs-lookup"><span data-stu-id="8ff29-220">Specifies which way to shift the cells.</span></span> <span data-ttu-id="8ff29-221">有关详细信息，请参阅 InsertShiftDirection。</span><span class="sxs-lookup"><span data-stu-id="8ff29-221">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: <span data-ttu-id="8ff29-222">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-222">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8ff29-223">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="8ff29-223">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="8ff29-224">提供要加载的对象的属性的选项。</span><span class="sxs-lookup"><span data-stu-id="8ff29-224">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: <span data-ttu-id="8ff29-225">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-225">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8ff29-226">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="8ff29-226">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-227">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-227">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="8ff29-228">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-228">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: <span data-ttu-id="8ff29-229">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-229">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8ff29-230">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="8ff29-230">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="8ff29-231">`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-231">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      <span data-ttu-id="8ff29-232">表示给定范围的 Excel 数字格式代码。</span><span class="sxs-lookup"><span data-stu-id="8ff29-232">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="8ff29-233">将数字格式设置为一个区域时，value 参数可以是单个值（string），也可以是二维数组。</span><span class="sxs-lookup"><span data-stu-id="8ff29-233">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="8ff29-234">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-234">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="8ff29-235">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-235">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      <span data-ttu-id="8ff29-236">返回区域中的总行数。</span><span class="sxs-lookup"><span data-stu-id="8ff29-236">Returns the total number of rows in the range.</span></span> <span data-ttu-id="8ff29-237">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-237">Read-only.</span></span>

      <span data-ttu-id="8ff29-238">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-238">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      <span data-ttu-id="8ff29-239">返回区域中第一个单元格的行编号。</span><span class="sxs-lookup"><span data-stu-id="8ff29-239">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="8ff29-240">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="8ff29-240">Zero-indexed.</span></span> <span data-ttu-id="8ff29-241">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-241">Read-only.</span></span>

      <span data-ttu-id="8ff29-242">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      <span data-ttu-id="8ff29-243">在 Excel UI 中选择指定的区域。</span><span class="sxs-lookup"><span data-stu-id="8ff29-243">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="8ff29-244">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-244">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-245">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-245">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: '<span data-ttu-id="8ff29-246">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-246">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="8ff29-247">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-247">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="8ff29-248">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="8ff29-248">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="8ff29-249">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-249">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="8ff29-250">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-250">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: <span data-ttu-id="8ff29-251">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="8ff29-251">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: '<span data-ttu-id="8ff29-252">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="8ff29-252">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      <span data-ttu-id="8ff29-253">指定区域的文本值。</span><span class="sxs-lookup"><span data-stu-id="8ff29-253">Text values of the specified range.</span></span> <span data-ttu-id="8ff29-254">文本值与单元格宽度无关。</span><span class="sxs-lookup"><span data-stu-id="8ff29-254">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="8ff29-255">Excel \# UI 中发生的符号替换不会影响 API 返回的文本值。</span><span class="sxs-lookup"><span data-stu-id="8ff29-255">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="8ff29-256">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-256">Read-only.</span></span>

      <span data-ttu-id="8ff29-257">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-257">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: '<span data-ttu-id="8ff29-258">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8ff29-258">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8ff29-259">.</span><span class="sxs-lookup"><span data-stu-id="8ff29-259"></span></span> <span data-ttu-id="8ff29-260">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8ff29-260"></span></span><!-- --><span data-ttu-id="8ff29-261">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel Range 对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="8ff29-261">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="8ff29-262">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="8ff29-262">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: '<span data-ttu-id="8ff29-263">根据文档中的相应更改来跟踪对象，以便进行自动调整。</span><span class="sxs-lookup"><span data-stu-id="8ff29-263">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="8ff29-264">此调用是的简写`context.trackedObjects.add(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="8ff29-264">This call is a shorthand for `context.trackedObjects.add(thisObject)`</span></span><!-- --><span data-ttu-id="8ff29-265">.</span><span class="sxs-lookup"><span data-stu-id="8ff29-265"></span></span> <span data-ttu-id="8ff29-266">如果要在多`.sync`个调用中使用此对象，并在 "运行" 批处理的顺序执行之外使用此对象，并在设置属性或对对象调用方法时获取 "InvalidObjectPath" 错误，则需要向跟踪的对象添加对象首次创建对象时的集合。</span><span class="sxs-lookup"><span data-stu-id="8ff29-266">If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: '<span data-ttu-id="8ff29-267">释放与此对象关联的内存（如果先前已跟踪过）。</span><span class="sxs-lookup"><span data-stu-id="8ff29-267">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="8ff29-268">此调用是的简写`context.trackedObjects.remove(thisObject)`</span><span class="sxs-lookup"><span data-stu-id="8ff29-268">This call is shorthand for `context.trackedObjects.remove(thisObject)`</span></span><!-- --><span data-ttu-id="8ff29-269">.</span><span class="sxs-lookup"><span data-stu-id="8ff29-269"></span></span> <span data-ttu-id="8ff29-270">拥有许多跟踪对象会降低主机应用程序的速度，因此请在使用完毕后释放所添加的任何对象。</span><span class="sxs-lookup"><span data-stu-id="8ff29-270">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="8ff29-271">在内存释放生效之前`context.sync()` ，您需要调用该过程。</span><span class="sxs-lookup"><span data-stu-id="8ff29-271">You will need to call `context.sync()` before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8ff29-272">示例</span><span class="sxs-lookup"><span data-stu-id="8ff29-272">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      <span data-ttu-id="8ff29-273">表示指定区域的原始值。</span><span class="sxs-lookup"><span data-stu-id="8ff29-273">Represents the raw values of the specified range.</span></span> <span data-ttu-id="8ff29-274">返回的数据可能是字符串、数字，也可能是布尔值。</span><span class="sxs-lookup"><span data-stu-id="8ff29-274">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="8ff29-275">包含错误的单元格将返回错误字符串。</span><span class="sxs-lookup"><span data-stu-id="8ff29-275">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="8ff29-276">将值设置为一个范围时，value 参数可以是单个值（string、number 或 boolean），也可以是一个二维数组。</span><span class="sxs-lookup"><span data-stu-id="8ff29-276">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="8ff29-277">如果参数是单个值，它将应用于区域中的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="8ff29-277">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="8ff29-278">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-278">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      <span data-ttu-id="8ff29-279">表示每个单元格的数据类型。</span><span class="sxs-lookup"><span data-stu-id="8ff29-279">Represents the type of data of each cell.</span></span> <span data-ttu-id="8ff29-280">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-280">Read-only.</span></span>

      <span data-ttu-id="8ff29-281">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-281">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      <span data-ttu-id="8ff29-282">包含当前区域的工作表。</span><span class="sxs-lookup"><span data-stu-id="8ff29-282">The worksheet containing the current range.</span></span> <span data-ttu-id="8ff29-283">只读。</span><span class="sxs-lookup"><span data-stu-id="8ff29-283">Read-only.</span></span>

      <span data-ttu-id="8ff29-284">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8ff29-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet