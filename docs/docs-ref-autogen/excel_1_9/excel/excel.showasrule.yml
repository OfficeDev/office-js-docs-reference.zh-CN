### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ShowAsRule
    summary: '<span data-ttu-id="50415-101">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="50415-101">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>'
    name: Excel.ShowAsRule
    fullName: Excel.ShowAsRule
    langs:
      - typeScript
    type: interface
    package: excel
    children:
      - excel.Excel.ShowAsRule.baseField
      - excel.Excel.ShowAsRule.baseItem
      - excel.Excel.ShowAsRule.calculation
  - uid: excel.Excel.ShowAsRule.baseField
    summary: |-
      <span data-ttu-id="50415-102">基于 ShowAs 计算的基础 PivotField，如适用，基于 ShowAsCalculation 类型，否则为 null。</span><span class="sxs-lookup"><span data-stu-id="50415-102">The base PivotField to base the ShowAs calculation, if applicable based on the ShowAsCalculation type, else null.</span></span>

      <span data-ttu-id="50415-103">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="50415-103">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: baseField
    fullName: baseField
    langs:
      - typeScript
    type: property
    syntax:
      content: 'baseField?: Excel.PivotField;'
      return:
        type:
          - excel.Excel.PivotField
  - uid: excel.Excel.ShowAsRule.baseItem
    summary: |-
      <span data-ttu-id="50415-104">基于 ShowAs 计算的基础 Item，如适用，基于 ShowAsCalculation 类型，否则为 null。</span><span class="sxs-lookup"><span data-stu-id="50415-104">The base Item to base the ShowAs calculation on, if applicable based on the ShowAsCalculation type, else null.</span></span>

      <span data-ttu-id="50415-105">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="50415-105">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: baseItem
    fullName: baseItem
    langs:
      - typeScript
    type: property
    syntax:
      content: 'baseItem?: Excel.PivotItem;'
      return:
        type:
          - excel.Excel.PivotItem
        description: |-


          #### <a name="examples"></a><span data-ttu-id="50415-106">示例</span><span class="sxs-lookup"><span data-stu-id="50415-106">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              const farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
              const wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

              farmDataHierarchy.load("showAs");
              wholesaleDataHierarchy.load("showAs");
              await context.sync();

              // show the difference between crate sales of the "A Farms" and the other farms
              // this difference is both aggregated and shown for individual fruit types (where applicable)
              let farmShowAs = farmDataHierarchy.showAs;
              farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
              farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
              farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
              farmDataHierarchy.showAs = farmShowAs;

              let wholesaleShowAs = wholesaleDataHierarchy.showAs;
              wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
              wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
              wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
              wholesaleDataHierarchy.showAs = wholesaleShowAs;
              await context.sync();
          });
          ```
  - uid: excel.Excel.ShowAsRule.calculation
    summary: |-
      <span data-ttu-id="50415-107">数据 PivotField 使用的 ShowAs 计算。</span><span class="sxs-lookup"><span data-stu-id="50415-107">The ShowAs Calculation to use for the Data PivotField.</span></span> <span data-ttu-id="50415-108">有关详细信息, 请参阅 ShowAsCalculation。</span><span class="sxs-lookup"><span data-stu-id="50415-108">See Excel.ShowAsCalculation for Details.</span></span>

      <span data-ttu-id="50415-109">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="50415-109">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculation
    fullName: calculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'calculation: Excel.ShowAsCalculation | "Unknown" | "None" | "PercentOfGrandTotal" | "PercentOfRowTotal" | "PercentOfColumnTotal" | "PercentOfParentRowTotal" | "PercentOfParentColumnTotal" | "PercentOfParentTotal" | "PercentOf" | "RunningTotal" | "PercentRunningTotal" | "DifferenceFrom" | "PercentDifferenceFrom" | "RankAscending" | "RankDecending" | "Index";'
      return:
        type:
          - Excel.ShowAsCalculation | "Unknown" | "None" | "PercentOfGrandTotal" | "PercentOfRowTotal" | "PercentOfColumnTotal" | "PercentOfParentRowTotal" | "PercentOfParentColumnTotal" | "PercentOfParentTotal" | "PercentOf" | "RunningTotal" | "PercentRunningTotal" | "DifferenceFrom" | "PercentDifferenceFrom" | "RankAscending" | "RankDecending" | "Index"