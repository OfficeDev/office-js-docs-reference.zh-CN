### YamlMime:TSType
name: Excel.DataValidationRule
uid: excel!Excel.DataValidationRule:interface
package: excel!
fullName: Excel.DataValidationRule
summary: >-
  数据有效性规则包含不同类型的数据验证。 根据 Excel.DataValidationType，一次只能使用其中一个。


  \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: custom
  uid: excel!Excel.DataValidationRule#custom:member
  package: excel!
  fullName: custom
  summary: >-
    自定义数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'custom?: Excel.CustomDataValidation;'
    return:
      type: <xref uid="excel!Excel.CustomDataValidation:interface" />
- name: date
  uid: excel!Excel.DataValidationRule#date:member
  package: excel!
  fullName: date
  summary: >-
    日期数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'date?: Excel.DateTimeDataValidation;'
    return:
      type: <xref uid="excel!Excel.DateTimeDataValidation:interface" />
- name: decimal
  uid: excel!Excel.DataValidationRule#decimal:member
  package: excel!
  fullName: decimal
  summary: >-
    小数数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'decimal?: Excel.BasicDataValidation;'
    return:
      type: <xref uid="excel!Excel.BasicDataValidation:interface" />
- name: list
  uid: excel!Excel.DataValidationRule#list:member
  package: excel!
  fullName: list
  summary: >-
    列表数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'list?: Excel.ListDataValidation;'
    return:
      type: <xref uid="excel!Excel.ListDataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    const nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: nameSourceRange\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n});\n```"
- name: textLength
  uid: excel!Excel.DataValidationRule#textLength:member
  package: excel!
  fullName: textLength
  summary: >-
    TextLength 数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'textLength?: Excel.BasicDataValidation;'
    return:
      type: <xref uid="excel!Excel.BasicDataValidation:interface" />
- name: time
  uid: excel!Excel.DataValidationRule#time:member
  package: excel!
  fullName: time
  summary: >-
    时间数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'time?: Excel.DateTimeDataValidation;'
    return:
      type: <xref uid="excel!Excel.DateTimeDataValidation:interface" />
- name: wholeNumber
  uid: excel!Excel.DataValidationRule#wholeNumber:member
  package: excel!
  fullName: wholeNumber
  summary: >-
    WholeNumber 数据有效性条件。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'wholeNumber?: Excel.BasicDataValidation;'
    return:
      type: <xref uid="excel!Excel.BasicDataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n});\n```"
metadata:
  ms.openlocfilehash: c93808bd18f2f946a60d738ac3f8edf47a700b4c
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49854110"
