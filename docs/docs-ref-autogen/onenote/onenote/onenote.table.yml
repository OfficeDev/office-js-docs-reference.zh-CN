### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Table:class'
    summary: |-
      表示 OneNote 页中的表格。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Table
    fullName: OneNote.Table
    langs:
      - typeScript
    type: class
    extends:
      - 'onenote!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Table#appendColumn:member(1)'
      - 'onenote!OneNote.Table#appendRow:member(1)'
      - 'onenote!OneNote.Table#borderVisible:member'
      - 'onenote!OneNote.Table#clear:member(1)'
      - 'onenote!OneNote.Table#columnCount:member'
      - 'onenote!OneNote.Table#context:member'
      - 'onenote!OneNote.Table#getCell:member(1)'
      - 'onenote!OneNote.Table#id:member'
      - 'onenote!OneNote.Table#insertColumn:member(1)'
      - 'onenote!OneNote.Table#insertRow:member(1)'
      - 'onenote!OneNote.Table#load:member(1)'
      - 'onenote!OneNote.Table#load:member(2)'
      - 'onenote!OneNote.Table#load:member(3)'
      - 'onenote!OneNote.Table#paragraph:member'
      - 'onenote!OneNote.Table#rowCount:member'
      - 'onenote!OneNote.Table#rows:member'
      - 'onenote!OneNote.Table#set:member(1)'
      - 'onenote!OneNote.Table#set:member(2)'
      - 'onenote!OneNote.Table#setShadingColor:member(1)'
      - 'onenote!OneNote.Table#toJSON:member(1)'
      - 'onenote!OneNote.Table#track:member(1)'
      - 'onenote!OneNote.Table#untrack:member(1)'
  - uid: 'onenote!OneNote.Table#appendColumn:member(1)'
    summary: |-
      将列添加至表格结尾。 指定的值在新列中设置。 否则该列为空。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: appendColumn(values)
    fullName: appendColumn(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendColumn(values?: string[]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.appendColumn(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: values
          description: 可选。 在新列中插入的字符串，指定为数组。 表中的值不能多于行。
          type:
            - 'string[]'
  - uid: 'onenote!OneNote.Table#appendRow:member(1)'
    summary: |-
      将行添加至表格结尾。 指定的值在新行中设置。 否则该行为空。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: appendRow(values)
    fullName: appendRow(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRow(values?: string[]): OneNote.TableRow;'
      return:
        type:
          - 'onenote!OneNote.TableRow:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, append a column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.appendRow(["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: values
          description: 可选。 在新行中插入的字符串，指定为数组。 表中的值不能多于列。
          type:
            - 'string[]'
  - uid: 'onenote!OneNote.Table#borderVisible:member'
    summary: |-
      获取或设置边框是否可见。 如果为 true，则边框可见，如果为 false，则隐藏边框。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: borderVisible
    fullName: borderVisible
    langs:
      - typeScript
    type: property
    syntax:
      content: 'borderVisible: boolean;'
      return:
        type:
          - boolean
  - uid: 'onenote!OneNote.Table#clear:member(1)'
    summary: |-
      清除表内容。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'onenote!OneNote.Table#columnCount:member'
    summary: |-
      获取表中的列数。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.Table#context:member'
    summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Table#getCell:member(1)'
    summary: |-
      获取指定行和列处的表单元格。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'getCell(rowIndex, cellIndex)'
    fullName: 'getCell(rowIndex, cellIndex)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(rowIndex: number, cellIndex: number): OneNote.TableCell;'
      return:
        type:
          - 'onenote!OneNote.TableCell:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a cell in the second row and third column.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(2 /*Row Index*/, 3 /*Column Index*/);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowIndex
          description: 行的索引。
          type:
            - number
        - id: cellIndex
          description: 行中单元格的索引。
          type:
            - number
  - uid: 'onenote!OneNote.Table#id:member'
    summary: |-
      获取表格的 ID。 只读。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Table#insertColumn:member(1)'
    summary: |-
      在表中给定索引处插入一列。 指定的值在新列中设置。 否则该列为空。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertColumn(index, values)'
    fullName: 'insertColumn(index, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertColumn(index: number, values?: string[]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a column at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          table.insertColumn(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 表格中插入列位置的索引。
          type:
            - number
        - id: values
          description: 可选。 在新列中插入的字符串，指定为数组。 表中的值不能多于行。
          type:
            - 'string[]'
  - uid: 'onenote!OneNote.Table#insertRow:member(1)'
    summary: |-
      在表中给定索引处插入一行。 指定的值在新行中设置。 否则该行为空。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'insertRow(index, values)'
    fullName: 'insertRow(index, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertRow(index: number, values?: string[]): OneNote.TableRow;'
      return:
        type:
          - 'onenote!OneNote.TableRow:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, insert a row at index two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var row = table.insertRow(2, ["cell0", "cell1"]);
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 表格中插入行位置的索引。
          type:
            - number
        - id: values
          description: 可选。 在新行中插入的字符串，指定为数组。 表中的值不能多于列。
          type:
            - 'string[]'
  - uid: 'onenote!OneNote.Table#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性之前，你必须调用“context.sync()”。
    remarks: |-
      除了此签名之外，此方法还具有以下签名：

      `load(option?: string | string[]): OneNote.Table`-Where 选项是一个逗号分隔的字符串或一个字符串数组，用于指定要加载的属性。

      `load(option?: { select?: string; expand?: string; }): OneNote.Table`-Where 选项。选择是一个用逗号分隔的字符串，用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串，用于指定要加载的导航属性。

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Table`-仅适用于集合类型。 它类似于前面的签名。 Top 指定结果中可包含的集合项的最大数量。 选项。 skip 指定要跳过且不包含在结果中的项目数。 如果指定了 top 选项，则在跳过指定数目的项目后将启动结果集。
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableLoadOptions): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.TableLoadOptions:interface'
  - uid: 'onenote!OneNote.Table#load:member(2)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // For each table, log properties.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          ctx.load(table);
                          return ctx.sync().then(function() {
                              console.log("Table Id: " + table.id);
                              console.log("Row Count: " + table.rowCount);
                              console.log("Column Count: " + table.columnCount);
                              return ctx.sync();
                          });
                      }
                  }
              });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, log its paragraph id.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          ctx.load(table, "paragraph/id, rows/id");
                          return ctx.sync().then(function() {
                              console.log("Paragraph Id: " + table.paragraph.id);
                              var rows = table.rows;
                              
                              // for each rows in the table, log row index and id.
                              for (var i = 0; i < rows.items.length; i++) {
                                  console.log("Row " + i + " Id: " + rows.items[i].id);
                              }
                              return ctx.sync();
                          });
                      }
                  }
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Table#load:member(3)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 其中，propertyNamesAndPaths 是用逗号分隔的字符串，用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串，用于指定要加载的导航属性。
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Table#paragraph:member'
    summary: |-
      获取包含“表格”对象的“段落”对象。 只读。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: paragraph
    fullName: paragraph
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraph: OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
  - uid: 'onenote!OneNote.Table#rowCount:member'
    summary: |-
      获取表格中的行数。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.Table#rows:member'
    summary: |-
      获取所有表格行。 只读。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: rows
    fullName: rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rows: OneNote.TableRowCollection;'
      return:
        type:
          - 'onenote!OneNote.TableRowCollection:class'
  - uid: 'onenote!OneNote.Table#set:member(1)'
    summary: 同时设置一个对象的多个属性。 您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。
    remarks: |-
      此方法具有以下附加签名：

      `set(properties: OneNote.Table): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。
          type:
            - 'onenote!OneNote.Interfaces.TableUpdateData:interface'
        - id: options
          description: 提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。
          type:
            - 'onenote!OfficeExtension.UpdateOptions:interface'
  - uid: 'onenote!OneNote.Table#set:member(2)'
    summary: 基于现有加载的对象同时设置该对象的多个属性。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: OneNote.Table): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'onenote!OneNote.Table:class'
  - uid: 'onenote!OneNote.Table#setShadingColor:member(1)'
    summary: |-
      设置表格中所有单元格的底纹色。 要为单元格设置的颜色代码。

      \[[API 集： OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: setShadingColor(colorCode)
    fullName: setShadingColor(colorCode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShadingColor(colorCode: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: colorCode
          description: ''
          type:
            - string
  - uid: 'onenote!OneNote.Table#toJSON:member(1)'
    summary: 重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 OneNote 对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`OneNote.Interfaces.TableData`<!-- -->），其中包含原始对象中所有已加载的子属性的浅表副本。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.TableData:interface'
        description: ''
  - uid: 'onenote!OneNote.Table#track:member(1)'
    summary: 根据文档中的相应更改来跟踪对象，以便进行自动调整。 此调用是 context.trackedObjects.add(thisObject) 的缩写。 如果你在“.sync”调用之间和按顺序执行“.run”批处理之外使用此对象，并且在对象上设置属性或调用方法时出现“InvalidObjectPath”错误，则需要在首次创建对象时为跟踪的对象集合添加对象。
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
  - uid: 'onenote!OneNote.Table#untrack:member(1)'
    summary: 释放与此对象关联的内存（如果先前已跟踪过）。 此调用是 context.trackedObjects.add(thisObject) 的缩写。 拥有许多跟踪对象会降低主机应用程序的速度，因此请在使用完毕后释放所添加的任何对象。 在内存释放生效之前，你需要调用“context.sync()”。
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Table;'
      return:
        type:
          - 'onenote!OneNote.Table:class'
        description: ''
references:
  - uid: 'onenote!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.TableRow:class'
    name: OneNote.TableRow
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.TableCell:class'
    name: OneNote.TableCell
  - uid: 'onenote!OneNote.Table:class'
    name: OneNote.Table
  - uid: 'onenote!OneNote.Interfaces.TableLoadOptions:interface'
    name: OneNote.Interfaces.TableLoadOptions
  - uid: 'onenote!OneNote.Paragraph:class'
    name: OneNote.Paragraph
  - uid: 'onenote!OneNote.TableRowCollection:class'
    name: OneNote.TableRowCollection
  - uid: 'onenote!OneNote.Interfaces.TableUpdateData:interface'
    name: Interfaces.TableUpdateData
  - uid: 'onenote!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'onenote!OneNote.Interfaces.TableData:interface'
    name: OneNote.Interfaces.TableData