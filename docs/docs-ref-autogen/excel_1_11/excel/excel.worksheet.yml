### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:class
package: excel!
fullName: Excel.Worksheet
summary: >-
  Excel 工作表是由单元格组成的网格。 它可以包含数据、表、图表等。若要了解有关工作表对象模型的信息，请阅读使用 [Excel JavaScript API 处理工作表](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.


  \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: autoFilter
  uid: excel!Excel.Worksheet#autoFilter:member
  package: excel!
  fullName: autoFilter
  summary: >-
    表示工作表的 AutoFilter 对象。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type: <xref uid="excel!Excel.AutoFilter:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-auto-filter.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const farmData = sheet.getUsedRange();\n\n    // This filter will only show the rows with the top 25% of values in column 3.\n    sheet.autoFilter.apply(farmData, 3, { criterion1: \"25\", filterOn: Excel.FilterOn.topPercent });\n    await context.sync();\n});\n```"
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: >-
    返回属于工作表的图表的集合。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
- name: comments
  uid: excel!Excel.Worksheet#comments:member
  package: excel!
  fullName: comments
  summary: >-
    返回工作表上的所有 Comments 对象的集合。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly comments: Excel.CommentCollection;'
    return:
      type: <xref uid="excel!Excel.CommentCollection:class" />
- name: context
  uid: excel!Excel.Worksheet#context:member
  package: excel!
  fullName: context
  summary: 与对象关联的请求上下文。 这会将外接程序的进程连接到 Office 主机应用程序的进程。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: enableCalculation
  uid: excel!Excel.Worksheet#enableCalculation:member
  package: excel!
  fullName: enableCalculation
  summary: >-
    确定 Excel 是否在必要时重新计算工作表。 如果 Excel 在必要时重新计算工作表，则其为 True。 如果 Excel 不重新计算工作表，则该值为 False。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type: boolean
- name: freezePanes
  uid: excel!Excel.Worksheet#freezePanes:member
  package: excel!
  fullName: freezePanes
  summary: >-
    获取一个对象，该对象可用于处理工作表上的冻结窗格。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type: <xref uid="excel!Excel.WorksheetFreezePanes:class" />
- name: horizontalPageBreaks
  uid: excel!Excel.Worksheet#horizontalPageBreaks:member
  package: excel!
  fullName: horizontalPageBreaks
  summary: >-
    获取工作表的水平分页符集合。 此集合仅包含手动分页符。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:class" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: >-
    返回用于唯一标识指定工作簿中工作表的值。 即使工作表被重命名或移动，标识符的值仍然相同。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: >-
    工作表的显示名称。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: >-
    一组范围限定到当前工作表的名称。


    \[[API 集：ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:class" />
- name: onActivated
  uid: excel!Excel.Worksheet#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    在激活工作表时发生。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onCalculated
  uid: excel!Excel.Worksheet#onCalculated:member
  package: excel!
  fullName: onCalculated
  summary: >-
    计算工作表时发生。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetCalculatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onCalculated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The worksheet has recalculated.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onChanged
  uid: excel!Excel.Worksheet#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    当特定工作表中的数据发生更改时发生。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-worksheet.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n    await context.sync();\n\n    console.log(\"Added a worksheet-level data-changed event handler.\");\n});\n```"
- name: onColumnSorted
  uid: excel!Excel.Worksheet#onColumnSorted:member
  package: excel!
  fullName: onColumnSorted
  summary: >-
    在已对一个或多个列进行排序时发生。 这是从左到右排序操作的结果。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetColumnSortedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml\nawait Excel.run(async (context) => {\n    console.log(\"Adding column handler\");\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This will fire whenever a column has been moved as the result of a sort action.\n    sheet.onColumnSorted.add((event) => {\n        return Excel.run((context) => {\n            console.log(\"Column sorted: \" + event.address);\n            const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n            // Clear formatting for section, then highlight the sorted area.\n            sheet.getRange(\"A1:E5\").format.fill.clear();\n            if (event.address !== \"\") {\n                sheet.getRanges(event.address).format.fill.color = \"yellow\";\n            }\n\n            return context.sync();\n        });\n    });\n});\n```"
- name: onDeactivated
  uid: excel!Excel.Worksheet#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    在工作表停用时发生。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onFormatChanged
  uid: excel!Excel.Worksheet#onFormatChanged:member
  package: excel!
  fullName: onFormatChanged
  summary: >-
    在特定工作表上更改格式时发生。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetFormatChangedEventArgs:interface" />&gt;
- name: onRowHiddenChanged
  uid: excel!Excel.Worksheet#onRowHiddenChanged:member
  package: excel!
  fullName: onRowHiddenChanged
  summary: >-
    当特定工作表上一行或多行的隐藏状态发生更改时发生。


    \[[API 集：ExcelApi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetRowHiddenChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (context) {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.onRowHiddenChanged.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(`Row ${event.address} is now ${event.changeType}`);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onRowSorted
  uid: excel!Excel.Worksheet#onRowSorted:member
  package: excel!
  fullName: onRowSorted
  summary: >-
    在已对一个或多个行进行排序时发生。 这是从上到下排序操作的结果。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetRowSortedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml\nawait Excel.run(async (context) => {\n    console.log(\"Adding row handler\");\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This will fire whenever a row has been moved as the result of a sort action.\n    sheet.onRowSorted.add((event) => {\n        return Excel.run((context) => {\n            console.log(\"Row sorted: \" + event.address);\n            const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n            // Clear formatting for section, then highlight the sorted area.\n            sheet.getRange(\"A1:E5\").format.fill.clear();\n            if (event.address !== \"\") {\n                sheet.getRanges(event.address).format.fill.color = \"yellow\";\n            }\n\n            return context.sync();\n        });\n    });\n});\n```"
- name: onSelectionChanged
  uid: excel!Excel.Worksheet#onSelectionChanged:member
  package: excel!
  fullName: onSelectionChanged
  summary: >-
    当特定工作表上的选定内容发生更改时发生。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetSelectionChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onSingleClicked
  uid: excel!Excel.Worksheet#onSingleClicked:member
  package: excel!
  fullName: onSingleClicked
  summary: >-
    在工作表中发生左键单击/点击操作时发生。 在下列情况下单击时不会触发此事件：


    - 用户拖动鼠标进行多选。


    - 为公式引用选择单元格参数时，用户会选择该模式下的单元格。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetSingleClickedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-worksheet-single-click.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.onSingleClicked.add((event) => {\n        return Excel.run((context) => {\n            console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);\n            return context.sync();\n        });\n    });\n\n    console.log(\"The worksheet click handler is registered.\");\n\n    await context.sync();\n});\n```"
- name: pageLayout
  uid: excel!Excel.Worksheet#pageLayout:member
  package: excel!
  fullName: pageLayout
  summary: >-
    获取工作表的 PageLayout 对象。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pageLayout: Excel.PageLayout;'
    return:
      type: <xref uid="excel!Excel.PageLayout:class" />
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: >-
    一组属于工作表的数据透视表对象。


    \[[API 集：ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml\nawait Excel.run(async (context) => {\n  // Get the names of all the PivotTables in the current worksheet.\n  const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;\n  pivotTables.load(\"name\");\n  await context.sync();\n\n  // Display the names in the console.\n  console.log(\"PivotTables in the current worksheet:\")\n  pivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n});\n```"
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: >-
    工作表在工作簿中的位置，从零开始。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: >-
    返回表工作表的工作表保护对象。


    \[[API 集：ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Protect inserting or deleting rows in Sheet1\n  sheet.protection.protect({\n    allowInsertRows: false,\n    allowDeleteRows: false\n  });\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Unprotecting a worksheet with unprotect() will remove all \n// WorksheetProtectionOptions options applied to a worksheet.\n// To remove only a subset of WorksheetProtectionOptions use the \n// protect() method and set the options you wish to remove to true.\nExcel.run(function(ctx) {\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n  sheet.protection.protect({\n    allowInsertRows: false, // Protect row insertion\n    allowDeleteRows: true // Unprotect row deletion\n  });\n});\n```"
- name: shapes
  uid: excel!Excel.Worksheet#shapes:member
  package: excel!
  fullName: shapes
  summary: >-
    返回工作表上的所有 Shape 对象的集合。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly shapes: Excel.ShapeCollection;'
    return:
      type: <xref uid="excel!Excel.ShapeCollection:class" />
- name: showGridlines
  uid: excel!Excel.Worksheet#showGridlines:member
  package: excel!
  fullName: showGridlines
  summary: >-
    指定网格线是否对用户可见。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/gridlines.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- name: showHeadings
  uid: excel!Excel.Worksheet#showHeadings:member
  package: excel!
  fullName: showHeadings
  summary: >-
    指定标题是否对用户可见。


    \[[API 集：ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type: boolean
- name: slicers
  uid: excel!Excel.Worksheet#slicers:member
  package: excel!
  fullName: slicers
  summary: >-
    返回属于工作表的切片器的集合。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicers: Excel.SlicerCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Pivot\");\n    const slicer = sheet.slicers.add(\n        \"Farm Sales\", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */\n        \"Type\" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */\n    );\n    slicer.name = \"Fruit Slicer\";\n    await context.sync();\n});\n```"
- name: standardHeight
  uid: excel!Excel.Worksheet#standardHeight:member
  package: excel!
  fullName: standardHeight
  summary: >-
    返回工作表中所有行的标准（默认）行高，以磅为单位。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type: number
- name: standardWidth
  uid: excel!Excel.Worksheet#standardWidth:member
  package: excel!
  fullName: standardWidth
  summary: >-
    指定工作表中 (列) 列的默认列宽。 一个列宽单位等于“常规”样式中一个字符的宽度。 对于比例字体，则使用字符 0（零）的宽度。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'standardWidth: number;'
    return:
      type: number
- name: tabColor
  uid: excel!Excel.Worksheet#tabColor:member
  package: excel!
  fullName: tabColor
  summary: >-
    工作表的选项卡颜色。 检索选项卡颜色时，如果工作表不可见，则该值将为 null。 如果工作表可见，但选项卡颜色设置为自动，则返回空字符串。 否则，该属性将设置为一种颜色，格式为 \# "123456"。设置颜色时，请使用空字符串来设置"auto"颜色，否则使用真实颜色。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tabColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/tab-color.yaml\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: >-
    属于工作表的表的集合。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:class" />
- name: verticalPageBreaks
  uid: excel!Excel.Worksheet#verticalPageBreaks:member
  package: excel!
  fullName: verticalPageBreaks
  summary: >-
    获取工作表的垂直分页符集合。 此集合仅包含手动分页符。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:class" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: >-
    工作表的可见性。


    \[[API 集：用于读取可见性的 ExcelApi 1.1;用于设置它的 1.2。](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: >-
    在 Excel UI 中激活工作表。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: calculate(markAllDirty)
  uid: excel!Excel.Worksheet#calculate:member(1)
  package: excel!
  fullName: calculate(markAllDirty)
  summary: >-
    计算工作表上的所有单元格。


    \[[API 集：ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    parameters:
    - id: markAllDirty
      description: 真，要标记为脏。
      type: boolean
    return:
      type: void
      description: ''
- name: copy(positionType, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(1)
  package: excel!
  fullName: copy(positionType, relativeTo)
  summary: >-
    复制工作表，并放置于指定位置。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    parameters:
    - id: positionType
      description: 工作簿中放置新创建的工作表的位置。 默认值为"None"，将工作表插入工作表的开头。
      type: <xref uid="excel!Excel.WorksheetPositionType:enum" />
    - id: relativeTo
      description: 确定新创建的工作表的位置的现有工作表。 只有在为 `positionType` "Before"或"After"时，才需要这样做。
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: >-
        新创建的工作表。


        #### <a name="examples"></a>示例


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-copy.yaml

        await Excel.run(async (context) => {

            let myWorkbook = context.workbook;
            let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
            let copiedSheet = sampleSheet.copy("End")

            sampleSheet.load("name");
            copiedSheet.load("name");

            await context.sync();

            console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
        });

        ```
- name: copy(positionTypeString, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(2)
  package: excel!
  fullName: copy(positionTypeString, relativeTo)
  summary: >-
    复制工作表，并放置于指定位置。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    parameters:
    - id: positionTypeString
      description: 工作簿中放置新创建的工作表的位置。 默认值为"None"，将工作表插入工作表的开头。
      type: "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: 确定新创建的工作表的位置的现有工作表。 只有在为 `positionType` "Before"或"After"时，才需要这样做。
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: 新创建的工作表。
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    从工作簿中删除工作表。 请注意，如果工作表的可见性设置为"VeryHidden"，删除操作将失败，但出现 `InvalidOperation` 异常。 在删除之前，应首先将其可见性更改为隐藏或可见。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: findAll(text, criteria)
  uid: excel!Excel.Worksheet#findAll:member(1)
  package: excel!
  fullName: findAll(text, criteria)
  summary: >-
    根据指定的条件查找给定字符串的所有匹配项，并将它们作为包含一个或多个矩形区域的 RangeAreas 对象返回。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: criteria
      description: 其他搜索条件，包括搜索是否需要匹配整个单元格或区分大小写。
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: 一个 RangeArea 对象，包含一个或多个与搜索条件匹配的矩形区域。 如果没有单元格满足此条件，将引发 ItemNotFound 错误。
- name: findAllOrNullObject(text, criteria)
  uid: excel!Excel.Worksheet#findAllOrNullObject:member(1)
  package: excel!
  fullName: findAllOrNullObject(text, criteria)
  summary: >-
    根据指定的条件查找给定字符串的所有匹配项，并将它们作为包含一个或多个矩形区域的 RangeAreas 对象返回。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: criteria
      description: 其他搜索条件，包括搜索是否需要匹配整个单元格或区分大小写。
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: >-
        一个 RangeArea 对象，包含一个或多个与搜索条件匹配的矩形区域。 如果没有匹配项，此函数将返回 null 对象。


        #### <a name="examples"></a>示例


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/worksheet-find-all.yaml

        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem("Sample");
            const foundRanges = sheet.findAllOrNullObject("Complete", {
                completeMatch: true,
                matchCase: false
            });

            await context.sync();

            if (foundRanges.isNullObject) {
                console.log("No complete projects");
            } else {
                foundRanges.format.fill.color = "green"
            }
        });

        ```
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    根据行和列编号获取包含单个单元格的 range 对象。 单元格可以位于父区域外部，只要它保持在工作表网格内即可。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: 要检索的单元格的行号。 从零开始编制索引。
      type: number
    - id: column
      description: 要检索的单元格的列号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: >-
    获取此工作表后跟的工作表。 如果此工作表后没有工作表，此方法将引发错误。


    \[[API 集：ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 可选。 如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: >-
    获取此工作表后跟的工作表。 如果此工作表后没有工作表，此方法将返回 null 对象。


    \[[API 集：ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 可选。 如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: >-
    获取此工作表之前工作表。 如果没有以前的工作表，此方法将引发错误。


    \[[API 集：ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 可选。 如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: >-
    获取此工作表之前工作表。 如果没有以前的工作表，此方法将返回 null 对象。


    \[[API 集：ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: 可选。 如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: >-
    获取 range 对象，该对象代表由地址或名称指定的单个矩形单元格块。


    \[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    parameters:
    - id: address
      description: 可选。 表示区域地址或名称的字符串。 例如，"A1：B2"。 如果未指定，则返回整个工作表区域。
      type: string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  uid: excel!Excel.Worksheet#getRangeByIndexes:member(1)
  package: excel!
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  summary: >-
    获取以特定行索引和列索引开始并跨越了一定数量的行和列的 range 对象。


    \[[API 集：ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    parameters:
    - id: startRow
      description: 起始行 (从零开始) 。
      type: number
    - id: startColumn
      description: 起始列 (从零开始) 。
      type: number
    - id: rowCount
      description: 要包括在范围中的行数。
      type: number
    - id: columnCount
      description: 要包括在范围中的列数。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRanges(address)
  uid: excel!Excel.Worksheet#getRanges:member(1)
  package: excel!
  fullName: getRanges(address)
  summary: >-
    获取按地址或名称指定的 RangeAreas 对象，它表示一个或多个矩形区域块。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(address?: string): Excel.RangeAreas;'
    parameters:
    - id: address
      description: 可选。 包含以逗号分隔的地址或各个区域的名称的字符串。 例如，"A1：B2， A5：B5"。 如果未指定，则返回整个工作表的 RangeArea 对象。
      type: string
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: "使用的区域是包含分配了值或格式化的任何单元格的最小区域。 如果整个工作表为空，则此函数将返回左上方 (，即不会引发错误) 。 \n\n\\[[API 集：ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 可选。 如果为 true，则仅将值为已用单元格的单元格 (忽略格式设置) 。 \[Api 集：ExcelApi 1.2\]
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    使用的区域是包含分配了值或格式的任意单元格的最小区域。如果整个工作表为空，此函数将返回 NULL 对象。


    \[[API 集：ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 可选。 仅将有值的单元格视为已使用的单元格。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(options)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    parameters:
    - id: options
      description: 提供要加载的对象的属性的选项。
      type: <xref uid="excel!Excel.Interfaces.WorksheetLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    parameters:
    - id: propertyNames
      description: 用逗号分隔的字符串或字符串数组，用于指定要加载的属性。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Worksheet#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Worksheet;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` 是一个以逗号分隔的字符串，用于指定要加载的属性，它是一个以逗号分隔的字符串，用于指定要加载的 `propertyNamesAndPaths.expand` 导航属性。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Worksheet#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: >-
    根据当前工作表中指定的条件查找并替换给定的字符串。


    \[[API 集：ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: replacement
      description: 要替换为原始字符串。
      type: string
    - id: criteria
      description: 其他替换条件。
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: 执行的替换数。
- name: set(properties, options)
  uid: excel!Excel.Worksheet#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: 同时设置对象的多个属性。 你可以传递具有相应属性的普通对象，也可以传递同一类型的另一个 API 对象。
  remarks: >-
    此方法具有以下附加签名：


    `set(properties: Excel.Worksheet): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: 一个 JavaScript 对象，其属性以等态方式构造到调用该方法的对象的属性。
      type: <xref uid="excel!Excel.Interfaces.WorksheetUpdateData:interface" />
    - id: options
      description: 提供在属性对象尝试设置任何只读属性时禁止错误的选项。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Worksheet#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 基于现有的已加载对象，同时设置对象上的多个属性。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: void
      description: ''
- name: showOutlineLevels(rowLevels, columnLevels)
  uid: excel!Excel.Worksheet#showOutlineLevels:member(1)
  package: excel!
  fullName: showOutlineLevels(rowLevels, columnLevels)
  summary: >-
    按大纲级别显示行或列组。 大纲分组并汇总工作表中的数据列表。 和 `rowLevels` `columnLevels` 参数指定将显示大纲的级别数。 可接受的参数范围介于 0 和 8 之间。 值 0 不会更改当前显示。 大于当前级别数的值将显示所有级别。


    \[[API 集：ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
    parameters:
    - id: rowLevels
      description: 要显示的大纲的行级别数。
      type: number
    - id: columnLevels
      description: 要显示的大纲的列级别数。
      type: number
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This collapses the entire outline.\n    sheet.showOutlineLevels(1, 1);\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This shows the top 3 outline levels; collapsing any additional sublevels.\n    sheet.showOutlineLevels(3, 3);\n    await context.sync();\n});\n```"
- name: toJSON()
  uid: excel!Excel.Worksheet#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: 重写 JavaScript 方法，以便向 API 对象传递 `toJSON()` 时提供更多有用的输出 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->，反过来，调用传递给该对象的对象的方法。) 而原始 Excel.Worksheet 对象是一个 API 对象，该方法返回一个类型为 (`toJSON` `toJSON` JavaScript 对象 `Excel.Interfaces.WorksheetData`<!-- -->) 包含原始对象中任何加载的子属性的浅表副本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.WorksheetData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 00af4b2ab07cfa4bf9fa2f6aaa409d8a4c073edd
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49857701"
