### YamlMime:TSType
name: Office.RoamingSettings
uid: outlook!Office.RoamingSettings:interface
package: outlook!
fullName: Office.RoamingSettings
summary: >-
  通过使用 `RoamingSettings` 对象的方法创建的设置将按外接程序和按用户进行保存。 也就是说，它们仅可用于创建它们的外接程序，并且仅可用于保存它们的用户的邮箱。


  虽然 Outlook 加载项 API 将对这些设置的访问限制为仅限创建它们的外接程序，但不应将这些设置视为安全存储。 可以通过 Exchange Web 服务或扩展 MAPI 访问这些设置。 它们不应用于存储敏感信息，如用户凭据或安全令牌。


  设置的名称是一个字符串，而值可以是字符串、数字、布尔值、null 值、对象或数组。


  可通过 `RoamingSettings` 命名空间中的 `roamingSettings` 属性访问 `Office.context` 对象。


  **重要说明**：


  - `RoamingSettings`只有在首次加载加载项时，才会从持久化存储初始化该对象。 对于任务窗格，这意味着仅在第一次打开任务窗格时才会对其进行初始化。 如果任务窗格导航到另一个页面或重新加载当前页面，则内存中的对象将重置为其初始值，即使您的外接程序具有持续的更改也是如此。 直到关闭并重新打开任务窗格的加载项) 关闭并重新打开时，保留的更改才会在任务窗格 (或项目的情况下可用。


  - 设置并保存通过 Outlook on Windows 或 Mac 时，只有在浏览器刷新后，这些设置才会在 web 上的 Outlook 中反映出来。
remarks: >-
  **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


  **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
isPreview: false
isDeprecated: false
type: interface
methods:
- name: get(name)
  uid: outlook!Office.RoamingSettings#get:member(1)
  package: outlook!
  fullName: get(name)
  summary: 检索指定设置。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = Office.context.roamingSettings.get(settingName);

    $("#settingValue").val(settingValue);

    console.log(`The value of setting "${settingName}" is "${settingValue}".`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'get(name: string): any;'
    parameters:
    - id: name
      description: 要检索的设置的区分大小写的名称。
      type: string
    return:
      type: any
      description: 类型： String \| Number \| Boolean \| 对象 \| 数组
- name: remove(name)
  uid: outlook!Office.RoamingSettings#remove:member(1)
  package: outlook!
  fullName: remove(name)
  summary: 删除指定的设置
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'remove(name: string): void;'
    parameters:
    - id: name
      description: 要移除的设置的区分大小写的名称。
      type: string
    return:
      type: void
      description: ''
- name: saveAsync(callback)
  uid: outlook!Office.RoamingSettings#saveAsync:member(1)
  package: outlook!
  fullName: saveAsync(callback)
  summary: >-
    保存设置。


    加载项以前保存的任何设置都会在初始化时加载，因此，在会话的生存期期间，可以只使用 set 和 get 方法来处理设置属性包的内存副本。 如果希望保留设置以便可在下次使用外接程序时使用这些设置，请使用 saveAsync 方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    // Save settings in the mailbox to make it available in future sessions.

    Office.context.roamingSettings.saveAsync(function(result) {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
      } else {
        console.log(`Settings saved with status: ${result.status}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: 可选。 方法完成后， `callback` 使用单个参数类型调用在参数中传递的函数 `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: set(name, value)
  uid: outlook!Office.RoamingSettings#set:member(1)
  package: outlook!
  fullName: set(name, value)
  summary: >-
    设置或创建指定设置。


    `set`如果指定名称尚不存在，则该方法将创建一个新设置，或设置指定名称的现有设置。 该值在文档中存储为其数据类型的序列化 JSON 表示形式。


    每个加载项的设置最多可使用32KB。


    在调用函数之前，使用 set 函数对设置所做的任何更改都不会保存到服务器 `saveAsync` 。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = $("#settingValue").val();

    Office.context.roamingSettings.set(settingName, settingValue);

    console.log(`Setting "${settingName}" set to value "${settingValue}".`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(name: string, value: any): void;'
    parameters:
    - id: name
      description: 要设置或创建的设置的名称（区分大小写）。
      type: string
    - id: value
      description: Specifies the value to be stored.
      type: any
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: f6136a4f9143de97fa15166ec887e0ab878564c0
  ms.sourcegitcommit: a6ecbc9abca2ab5c82af4c869e3e2d72c999a4c1
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 12/02/2020
  ms.locfileid: "49540624"
