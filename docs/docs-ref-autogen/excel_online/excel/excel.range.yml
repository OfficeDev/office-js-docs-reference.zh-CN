### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: |-
      Range 表示一个或多个连续单元格的集合，例如单元格、行、列、单元格块等。若要了解有关如何在整个 API 中使用范围的详细信息，请参阅[使用 Excel JAVASCRIPT Api 处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)并使用[excel javascript api （高级）处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!-- -->.

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#autoFill:member(2)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#copyFrom:member(2)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getCellProperties:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnProperties:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowProperties:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(2)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#group:member(1)'
      - 'excel!Excel.Range#group:member(2)'
      - 'excel!Excel.Range#height:member'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hideGroupDetails:member(1)'
      - 'excel!Excel.Range#hideGroupDetails:member(2)'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#left:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#setCellProperties:member(1)'
      - 'excel!Excel.Range#setColumnProperties:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#setRowProperties:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(2)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#top:member'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#ungroup:member(1)'
      - 'excel!Excel.Range#ungroup:member(2)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#width:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: |-
      表示 A1 样式的区域引用。 Address 值将包含工作表引用（例如，"Sheet1！A1： B4 "）。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: |-
      以用户语言表示对指定区域的区域引用。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      使用指定的自动填充逻辑将范围从当前范围填充到目标区域。 目标区域可以是 null，也可以是水平或垂直扩展源。 不支持不连续的区域。

      有关详细信息，请参阅[使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.

      \[[API 集： ExcelApi 1.9、ExcelApi Preview for null `destinationRange` ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getActiveWorksheet();
            const sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          });
          ```
      parameters:
        - id: destinationRange
          description: 要自动填充的目标区域。 如果目标区域为 null，则根据周围单元格（双击 UI 的区域填充句柄时的行为）填充数据。
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: 自动填充的类型。 根据当前区域的内容，指定目标区域的填充方式。 默认值为 "FillDefault"。
          type:
            - 'excel!Excel.AutoFillType:enum'
  - uid: 'excel!Excel.Range#autoFill:member(2)'
    summary: |-
      使用指定的自动填充逻辑将范围从当前范围填充到目标区域。 目标区域可以是 null，也可以是水平或垂直扩展源。 不支持不连续的区域。

      有关详细信息，请参阅[使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.

      \[[API 集： ExcelApi 1.9、ExcelApi Preview for null `destinationRange` ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange?: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: 要自动填充的目标区域。 如果目标区域为 null，则根据周围单元格（双击 UI 的区域填充句柄时的行为）填充数据。
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeString
          description: 自动填充的类型。 根据当前区域的内容，指定目标区域的填充方式。 默认值为 "FillDefault"。
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: |-
      计算工作表上的单元格区域。

      \[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: |-
      范围中的单元格数。 如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: |-
      清除区域值、格式、填充、边框等。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 ClearApplyTo。
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: |-
      清除区域值、格式、填充、边框等。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 ClearApplyTo。
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: |-
      表示区域中的列总数。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: |-
      表示当前区域中的所有列是否隐藏。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: |-
      表示区域中第一个单元格的列编号。 从零开始编制索引。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: |-
      与该范围相交的 ConditionalFormats 的集合。 只读。

      \[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.Range#context:member'
    summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: |-
      将具有数据类型的区域单元格转换为文本。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: |-
      将区域单元格转换为工作表中的链接数据类型。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: 将用于查询数据的服务 ID。
          type:
            - number
        - id: languageCulture
          description: 要为其查询服务的语言区域性。
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: |-
      将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。 目标区域的大小可以与源区域或 RangeAreas 的大小不同。 如果目标小于源，则将自动扩展目标。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: 要从其复制的源区域或 RangeAreas。 当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: 要复制的单元格数据的类型或格式。 默认值为 "All"。
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: 如果为 True，则在源区域中跳过空白单元格。 默认为 false。
          type:
            - boolean
        - id: transpose
          description: 如此如果要转置目标区域中的单元格。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#copyFrom:member(2)'
    summary: |-
      将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。 目标区域的大小可以与源区域或 RangeAreas 的大小不同。 如果目标小于源，则将自动扩展目标。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 要从其复制的源区域或 RangeAreas。 当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: copyTypeString
          description: 要复制的单元格数据的类型或格式。 默认值为 "All"。
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: 如果为 True，则在源区域中跳过空白单元格。 默认为 false。
          type:
            - boolean
        - id: transpose
          description: 如此如果要转置目标区域中的单元格。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: |-
      返回数据有效性对象。

      \[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: |-
      删除与区域相关的单元格。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: 指定移动单元格的方式。 有关详细信息，请参阅 DeleteShiftDirection。
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: |-
      删除与区域相关的单元格。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: 指定移动单元格的方式。 有关详细信息，请参阅 DeleteShiftDirection。
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: |-
      根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          表示第一个单元格的 Range 对象，其中包含与搜索文本和条件相匹配的值。

          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: 要查找的字符串。
          type:
            - string
        - id: criteria
          description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: |-
      根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。 如果没有匹配项，则此函数将返回一个 null 对象。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          与搜索条件匹配的范围。

          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: 要查找的字符串。
          type:
            - string
        - id: criteria
          description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: |-
      对当前区域进行快速填充。快速填充在感知到模式时可自动填充数据，因此该区域必须是单列区域且周围有数据以便查找模式。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: |-
      返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: |-
      表示采用 A1 表示法的公式。 将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。 如果参数是单个值，它将应用于区域中的所有单元格。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: |-
      表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。 如果参数是单个值，它将应用于区域中的所有单元格。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: |-
      表示采用 R1C1 样式表示法的公式。 将公式设置为区域时，value 参数可以是单个值（字符串），也可以是二维数组。 如果参数是单个值，它将应用于区域中的所有单元格。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: |-
      获取一个 Range 对象，该对象的左上单元格与当前 Range 对象相同，但具有指定的行数和列数。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: 新范围大小的行数。
          type:
            - number
        - id: numColumns
          description: 新范围大小的列数。
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: |-
      获取包含指定区域的最小 range 对象。 例如，“B2:C5”和“D10:E15”的 GetBoundingRect 为“B2:E15”。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: range 对象或地址或区域名称。
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: |-
      根据行和列编号获取包含单个单元格的 range 对象。 单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。 返回的单元格位于相对于区域左上角的单元格的位置。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: 要检索的单元格的行号。 从零开始编制索引。
          type:
            - number
        - id: column
          description: 要检索的单元格的列号。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.Range#getCellProperties:member(1)'
    summary: |-
      返回一个 2D 数组，其中封装了每个单元格的字体、填充、边框、对齐方式和其他属性数据。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel!Excel.Range#getCellProperties~0:complex'
        description: |-
          一个二维数组，其中每一项代表对应单元格的请求属性。

          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: 一个代表要加载的单元格属性的对象。
          type:
            - 'excel!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: |-
      获取范围中包含的列。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: 要检索的区域的列号。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnProperties:member(1)'
    summary: |-
      返回一个一维数组，其中封装了每个列的字体、填充、边框、对齐方式和其他属性数据。 对于给定列中每个单元格不一致的属性，将返回 null。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getColumnProperties~0:complex'
        description: 一个数组，其中每个项代表相应列的请求的属性。
      parameters:
        - id: columnPropertiesLoadOptions
          description: 一个代表要加载的列属性的对象。
          type:
            - 'excel!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: |-
      获取当前范围对象右侧的一定数量的列。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: |-
      获取当前范围对象左侧的一定数量的列。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: |-
      获取一个对象，该对象代表区域的整列（例如，如果当前区域表示单元格 "B4： E11"，则它`getEntireColumn`是表示列 "B:E" 的区域）。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: |-
      获取一个对象，该对象表示区域的整行（例如，如果当前区域表示单元格 "B4： E11"，则它`GetEntireRow`是表示行 "4:11" 的区域）。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: |-
      将区域呈现为 base64 编码的 png 图像。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: |-
      获取表示指定区域的矩形交集的 range 对象。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: 将用于确定区域交集的 range 对象或区域地址。
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: |-
      获取表示指定区域的矩形交集的 range 对象。 如果找不到任何交集，则此方法返回空对象。

      \[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: 将用于确定区域交集的 range 对象或区域地址。
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: |-
      获取区域内的最后一个单元格。 例如，“B2:D5”的最后一个单元格是“D5”。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: |-
      获取区域内的最后一列。 例如，“B2:D5”的最后一列是“D2:D5”。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: |-
      获取区域内的最后一行。 例如，“B2:D5”的最后一行是“B5:D5”。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: |-
      获取表示与指定区域偏移的区域的对象。返回的区域的尺寸将与此区域一致。如果强制在工作表网格的边界之外生成区域，将引发错误。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: 区域偏移的行数（正数、负数或 0）。正数表示向下偏移，负数表示向上偏移。
          type:
            - number
        - id: columnOffset
          description: 区域偏移的列数（正数、负数或 0）。正数表示向右偏移，负数表示向左偏移。
          type:
            - number
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: |-
      获取与当前范围对象类似的范围对象，但其右下角可通过一定数量的行和列进行展开（或合拢）。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: 相对于当前范围，展开右下角的行数。使用正数可展开范围，使用负数可合拢范围。
          type:
            - number
        - id: deltaColumns
          description: 相对于当前范围，从右下角扩展的列数。 使用正数可展开范围，使用负数可合拢范围。
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: |-
      获取范围中包含的行。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: 要检索的区域的行号。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.Range#getRowProperties:member(1)'
    summary: |-
      返回一个一维数组，其中封装了每个行的字体、填充、边框、对齐方式和其他属性数据。 对于给定行中每个单元格不一致的属性，将返回 null。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getRowProperties~0:complex'
        description: 一个数组，其中每个项代表相应行的请求属性。
      parameters:
        - id: rowPropertiesLoadOptions
          description: 一个代表要加载的行属性的对象。
          type:
            - 'excel!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: |-
      获取当前范围对象上方的一定数量的行。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: |-
      获取当前范围对象下方的一定数量的行。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: |-
      获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则将引发 ItemNotFound 错误。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCells:member(2)'
    summary: |-
      获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则将引发 ItemNotFound 错误。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: 要包含的单元格的类型。
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: |-
      获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则返回 null 对象。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: |-
      获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则返回 null 对象。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: 要包含的单元格的类型。
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: |-
      返回一个 Range 对象，该对象表示此区域左上单元格的周围区域。 周围区域是由相对于该区域的空白行和空白列的任何组合所限定的区域。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: |-
      获取与区域重叠的限定范围的表格集合。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: 如果为 true，则仅返回完全包含在区域边界内的表。 默认值为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: |-
      返回指定 Range 对象的所用区域。如果区域内没有使用单元格，此函数将引发 ItemNotFound 错误。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '仅将有值的单元格视为已使用的单元格。 \[Api 集： ExcelApi 1。2\]'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: |-
      返回指定 Range 对象的所用区域。如果区域内没有使用单元格，此函数将返回 NULL 对象。

      \[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: 仅将有值的单元格视为已使用的单元格。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: |-
      表示当前 range 对象的可见行。

      \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:class'
        description: ''
  - uid: 'excel!Excel.Range#group:member(1)'
    summary: |-
      对列和行进行分组以进行分级显示。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          });
          ```
      parameters:
        - id: groupOption
          description: 指定如何按行或列对区域进行分组。 当`InvalidArgument`组选项与范围`isEntireRow`或`isEntireColumn`属性不同时（即， `range.isEntireRow`为 true 且`groupOption`为 "ByColumns"，或者`range.isEntireColumn` `groupOption`为 "ByRows"）时，将引发错误。
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#group:member(2)'
    summary: |-
      对列和行进行分组以进行分级显示。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: group(groupOptionString)
    fullName: group(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: 指定如何按行或列对区域进行分组。 当`InvalidArgument`组选项与范围`isEntireRow`或`isEntireColumn`属性不同时（即， `range.isEntireRow`为 true 且`groupOption`为 "ByColumns"，或者`range.isEntireColumn` `groupOption`为 "ByRows"）时，将引发错误。
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#height:member'
    summary: |-
      返回从区域的上边缘到区域的下边缘的 100％ 缩放的距离（以磅为单位）。 只读。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#hidden:member'
    summary: |-
      表示当前区域中的所有单元格是否隐藏。 只读。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    summary: |-
      隐藏行或列组的详细信息。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 指定是否隐藏分组行或分组列的详细信息。
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#hideGroupDetails:member(2)'
    summary: |-
      隐藏行或列组的详细信息。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hideGroupDetails(groupOptionString)
    fullName: hideGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: 指定是否隐藏分组行或分组列的详细信息。
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: |-
      表示当前区域的超链接。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: |-
      将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: 指定移动单元格的方式。 有关详细信息，请参阅 InsertShiftDirection。
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: |-
      将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: 指定移动单元格的方式。 有关详细信息，请参阅 InsertShiftDirection。
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: |-
      表示当前区域是否为整列。 只读。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: |-
      表示当前区域是否为整行。 只读。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#left:member'
    summary: |-
      返回从工作表的左边缘到区域的左边缘的 100％ 缩放的距离（以磅为单位）。 只读。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: |-
      表示每个单元格的数据类型状态。 只读。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: options
          description: 提供要加载的对象的属性的选项。
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: 将命令加入队列以加载对象的指定属性。 在读取属性`context.sync()`之前，必须先调用。
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: |-
      将范围单元格合并到工作表的一个区域内。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: 可选。 如果为 True，则将指定区域中每一行的单元格合并为一个单独的合并单元格。 默认值是 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: |-
      表示给定范围的 Excel 数字格式代码。 将数字格式设置为一个区域时，value 参数可以是单个值（string），也可以是二维数组。 如果参数是单个值，它将应用于区域中的所有单元格。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: |-
      根据用户的语言设置，表示给定范围的 Excel 数字格式代码。 将数字格式设置为局部区域时，value 参数可以是单个值（字符串），也可以是二维数组。 如果参数是单个值，它将应用于区域中的所有单元格。 在获取或设置`numberFormatLocal`属性时，Excel 不会执行任何语言或格式强制。 任何返回的文本将根据系统设置中指定的语言使用本地格式化的字符串。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: |-
      从列指定的区域中删除重复值。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:class'
        description: |-
          生成的对象，其中包含已删除的行数和剩余的唯一行数。

          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: 区域中可能包含重复项的列。 至少需要指定一个列。 从零开始编制索引。
          type:
            - 'number[]'
        - id: includesHeader
          description: 如果输入数据包含标头，则为 True。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: |-
      根据当前区域内指定的条件查找并替换给定的字符串。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: 执行的替换的次数。
      parameters:
        - id: text
          description: 要查找的字符串。
          type:
            - string
        - id: replacement
          description: 要将原始替换为的字符串。
          type:
            - string
        - id: criteria
          description: 其他替换条件。
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: |-
      返回区域中的总行数。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: |-
      表示当前区域中的所有行是否隐藏。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: |-
      返回区域中第一个单元格的行编号。 从零开始编制索引。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: |-
      在 Excel UI 中选择指定的区域。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: 同时设置一个对象的多个属性。 您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。
    remarks: |-
      此方法具有以下附加签名：

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a>示例

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: 提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: 基于现有加载的对象同时设置该对象的多个属性。
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#setCellProperties:member(1)'
    summary: |-
      根据单元格属性的 2D 数组更新区域，它封装了字体、填充、边框、对齐方式等内容。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Built-in style names are listed in the `BuiltInStyle` enum.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: 一个二维数组，表示要在每个单元格中设置的属性。
          type:
            - 'excel!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel!Excel.Range#setColumnProperties:member(1)'
    summary: |-
      根据列属性的一维数组更新区域，它封装了字体、填充、边框、对齐方式等内容。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: 一个数组，表示要在每个列中设置的属性。
          type:
            - 'excel!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: |-
      设置下一次重新计算发生时要重新计算的区域。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setRowProperties:member(1)'
    summary: |-
      根据行属性的一维数组更新区域，它封装了字体、填充、边框、对齐方式等内容。

      \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: 一个数组，表示要在每行中设置的属性。
          type:
            - 'excel!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: |-
      显示活动单元格的卡片（如果该单元格具有富值内容）。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    summary: |-
      显示行或列组的详细信息。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 指定是否显示分组行或分组列的详细信息。
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#showGroupDetails:member(2)'
    summary: |-
      显示行或列组的详细信息。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: showGroupDetails(groupOptionString)
    fullName: showGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: 指定是否显示分组行或分组列的详细信息。
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#sort:member'
    summary: |-
      表示当前 range 的区域排序。 只读。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:class'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function sortTopToBottom(criteria: string) {
              await Excel.run(async (context) => {
                  const sheet = context.workbook.worksheets.getActiveWorksheet();
                  const range = sheet.getRange("A1:E5");

                  // Find the column header that provides the sort criteria.
                  const header = range.find(criteria, {});
                  header.load("columnIndex");
                  await context.sync();

                  range.sort.apply(
                      [
                          {
                              key: header.columnIndex,
                              sortOn: Excel.SortOn.value
                          }
                      ],
                      false /*matchCase*/,
                      true /*hasHeaders*/,
                      Excel.SortOrientation.rows
                  );
                  await context.sync();
              });
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: |-
      表示当前区域的样式。 如果单元格的样式不一致，则将返回 null。 对于自定义样式，将返回样式名称。 对于内置样式，将返回一个表示 BuiltInStyle 枚举中的值的字符串。

      \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: |-
      指定区域的文本值。 文本值与单元格宽度无关。 Excel \# UI 中发生的符号替换不会影响 API 返回的文本值。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: 重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel Range 对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.RangeData`<!-- -->），其中包含原始对象中所有已加载的子属性的浅表副本。
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#top:member'
    summary: |-
      返回从工作表的上边缘到区域的上边缘的 100％ 缩放的距离（以磅为单位）。 只读。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: 根据文档中的相应更改来跟踪对象，以便进行自动调整。 此调用是的简写`context.trackedObjects.add(thisObject)`<!-- -->. 如果要在多`.sync`个调用中使用此对象，并在 "运行" 批处理的顺序执行之外使用此对象，并在设置属性或对对象调用方法时获取 "InvalidObjectPath" 错误，则需要向跟踪的对象添加对象首次创建对象时的集合。
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#ungroup:member(1)'
    summary: |-
      取消边框的列和行的组合。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          });
          ```
      parameters:
        - id: groupOption
          description: 指定如何将区域与行或列取消组合。
          type:
            - 'excel!Excel.GroupOption:enum'
  - uid: 'excel!Excel.Range#ungroup:member(2)'
    summary: |-
      取消边框的列和行的组合。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: ungroup(groupOptionString)
    fullName: ungroup(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: 指定如何将区域与行或列取消组合。
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: |-
      将范围单元格取消合并为各个单元格。

      \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: 释放与此对象关联的内存（如果先前已跟踪过）。 此调用是的简写`context.trackedObjects.remove(thisObject)`<!-- -->. 拥有许多跟踪对象会降低主机应用程序的速度，因此请在使用完毕后释放所添加的任何对象。 在内存释放生效之前`context.sync()` ，您需要调用该过程。
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: |-
      表示指定区域的原始值。 返回的数据可能是字符串、数字，也可能是布尔值。 包含错误的单元格将返回错误字符串。 将值设置为一个范围时，value 参数可以是单个值（string、number 或 boolean），也可以是一个二维数组。 如果参数是单个值，它将应用于区域中的所有单元格。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: |-
      表示每个单元格的数据类型。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#width:member'
    summary: |-
      返回从区域的左边缘到区域的右边缘的 100％ 缩放的距离（以磅为单位）。 只读。

      \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: |-
      包含当前区域的工作表。 只读。

      \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getCellProperties~0:complex'
    name: 'OfficeExtension.ClientResult<CellProperties[][]>'
    fullName: 'OfficeExtension.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getColumnProperties~0:complex'
    name: 'OfficeExtension.ClientResult<ColumnProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getRowProperties~0:complex'
    name: 'OfficeExtension.ClientResult<RowProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel!Excel.GroupOption:enum'
    name: Excel.GroupOption
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet