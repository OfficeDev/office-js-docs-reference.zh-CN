### YamlMime:TSType
name: Excel.Range
uid: excel!Excel.Range:class
package: excel!
fullName: Excel.Range
summary: >-
  Range 表示一个或多个连续单元格的集合，例如单元格、行、列、单元格块等。若要了解有关如何在整个 API 中使用范围的详细信息，请参阅 [使用 Excel JAVASCRIPT Api 处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) 并使用 [excel javascript api (高级) ](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!-- -->.


  \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: address
  uid: excel!Excel.Range#address:member
  package: excel!
  fullName: address
  summary: >-
    指定 A1 样式中的区域引用。 Address 值将包含工作表引用 (例如，"Sheet1！A1： B4 ") 。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly address: string;'
    return:
      type: string
- name: addressLocal
  uid: excel!Excel.Range#addressLocal:member
  package: excel!
  fullName: addressLocal
  summary: >-
    以用户语言指定区域的区域引用。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type: string
- name: cellCount
  uid: excel!Excel.Range#cellCount:member
  package: excel!
  fullName: cellCount
  summary: >-
    指定区域中的单元格的数目。 如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type: number
- name: columnCount
  uid: excel!Excel.Range#columnCount:member
  package: excel!
  fullName: columnCount
  summary: >-
    指定区域中的总列数。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type: number
- name: columnHidden
  uid: excel!Excel.Range#columnHidden:member
  package: excel!
  fullName: columnHidden
  summary: >-
    表示当前区域中的所有列是否隐藏。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type: boolean
- name: columnIndex
  uid: excel!Excel.Range#columnIndex:member
  package: excel!
  fullName: columnIndex
  summary: >-
    指定区域中的第一个单元格的列号。 从零开始编制索引。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type: number
- name: conditionalFormats
  uid: excel!Excel.Range#conditionalFormats:member
  package: excel!
  fullName: conditionalFormats
  summary: >-
    与该范围相交的 ConditionalFormats 的集合。


    \[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type: <xref uid="excel!Excel.ConditionalFormatCollection:class" />
- name: context
  uid: excel!Excel.Range#context:member
  package: excel!
  fullName: context
  summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: dataValidation
  uid: excel!Excel.Range#dataValidation:member
  package: excel!
  fullName: dataValidation
  summary: >-
    返回数据有效性对象。


    \[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type: <xref uid="excel!Excel.DataValidation:class" />
- name: format
  uid: excel!Excel.Range#format:member
  package: excel!
  fullName: format
  summary: >-
    返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type: <xref uid="excel!Excel.RangeFormat:class" />
- name: formulas
  uid: excel!Excel.Range#formulas:member
  package: excel!
  fullName: formulas
  summary: >-
    表示采用 A1 表示法的公式。 如果单元格没有公式，则改为返回它的值。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulas: any[][];'
    return:
      type: any[][]
- name: formulasLocal
  uid: excel!Excel.Range#formulasLocal:member
  package: excel!
  fullName: formulasLocal
  summary: >-
    表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果单元格没有公式，则改为返回它的值。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type: any[][]
- name: formulasR1C1
  uid: excel!Excel.Range#formulasR1C1:member
  package: excel!
  fullName: formulasR1C1
  summary: >-
    表示采用 R1C1 样式表示法的公式。 如果单元格没有公式，则改为返回它的值。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type: any[][]
- name: hasSpill
  uid: excel!Excel.Range#hasSpill:member
  package: excel!
  fullName: hasSpill
  summary: >-
    表示所有单元格是否都具有溢出边框。 如果所有单元格都有溢出边框，则返回 true; 如果所有单元格都没有溢出边框，则返回 false。 如果区域中有和没有溢出边框的单元格，则返回 null。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hasSpill: boolean;'
    return:
      type: boolean
- name: height
  uid: excel!Excel.Range#height:member
  package: excel!
  fullName: height
  summary: >-
    返回从区域的上边缘到区域的下边缘的 100％ 缩放的距离（以磅为单位）。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly height: number;'
    return:
      type: number
- name: hidden
  uid: excel!Excel.Range#hidden:member
  package: excel!
  fullName: hidden
  summary: >-
    表示当前区域中的所有单元格是否隐藏。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type: boolean
- name: hyperlink
  uid: excel!Excel.Range#hyperlink:member
  package: excel!
  fullName: hyperlink
  summary: >-
    表示当前区域的超链接。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type: <xref uid="excel!Excel.RangeHyperlink:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-hyperlink.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- name: isEntireColumn
  uid: excel!Excel.Range#isEntireColumn:member
  package: excel!
  fullName: isEntireColumn
  summary: >-
    表示当前区域是否为整列。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type: boolean
- name: isEntireRow
  uid: excel!Excel.Range#isEntireRow:member
  package: excel!
  fullName: isEntireRow
  summary: >-
    表示当前区域是否为整行。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type: boolean
- name: left
  uid: excel!Excel.Range#left:member
  package: excel!
  fullName: left
  summary: >-
    返回从工作表的左边缘到区域的左边缘的 100％ 缩放的距离（以磅为单位）。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly left: number;'
    return:
      type: number
- name: linkedDataTypeState
  uid: excel!Excel.Range#linkedDataTypeState:member
  package: excel!
  fullName: linkedDataTypeState
  summary: >-
    表示每个单元格的数据类型状态。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
    return:
      type: <xref uid="excel!Excel.LinkedDataTypeState:enum" />[][]
- name: numberFormat
  uid: excel!Excel.Range#numberFormat:member
  package: excel!
  fullName: numberFormat
  summary: >-
    表示给定范围的 Excel 数字格式代码。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type: any[][]
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: numberFormatCategories
  uid: excel!Excel.Range#numberFormatCategories:member
  package: excel!
  fullName: numberFormatCategories
  summary: >-
    表示每个单元格的数字格式的类别。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly numberFormatCategories: Excel.NumberFormatCategory[][];'
    return:
      type: <xref uid="excel!Excel.NumberFormatCategory:enum" />[][]
- name: numberFormatLocal
  uid: excel!Excel.Range#numberFormatLocal:member
  package: excel!
  fullName: numberFormatLocal
  summary: >-
    根据用户的语言设置，表示给定范围的 Excel 数字格式代码。 在获取或设置属性时，Excel 不会执行任何语言或格式强制 `numberFormatLocal` 。 任何返回的文本将根据系统设置中指定的语言使用本地格式化的字符串。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type: any[][]
- name: rowCount
  uid: excel!Excel.Range#rowCount:member
  package: excel!
  fullName: rowCount
  summary: >-
    返回区域中的总行数。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type: number
- name: rowHidden
  uid: excel!Excel.Range#rowHidden:member
  package: excel!
  fullName: rowHidden
  summary: >-
    表示当前区域中的所有行是否隐藏。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type: boolean
- name: rowIndex
  uid: excel!Excel.Range#rowIndex:member
  package: excel!
  fullName: rowIndex
  summary: >-
    返回区域中第一个单元格的行编号。 从零开始编制索引。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
- name: savedAsArray
  uid: excel!Excel.Range#savedAsArray:member
  package: excel!
  fullName: savedAsArray
  summary: >-
    表示是否将所有单元格都保存为数组公式。 如果所有单元格都将保存为数组公式，则返回 true; 如果不将所有单元格保存为数组公式，则返回 false。 如果某些单元格将另存为数组公式，则返回 null，而某些单元格则不是。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly savedAsArray: boolean;'
    return:
      type: boolean
- name: sort
  uid: excel!Excel.Range#sort:member
  package: excel!
  fullName: sort
  summary: >-
    表示当前 range 的区域排序。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type: <xref uid="excel!Excel.RangeSort:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/event-column-and-row-sort.yaml\nasync function sortTopToBottom(criteria: string) {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const range = sheet.getRange(\"A1:E5\");\n\n        // Find the column header that provides the sort criteria.\n        const header = range.find(criteria, {});\n        header.load(\"columnIndex\");\n        await context.sync();\n\n        range.sort.apply(\n            [\n                {\n                    key: header.columnIndex,\n                    sortOn: Excel.SortOn.value\n                }\n            ],\n            false /*matchCase*/,\n            true /*hasHeaders*/,\n            Excel.SortOrientation.rows\n        );\n        await context.sync();\n    });\n}\n```"
- name: style
  uid: excel!Excel.Range#style:member
  package: excel!
  fullName: style
  summary: >-
    表示当前区域的样式。 如果单元格的样式不一致，则将返回 null。 对于自定义样式，将返回样式名称。 对于内置样式，将返回一个表示 BuiltInStyle 枚举中的值的字符串。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/style.yaml\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- name: text
  uid: excel!Excel.Range#text:member
  package: excel!
  fullName: text
  summary: >-
    指定区域的文本值。 文本值与单元格宽度无关。 \#EXCEL UI 中发生的符号替换不会影响 API 返回的文本值。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly text: string[][];'
    return:
      type: string[][]
- name: top
  uid: excel!Excel.Range#top:member
  package: excel!
  fullName: top
  summary: >-
    返回从工作表的上边缘到区域的上边缘的 100％ 缩放的距离（以磅为单位）。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly top: number;'
    return:
      type: number
- name: values
  uid: excel!Excel.Range#values:member
  package: excel!
  fullName: values
  summary: >-
    表示指定区域的原始值。 返回的数据可能是字符串、数字，也可能是布尔值。 包含错误的单元格将返回错误字符串。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'values: any[][];'
    return:
      type: any[][]
- name: valueTypes
  uid: excel!Excel.Range#valueTypes:member
  package: excel!
  fullName: valueTypes
  summary: >-
    指定每个单元格中的数据类型。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type: <xref uid="excel!Excel.RangeValueType:enum" />[][]
- name: width
  uid: excel!Excel.Range#width:member
  package: excel!
  fullName: width
  summary: >-
    返回从区域的左边缘到区域的右边缘的 100％ 缩放的距离（以磅为单位）。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Range#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    包含当前区域的工作表。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: autoFill(destinationRange, autoFillType)
  uid: excel!Excel.Range#autoFill:member(1)
  package: excel!
  fullName: autoFill(destinationRange, autoFillType)
  summary: >-
    使用指定的自动填充逻辑将范围从当前范围填充到目标区域。 目标区域可以是 null，也可以是水平或垂直扩展源。 不支持不连续的区域。


    有关详细信息，请参阅 [使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.


    \[[API 集： ExcelApi 1.9、ExcelApi Preview for null `destinationRange` <!-- --> ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;'
    parameters:
    - id: destinationRange
      description: 要自动填充的目标区域。 如果目标区域为 null，则数据将根据周围的单元格进行填充 (这是双击 UI 的区域填充柄) 时的行为。
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: autoFillType
      description: 自动填充的类型。 根据当前区域的内容，指定目标区域的填充方式。 默认值为 "FillDefault"。
      type: <xref uid="excel!Excel.AutoFillType:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-auto-fill.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getActiveWorksheet();\n  const sumCell = sheet.getRange(\"P4\");\n  \n  // Copy everything. The formulas will be contextually updated based on their new locations.\n  sumCell.autoFill(\"P4:P7\", Excel.AutoFillType.fillCopy);\n  sumCell.format.autofitColumns();\n  await context.sync();\n});\n```"
- name: autoFill(destinationRange, autoFillTypeString)
  uid: excel!Excel.Range#autoFill:member(2)
  package: excel!
  fullName: autoFill(destinationRange, autoFillTypeString)
  summary: >-
    使用指定的自动填充逻辑将范围从当前范围填充到目标区域。 目标区域可以是 null，也可以是水平或垂直扩展源。 不支持不连续的区域。


    有关详细信息，请参阅 [使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.


    \[[API 集： ExcelApi 1.9、ExcelApi Preview for null `destinationRange` <!-- --> ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFill(destinationRange?: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
    parameters:
    - id: destinationRange
      description: 要自动填充的目标区域。 如果目标区域为 null，则数据将根据周围的单元格进行填充 (这是双击 UI 的区域填充柄) 时的行为。
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: autoFillTypeString
      description: 自动填充的类型。 根据当前区域的内容，指定目标区域的填充方式。 默认值为 "FillDefault"。
      type: "\"FillDefault\" | \"FillCopy\" | \"FillSeries\" | \"FillFormats\" | \"FillValues\" | \"FillDays\" | \"FillWeekdays\" | \"FillMonths\" | \"FillYears\" | \"LinearTrend\" | \"GrowthTrend\" | \"FlashFill\""
    return:
      type: void
      description: ''
- name: calculate()
  uid: excel!Excel.Range#calculate:member(1)
  package: excel!
  fullName: calculate()
  summary: >-
    计算工作表上的单元格区域。


    \[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: ''
- name: clear(applyTo)
  uid: excel!Excel.Range#clear:member(1)
  package: excel!
  fullName: clear(applyTo)
  summary: >-
    清除区域值、格式、填充、边框等。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 ClearApplyTo。
      type: <xref uid="excel!Excel.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: clear(applyToString)
  uid: excel!Excel.Range#clear:member(2)
  package: excel!
  fullName: clear(applyToString)
  summary: >-
    清除区域值、格式、填充、边框等。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
    parameters:
    - id: applyToString
      description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 ClearApplyTo。
      type: "\"All\" | \"Formats\" | \"Contents\" | \"Hyperlinks\" | \"RemoveHyperlinks\""
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: excel!Excel.Range#convertDataTypeToText:member(1)
  package: excel!
  fullName: convertDataTypeToText()
  summary: >-
    将具有数据类型的区域单元格转换为文本。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: convertToLinkedDataType(serviceID, languageCulture)
  uid: excel!Excel.Range#convertToLinkedDataType:member(1)
  package: excel!
  fullName: convertToLinkedDataType(serviceID, languageCulture)
  summary: >-
    将区域单元格转换为工作表中的链接数据类型。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
    parameters:
    - id: serviceID
      description: 将用于查询数据的服务 ID。
      type: number
    - id: languageCulture
      description: 要为其查询服务的语言区域性。
      type: string
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: excel!Excel.Range#copyFrom:member(1)
  package: excel!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: >-
    将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。 目标区域的大小可以与源区域或 RangeAreas 的大小不同。 如果目标小于源，则将自动扩展目标。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
    parameters:
    - id: sourceRange
      description: 要从其复制的源区域或 RangeAreas。 当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。
      type: <xref uid="excel!Excel.Range:class" /> | <xref uid="excel!Excel.RangeAreas:class" /> | string
    - id: copyType
      description: 要复制的单元格数据的类型或格式。 默认值为 "All"。
      type: <xref uid="excel!Excel.RangeCopyType:enum" />
    - id: skipBlanks
      description: 如果为 True，则在源区域中跳过空白单元格。 默认为 false。
      type: boolean
    - id: transpose
      description: 如此如果要转置目标区域中的单元格。 默认为 false。
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-copyfrom.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    // Place a label in front of the copied data.\n    sheet.getRange(\"F2\").values = [[\"Copied Formula\"]];\n\n    // Copy a range preserving the formulas.\n    // Note: non-formula values are copied over as is.\n    sheet.getRange(\"G2\").copyFrom(\"A1:E1\", Excel.RangeCopyType.formulas);\n    await context.sync();\n});\n```"
- name: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  uid: excel!Excel.Range#copyFrom:member(2)
  package: excel!
  fullName: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  summary: >-
    将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。 目标区域的大小可以与源区域或 RangeAreas 的大小不同。 如果目标小于源，则将自动扩展目标。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
    parameters:
    - id: sourceRange
      description: 要从其复制的源区域或 RangeAreas。 当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。
      type: <xref uid="excel!Excel.Range:class" /> | <xref uid="excel!Excel.RangeAreas:class" /> | string
    - id: copyTypeString
      description: 要复制的单元格数据的类型或格式。 默认值为 "All"。
      type: "\"All\" | \"Formulas\" | \"Values\" | \"Formats\""
    - id: skipBlanks
      description: 如果为 True，则在源区域中跳过空白单元格。 默认为 false。
      type: boolean
    - id: transpose
      description: 如此如果要转置目标区域中的单元格。 默认为 false。
      type: boolean
    return:
      type: void
      description: ''
- name: delete(shift)
  uid: excel!Excel.Range#delete:member(1)
  package: excel!
  fullName: delete(shift)
  summary: >-
    删除与区域相关的单元格。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: 指定移动单元格的方式。 有关详细信息，请参阅 DeleteShiftDirection。
      type: <xref uid="excel!Excel.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete(shiftString)
  uid: excel!Excel.Range#delete:member(2)
  package: excel!
  fullName: delete(shiftString)
  summary: >-
    删除与区域相关的单元格。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shiftString: "Up" | "Left"): void;'
    parameters:
    - id: shiftString
      description: 指定移动单元格的方式。 有关详细信息，请参阅 DeleteShiftDirection。
      type: "\"Up\" | \"Left\""
    return:
      type: void
      description: ''
- name: find(text, criteria)
  uid: excel!Excel.Range#find:member(1)
  package: excel!
  fullName: find(text, criteria)
  summary: >-
    根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: criteria
      description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。
      type: <xref uid="excel!Excel.SearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "表示第一个单元格的 Range 对象，其中包含与搜索文本和条件相匹配的值。\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-find.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n\n    // NOTE: If no match is found, an ItemNotFound error\n    // is thrown when Range.find is evaluated.\n    const foundRange = searchRange.find($(\"#searchText\").text(), {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n    });\n    \n    foundRange.load(\"address\");\n    await context.sync();\n\n\n    console.log(foundRange.address);\n});\n```"
- name: findOrNullObject(text, criteria)
  uid: excel!Excel.Range#findOrNullObject:member(1)
  package: excel!
  fullName: findOrNullObject(text, criteria)
  summary: >-
    根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。 如果没有匹配项，则此函数将返回一个 null 对象。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: criteria
      description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。
      type: <xref uid="excel!Excel.SearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "与搜索条件匹配的范围。\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-find.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n    const foundRange = searchRange.findOrNullObject($(\"#searchText\").text(), {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n    });\n    \n    foundRange.load(\"address\");\n    await context.sync();\n\n    if (foundRange.isNullObject) {\n        console.log(\"Text not found\");\n    } else {\n        console.log(foundRange.address);\n    }\n});\n```"
- name: flashFill()
  uid: excel!Excel.Range#flashFill:member(1)
  package: excel!
  fullName: flashFill()
  summary: >-
    对当前区域进行快速填充。快速填充在感知到模式时可自动填充数据，因此该区域必须是单列区域且周围有数据以便查找模式。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'flashFill(): void;'
    return:
      type: void
      description: ''
- name: getAbsoluteResizedRange(numRows, numColumns)
  uid: excel!Excel.Range#getAbsoluteResizedRange:member(1)
  package: excel!
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  summary: >-
    获取一个 Range 对象，该对象的左上单元格与当前 Range 对象相同，但具有指定的行数和列数。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    parameters:
    - id: numRows
      description: 新范围大小的行数。
      type: number
    - id: numColumns
      description: 新范围大小的列数。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getBoundingRect(anotherRange)
  uid: excel!Excel.Range#getBoundingRect:member(1)
  package: excel!
  fullName: getBoundingRect(anotherRange)
  summary: >-
    获取包含指定区域的最小 range 对象。 例如，“B2:C5”和“D10:E15”的 GetBoundingRect 为“B2:E15”。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: range 对象或地址或区域名称。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Range#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    根据行和列编号获取包含单个单元格的 range 对象。 单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。 返回的单元格位于相对于区域左上角的单元格的位置。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: 要检索的单元格的行号。 从零开始编制索引。
      type: number
    - id: column
      description: 要检索的单元格的列号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.cell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCellProperties(cellPropertiesLoadOptions)
  uid: excel!Excel.Range#getCellProperties:member(1)
  package: excel!
  fullName: getCellProperties(cellPropertiesLoadOptions)
  summary: >-
    返回一个 2D 数组，其中封装了每个单元格的字体、填充、边框、对齐方式和其他属性数据。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
    parameters:
    - id: cellPropertiesLoadOptions
      description: 一个代表要加载的单元格属性的对象。
      type: <xref uid="excel!Excel.CellPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.CellProperties:interface" />[][]&gt;
      description: >-
        一个二维数组，其中每一项代表对应单元格的请求属性。


        #### <a name="examples"></a>示例


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml

        await Excel.run(async (context) => {
            const cell = context.workbook.getActiveCell();

            // Define the cell properties to get by setting the matching LoadOptions to true.
            const propertiesToGet = cell.getCellProperties({
                address: true,
                format: {
                    fill: {
                        color: true
                    },
                    font: {
                        color: true
                    }
                },
                style: true
            });

            // Sync to get the data from the workbook.
            await context.sync();
            const cellProperties = propertiesToGet.value[0][0];
            console.log(
                `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
        });

        ```
- name: getColumn(column)
  uid: excel!Excel.Range#getColumn:member(1)
  package: excel!
  fullName: getColumn(column)
  summary: >-
    获取范围中包含的列。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    parameters:
    - id: column
      description: 要检索的区域的列号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getColumnProperties(columnPropertiesLoadOptions)
  uid: excel!Excel.Range#getColumnProperties:member(1)
  package: excel!
  fullName: getColumnProperties(columnPropertiesLoadOptions)
  summary: >-
    返回一个一维数组，其中封装了每个列的字体、填充、边框、对齐方式和其他属性数据。 对于给定列中每个单元格不一致的属性，将返回 null。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
    parameters:
    - id: columnPropertiesLoadOptions
      description: 一个代表要加载的列属性的对象。
      type: <xref uid="excel!Excel.ColumnPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.ColumnProperties:interface" />[]&gt;
      description: 一个数组，其中每个项代表相应列的请求的属性。
- name: getColumnsAfter(count)
  uid: excel!Excel.Range#getColumnsAfter:member(1)
  package: excel!
  fullName: getColumnsAfter(count)
  summary: >-
    获取当前范围对象右侧的一定数量的列。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getColumnsBefore(count)
  uid: excel!Excel.Range#getColumnsBefore:member(1)
  package: excel!
  fullName: getColumnsBefore(count)
  summary: >-
    获取当前范围对象左侧的一定数量的列。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getDirectPrecedents()
  uid: excel!Excel.Range#getDirectPrecedents:member(1)
  package: excel!
  fullName: getDirectPrecedents()
  summary: >-
    返回一个 WorkbookRangeAreas 对象，该对象代表包含同一工作表或多个工作表中的单元格的所有直接引用单元格的区域。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDirectPrecedents(): Excel.WorkbookRangeAreas;'
    return:
      type: <xref uid="excel!Excel.WorkbookRangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/direct-precedents.yaml\nawait Excel.run(async (context) => {\n  // Precedents are cells referenced by the formula in a cell.\n  let range = context.workbook.getActiveCell();\n  let directPrecedents = range.getDirectPrecedents();\n  range.load(\"address\");\n  directPrecedents.areas.load(\"address\");\n  await context.sync();\n\n  console.log(`Direct precedent cells of ${range.address}:`);\n\n  // Use the direct precedents API to loop through precedents of the active cell. \n  for (var i = 0; i < directPrecedents.areas.items.length; i++) {\n    // Highlight and console the address of each precedent cell.\n    directPrecedents.areas.items[i].format.fill.color = \"Yellow\";\n    console.log(`  ${directPrecedents.areas.items[i].address}`);\n  }\n  await context.sync();\n});\n```"
- name: getEntireColumn()
  uid: excel!Excel.Range#getEntireColumn:member(1)
  package: excel!
  fullName: getEntireColumn()
  summary: >-
    获取一个对象，该对象表示区域中 (的整列。例如，如果当前区域表示单元格 "B4： E11"， `getEntireColumn` 则它是表示列 "B:E" 的区域 ) 。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getEntireRow()
  uid: excel!Excel.Range#getEntireRow:member(1)
  package: excel!
  fullName: getEntireRow()
  summary: >-
    获取表示区域中整行的对象 (例如，如果当前区域表示单元格 "B4： E11"， `GetEntireRow` 则它是表示行 "4:11" ) 的区域。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getImage()
  uid: excel!Excel.Range#getImage:member(1)
  package: excel!
  fullName: getImage()
  summary: >-
    将区域呈现为 base64 编码的 png 图像。 * 重要信息 * *：当前在 Excel for Mac 中不支持此 API。 有关当前状态，请访问 [OfficeDev/office-Js 问题 \# 235](https://github.com/OfficeDev/office-js/issues/235) 。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: ''
- name: getIntersection(anotherRange)
  uid: excel!Excel.Range#getIntersection:member(1)
  package: excel!
  fullName: getIntersection(anotherRange)
  summary: >-
    获取表示指定区域的矩形交集的 range 对象。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: 将用于确定区域交集的 range 对象或区域地址。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getIntersectionOrNullObject(anotherRange)
  uid: excel!Excel.Range#getIntersectionOrNullObject:member(1)
  package: excel!
  fullName: getIntersectionOrNullObject(anotherRange)
  summary: >-
    获取表示指定区域的矩形交集的 range 对象。 如果找不到任何交集，则此方法返回空对象。


    \[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: 将用于确定区域交集的 range 对象或区域地址。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getLastCell()
  uid: excel!Excel.Range#getLastCell:member(1)
  package: excel!
  fullName: getLastCell()
  summary: >-
    获取区域内的最后一个单元格。 例如，“B2:D5”的最后一个单元格是“D5”。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastColumn()
  uid: excel!Excel.Range#getLastColumn:member(1)
  package: excel!
  fullName: getLastColumn()
  summary: >-
    获取区域内的最后一列。 例如，“B2:D5”的最后一列是“D2:D5”。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastRow()
  uid: excel!Excel.Range#getLastRow:member(1)
  package: excel!
  fullName: getLastRow()
  summary: >-
    获取区域内的最后一行。 例如，“B2:D5”的最后一行是“B5:D5”。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getMergedAreas()
  uid: excel!Excel.Range#getMergedAreas:member(1)
  package: excel!
  fullName: getMergedAreas()
  summary: >-
    返回一个 RangeAreas 对象，该对象代表此区域中的合并区域。 请注意，如果此范围中的合并区域计数超过512，API 将无法返回结果。


    \[[API 集： ExcelApiOnline 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMergedAreas(): Excel.RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getOffsetRange(rowOffset, columnOffset)
  uid: excel!Excel.Range#getOffsetRange:member(1)
  package: excel!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: >-
    获取表示与指定区域偏移的区域的对象。返回的区域的尺寸将与此区域一致。如果强制在工作表网格的边界之外生成区域，将引发错误。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    parameters:
    - id: rowOffset
      description: 区域偏移的行数（正数、负数或 0）。正数表示向下偏移，负数表示向上偏移。
      type: number
    - id: columnOffset
      description: 区域偏移的列数（正数、负数或 0）。正数表示向右偏移，负数表示向左偏移。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:J5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getPivotTables(fullyContained)
  uid: excel!Excel.Range#getPivotTables:member(1)
  package: excel!
  fullName: getPivotTables(fullyContained)
  summary: >-
    获取与区域重叠的数据透视表的限定集合。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(fullyContained?: boolean): Excel.PivotTableScopedCollection;'
    parameters:
    - id: fullyContained
      description: 如果为 true，则仅返回完全包含在区域边界内的数据透视表。 默认值为 false。
      type: boolean
    return:
      type: <xref uid="excel!Excel.PivotTableScopedCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml\nawait Excel.run(async (context) => {\n  const activeRange = context.workbook.getSelectedRange();\n\n  // Get all the PivotTables that intersect with this range.\n  const partiallyContainedPivotTables = activeRange.getPivotTables();\n  // Get all the PivotTables that are completely contained within this range.\n  const fullyContainedPivotTables = activeRange.getPivotTables(true);\n\n  partiallyContainedPivotTables.load(\"name\");\n  fullyContainedPivotTables.load(\"name\");\n  await context.sync();\n\n  // Display the names in the console.\n  console.log(\"PivotTables in the current range:\")\n  partiallyContainedPivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n  console.log(\"PivotTables completely contained in the current range:\")\n  fullyContainedPivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n});\n```"
- name: getResizedRange(deltaRows, deltaColumns)
  uid: excel!Excel.Range#getResizedRange:member(1)
  package: excel!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: >-
    获取与当前范围对象类似的范围对象，但其右下角可通过一定数量的行和列进行展开（或合拢）。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    parameters:
    - id: deltaRows
      description: 相对于当前范围，展开右下角的行数。使用正数可展开范围，使用负数可合拢范围。
      type: number
    - id: deltaColumns
      description: 相对于当前范围，从右下角扩展的列数。 使用正数可展开范围，使用负数可合拢范围。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRow(row)
  uid: excel!Excel.Range#getRow:member(1)
  package: excel!
  fullName: getRow(row)
  summary: >-
    获取范围中包含的行。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    parameters:
    - id: row
      description: 要检索的区域的行号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRowProperties(rowPropertiesLoadOptions)
  uid: excel!Excel.Range#getRowProperties:member(1)
  package: excel!
  fullName: getRowProperties(rowPropertiesLoadOptions)
  summary: >-
    返回一个一维数组，其中封装了每个行的字体、填充、边框、对齐方式和其他属性数据。 对于给定行中每个单元格不一致的属性，将返回 null。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
    parameters:
    - id: rowPropertiesLoadOptions
      description: 一个代表要加载的行属性的对象。
      type: <xref uid="excel!Excel.RowPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.RowProperties:interface" />[]&gt;
      description: 一个数组，其中每个项代表相应行的请求属性。
- name: getRowsAbove(count)
  uid: excel!Excel.Range#getRowsAbove:member(1)
  package: excel!
  fullName: getRowsAbove(count)
  summary: >-
    获取当前范围对象上方的一定数量的行。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRowsBelow(count)
  uid: excel!Excel.Range#getRowsBelow:member(1)
  package: excel!
  fullName: getRowsBelow(count)
  summary: >-
    获取当前范围对象下方的一定数量的行。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: excel!Excel.Range#getSpecialCells:member(1)
  package: excel!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: >-
    获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则将引发 ItemNotFound 错误。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    parameters:
    - id: cellType
      description: 要包含的单元格的类型。
      type: <xref uid="excel!Excel.SpecialCellType:enum" />
    - id: cellValueType
      description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
      type: <xref uid="excel!Excel.SpecialCellValueType:enum" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-areas.yaml\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const usedRange = sheet.getUsedRange();\n\n    // Find the ranges with either text or logical (boolean) values.\n    const formulaRanges = usedRange.getSpecialCells(\"Constants\", \"LogicalText\");\n    formulaRanges.format.fill.color = \"orange\";\n\n    return context.sync();\n});\n```"
- name: getSpecialCells(cellTypeString, cellValueType)
  uid: excel!Excel.Range#getSpecialCells:member(2)
  package: excel!
  fullName: getSpecialCells(cellTypeString, cellValueType)
  summary: >-
    获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则将引发 ItemNotFound 错误。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    parameters:
    - id: cellTypeString
      description: 要包含的单元格的类型。
      type: "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
      type: "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpecialCellsOrNullObject(cellType, cellValueType)
  uid: excel!Excel.Range#getSpecialCellsOrNullObject:member(1)
  package: excel!
  fullName: getSpecialCellsOrNullObject(cellType, cellValueType)
  summary: >-
    获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则返回 null 对象。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    parameters:
    - id: cellType
      description: 要包含的单元格的类型。
      type: <xref uid="excel!Excel.SpecialCellType:enum" />
    - id: cellValueType
      description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
      type: <xref uid="excel!Excel.SpecialCellValueType:enum" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  uid: excel!Excel.Range#getSpecialCellsOrNullObject:member(2)
  package: excel!
  fullName: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  summary: >-
    获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则返回 null 对象。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    parameters:
    - id: cellTypeString
      description: 要包含的单元格的类型。
      type: "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
      type: "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpillingToRange()
  uid: excel!Excel.Range#getSpillingToRange:member(1)
  package: excel!
  fullName: getSpillingToRange()
  summary: >-
    获取 Range 对象，它在调用定位单元格时包含溢出区域。 如果应用于具有多个单元格的区域，则会失败。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/dynamic-arrays.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n  // Set G4 to a formula that returns a dynamic array.\n  const targetCell = sheet.getRange(\"G4\");\n  targetCell.formulas = [[\"=A4:D4\"]];\n\n  // Get the address of the cells that the dynamic array spilled into.\n  const spillRange = targetCell.getSpillingToRange();\n  spillRange.load(\"address\");\n\n  // Fit the columns for readability.\n  sheet.getUsedRange().format.autofitColumns();\n  await context.sync();\n\n  console.log(`Copying the table headers spilled into ${spillRange.address}.`);\n});\n```"
- name: getSpillingToRangeOrNullObject()
  uid: excel!Excel.Range#getSpillingToRangeOrNullObject:member(1)
  package: excel!
  fullName: getSpillingToRangeOrNullObject()
  summary: >-
    获取 Range 对象，它在调用定位单元格时包含溢出区域。 如果区域不是定位单元格或溢出区域，则返回 null 对象。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRangeOrNullObject(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpillParent()
  uid: excel!Excel.Range#getSpillParent:member(1)
  package: excel!
  fullName: getSpillParent()
  summary: >-
    获取 Range 对象，它包含要将某个单元格溢出到的定位单元格。 如果应用于具有多个单元格的区域，则会失败。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParent(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpillParentOrNullObject()
  uid: excel!Excel.Range#getSpillParentOrNullObject:member(1)
  package: excel!
  fullName: getSpillParentOrNullObject()
  summary: >-
    获取 Range 对象，它包含要将某个单元格溢出到的定位单元格。 如果不是溢出单元格或多个单元格给出了一个值，则返回 null 对象。


    \[[API 集： ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParentOrNullObject(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSurroundingRegion()
  uid: excel!Excel.Range#getSurroundingRegion:member(1)
  package: excel!
  fullName: getSurroundingRegion()
  summary: >-
    返回一个 Range 对象，该对象表示此区域左上单元格的周围区域。 周围区域是由相对于该区域的空白行和空白列的任何组合所限定的区域。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getTables(fullyContained)
  uid: excel!Excel.Range#getTables:member(1)
  package: excel!
  fullName: getTables(fullyContained)
  summary: >-
    获取与区域重叠的限定范围的表格集合。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
    parameters:
    - id: fullyContained
      description: 如果为 true，则仅返回完全包含在区域边界内的表。 默认值为 false。
      type: boolean
    return:
      type: <xref uid="excel!Excel.TableScopedCollection:class" />
      description: ''
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Range#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    返回指定 Range 对象的所用区域。如果区域内没有使用单元格，此函数将引发 ItemNotFound 错误。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 仅将有值的单元格视为已使用的单元格。 \[Api 集： ExcelApi 1。2\]
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Range#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    返回指定 Range 对象的所用区域。如果区域内没有使用单元格，此函数将返回 NULL 对象。


    \[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 仅将有值的单元格视为已使用的单元格。
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/used-range.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        console.log(\"Need Data to Make Chart\");\n        console.log(\"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\");\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
- name: getVisibleView()
  uid: excel!Excel.Range#getVisibleView:member(1)
  package: excel!
  fullName: getVisibleView()
  summary: >-
    表示当前 range 对象的可见行。


    \[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type: <xref uid="excel!Excel.RangeView:class" />
      description: ''
- name: group(groupOption)
  uid: excel!Excel.Range#group:member(1)
  package: excel!
  fullName: group(groupOption)
  summary: >-
    对列和行进行分组以进行分级显示。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定如何按行或列对区域进行分组。 `InvalidArgument`当组选项与范围或属性不同时，将引发错误 `isEntireRow` `isEntireColumn` (也就是说， `range.isEntireRow` 为 True 且 `groupOption` 为 "ByColumns"，或者为 `range.isEntireColumn` `groupOption` "ByRows" ) 。
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // Group the larger, main level. Note that the outline controls\n    // will be on row 10, meaning 4-9 will collapse and expand.\n    sheet.getRange(\"4:9\").group(Excel.GroupOption.byRows);\n\n    // Group the smaller, sublevels. Note that the outline controls\n    // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.\n    sheet.getRange(\"4:5\").group(Excel.GroupOption.byRows);\n    sheet.getRange(\"7:8\").group(Excel.GroupOption.byRows);\n    await context.sync();\n});\n```"
- name: group(groupOptionString)
  uid: excel!Excel.Range#group:member(2)
  package: excel!
  fullName: group(groupOptionString)
  summary: >-
    对列和行进行分组以进行分级显示。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: 指定如何按行或列对区域进行分组。 `InvalidArgument`当组选项与范围或属性不同时，将引发错误 `isEntireRow` `isEntireColumn` (也就是说， `range.isEntireRow` 为 True 且 `groupOption` 为 "ByColumns"，或者为 `range.isEntireColumn` `groupOption` "ByRows" ) 。
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOption)
  uid: excel!Excel.Range#hideGroupDetails:member(1)
  package: excel!
  fullName: hideGroupDetails(groupOption)
  summary: >-
    隐藏行或列组的详细信息。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定是否隐藏分组行或分组列的详细信息。
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOptionString)
  uid: excel!Excel.Range#hideGroupDetails:member(2)
  package: excel!
  fullName: hideGroupDetails(groupOptionString)
  summary: >-
    隐藏行或列组的详细信息。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: 指定是否隐藏分组行或分组列的详细信息。
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: insert(shift)
  uid: excel!Excel.Range#insert:member(1)
  package: excel!
  fullName: insert(shift)
  summary: >-
    将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    parameters:
    - id: shift
      description: 指定移动单元格的方式。 有关详细信息，请参阅 InsertShiftDirection。
      type: <xref uid="excel!Excel.InsertShiftDirection:enum" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insert(shiftString)
  uid: excel!Excel.Range#insert:member(2)
  package: excel!
  fullName: insert(shiftString)
  summary: >-
    将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。在现在空白的空间返回新的 Range 对象。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
    parameters:
    - id: shiftString
      description: 指定移动单元格的方式。 有关详细信息，请参阅 InsertShiftDirection。
      type: "\"Down\" | \"Right\""
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Range#load:member(1)
  package: excel!
  fullName: load(options)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
    parameters:
    - id: options
      description: 提供要加载的对象的属性的选项。
      type: <xref uid="excel!Excel.Interfaces.RangeLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Range#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Range;'
    parameters:
    - id: propertyNames
      description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Range#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Range;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` 是一个以逗号分隔的字符串，用于指定要加载的属性，并且 `propertyNamesAndPaths.expand` 是一个以逗号分隔的字符串，用于指定要加载的导航属性。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: merge(across)
  uid: excel!Excel.Range#merge:member(1)
  package: excel!
  fullName: merge(across)
  summary: >-
    将范围单元格合并到工作表的一个区域内。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: 可选。 如果为 True，则将指定区域中每一行的单元格合并为一个单独的合并单元格。 默认值是 false。
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: moveTo(destinationRange)
  uid: excel!Excel.Range#moveTo:member(1)
  package: excel!
  fullName: moveTo(destinationRange)
  summary: >-
    将单元格的值、格式和公式从当前区域移动到目标区域，替换这些单元格中的旧信息。 如果目标区域小于当前区域，则将自动扩展目标区域。 原始区域区域以外的目标区域中的任何单元格都不会更改。


    \[[API 集： ExcelApi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'moveTo(destinationRange: Range | string): void;'
    parameters:
    - id: destinationRange
      description: destinationRange 指定此范围中的信息将移动到的范围。
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-copyfrom.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    // Place a label in front of the moved data.\n    sheet.getRange(\"F12\").values = [[\"Moved Range:\"]];\n\n    // Move the range from A1:E1 to G12:K12.\n    sheet.getRange(\"A1:E1\").moveTo(\"G12\");\n    await context.sync();\n});\n```"
- name: removeDuplicates(columns, includesHeader)
  uid: excel!Excel.Range#removeDuplicates:member(1)
  package: excel!
  fullName: removeDuplicates(columns, includesHeader)
  summary: >-
    从列指定的区域中删除重复值。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
    parameters:
    - id: columns
      description: 区域中可能包含重复项的列。 至少需要指定一个列。 从零开始编制索引。
      type: number[]
    - id: includesHeader
      description: 如果输入数据包含标头，则为 True。 默认为 false。
      type: boolean
    return:
      type: <xref uid="excel!Excel.RemoveDuplicatesResult:class" />
      description: "生成的对象，其中包含已删除的行数和剩余的唯一行数。\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/range-remove-duplicates.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:D11\");\n\n    const deleteResult = range.removeDuplicates([0],true);    \n    deleteResult.load();    \n    await context.sync();\n\n    console.log(deleteResult.removed + \" entries with duplicate names removed.\");\n    console.log(deleteResult.uniqueRemaining + \" entries with unique names remain in the range.\");\n});\n```"
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Range#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: >-
    根据当前区域内指定的条件查找并替换给定的字符串。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: replacement
      description: 要将原始替换为的字符串。
      type: string
    - id: criteria
      description: 其他替换条件。
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: 执行的替换的次数。
- name: select()
  uid: excel!Excel.Range#select:member(1)
  package: excel!
  fullName: select()
  summary: >-
    在 Excel UI 中选择指定的区域。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: set(properties, options)
  uid: excel!Excel.Range#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: 同时设置一个对象的多个属性。 您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。
  remarks: "此方法具有以下附加签名：\n\n`set(properties: Excel.Range): void`\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: 一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。
      type: <xref uid="excel!Excel.Interfaces.RangeUpdateData:interface" />
    - id: options
      description: 提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Range#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 基于现有加载的对象同时设置该对象的多个属性。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Range): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: ''
- name: setCellProperties(cellPropertiesData)
  uid: excel!Excel.Range#setCellProperties:member(1)
  package: excel!
  fullName: setCellProperties(cellPropertiesData)
  summary: >-
    根据单元格属性的 2D 数组更新区域，它封装了字体、填充、边框、对齐方式等内容。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
    parameters:
    - id: cellPropertiesData
      description: 一个二维数组，表示要在每个单元格中设置的属性。
      type: <xref uid="excel!Excel.SettableCellProperties:interface" />[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/cell-properties.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Creating the SettableCellProperties objects to use for the range.\n    // In your add-in, these should be created once, outside the function.\n    const topHeaderProps: Excel.SettableCellProperties = {\n        // The style property takes a string matching the name of an Excel style.\n        // Built-in style names are listed in the `BuiltInStyle` enum.\n        // Note that a style will overwrite any formatting,\n        // so do not use the format property with the style property.\n        style: \"Heading1\"\n    };\n\n    const headerProps: Excel.SettableCellProperties = {\n        // Any subproperties of format that are not set will not be changed when these cell properties are set.\n        format: {\n            fill: {\n                color: \"Blue\"\n            },\n            font: {\n                color: \"White\",\n                bold: true\n            }\n        }\n    };\n\n    const nonApplicableProps: Excel.SettableCellProperties = {\n        format: {\n            fill: {\n                pattern: Excel.FillPattern.gray25\n            },\n            font: {\n                color: \"Gray\",\n                italic: true\n            }\n        }\n    };\n\n    const matchupScoreProps: Excel.SettableCellProperties = {\n        format: {\n            borders: {\n                bottom: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                left: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                right: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                top: {\n                    style: Excel.BorderLineStyle.continuous\n                }\n            }\n        }\n    };\n\n    const range = sheet.getRange(\"A1:E5\");\n\n    // You can use empty JSON objects to avoid changing a cell's properties.\n    range.setCellProperties([\n        [topHeaderProps, {}, {}, {}, {}],\n        [{}, {}, headerProps, headerProps, headerProps],\n        [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    await context.sync();\n});\n```"
- name: setColumnProperties(columnPropertiesData)
  uid: excel!Excel.Range#setColumnProperties:member(1)
  package: excel!
  fullName: setColumnProperties(columnPropertiesData)
  summary: >-
    根据列属性的一维数组更新区域，它封装了字体、填充、边框、对齐方式等内容。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
    parameters:
    - id: columnPropertiesData
      description: 一个数组，表示要在每个列中设置的属性。
      type: <xref uid="excel!Excel.SettableColumnProperties:interface" />[]
    return:
      type: void
      description: ''
- name: setDirty()
  uid: excel!Excel.Range#setDirty:member(1)
  package: excel!
  fullName: setDirty()
  summary: >-
    设置下一次重新计算发生时要重新计算的区域。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setRowProperties(rowPropertiesData)
  uid: excel!Excel.Range#setRowProperties:member(1)
  package: excel!
  fullName: setRowProperties(rowPropertiesData)
  summary: >-
    根据行属性的一维数组更新区域，它封装了字体、填充、边框、对齐方式等内容。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
    parameters:
    - id: rowPropertiesData
      description: 一个数组，表示要在每行中设置的属性。
      type: <xref uid="excel!Excel.SettableRowProperties:interface" />[]
    return:
      type: void
      description: ''
- name: showCard()
  uid: excel!Excel.Range#showCard:member(1)
  package: excel!
  fullName: showCard()
  summary: >-
    显示活动单元格的卡片（如果该单元格具有富值内容）。


    \[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showCard(): void;'
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOption)
  uid: excel!Excel.Range#showGroupDetails:member(1)
  package: excel!
  fullName: showGroupDetails(groupOption)
  summary: >-
    显示行或列组的详细信息。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定是否显示分组行或分组列的详细信息。
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOptionString)
  uid: excel!Excel.Range#showGroupDetails:member(2)
  package: excel!
  fullName: showGroupDetails(groupOptionString)
  summary: >-
    显示行或列组的详细信息。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: 指定是否显示分组行或分组列的详细信息。
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Range#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: 重写 JavaScript `toJSON()` 方法，以便在将 API 对象传递到时提供更有用的输出 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，调用 `toJSON` 传递给它的对象的方法。 ) 而原始的 Excel Range 对象是一个 API 对象，则该 `toJSON` 方法返回一个简单的 JavaScript 对象 (类型为 `Excel.Interfaces.RangeData`<!-- -->) ，其中包含原始对象中任何已加载的子属性的浅表副本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.RangeData:interface" />
      description: ''
- name: track()
  uid: excel!Excel.Range#track:member(1)
  package: excel!
  fullName: track()
  summary: 根据文档中的相应更改来跟踪对象，以便进行自动调整。 此调用是的简写 `context.trackedObjects.add(thisObject)`<!-- -->. 如果要在多个调用中使用此对象 `.sync` ，并在 "运行" 批处理的顺序执行之外使用此对象，并在设置属性或对对象调用方法时获取 "InvalidObjectPath" 错误，则需要在首次创建对象时将该对象添加到跟踪的对象集合中。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: ungroup(groupOption)
  uid: excel!Excel.Range#ungroup:member(1)
  package: excel!
  fullName: ungroup(groupOption)
  summary: >-
    取消边框的列和行的组合。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定如何将区域与行或列取消组合。
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // This removes two levels of groups from the \"A1-R10\" range.\n    // Any groups at the same level on the same dimension will be removed by a single call.\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byRows);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byRows);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byColumns);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byColumns);\n    await context.sync();\n});\n```"
- name: ungroup(groupOptionString)
  uid: excel!Excel.Range#ungroup:member(2)
  package: excel!
  fullName: ungroup(groupOptionString)
  summary: >-
    取消边框的列和行的组合。


    \[[API 集： ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: 指定如何将区域与行或列取消组合。
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: unmerge()
  uid: excel!Excel.Range#unmerge:member(1)
  package: excel!
  fullName: unmerge()
  summary: >-
    将范围单元格取消合并为各个单元格。


    \[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: untrack()
  uid: excel!Excel.Range#untrack:member(1)
  package: excel!
  fullName: untrack()
  summary: 释放与此对象关联的内存（如果先前已跟踪过）。 此调用是的简写 `context.trackedObjects.remove(thisObject)`<!-- -->. 拥有许多跟踪对象会降低主机应用程序的速度，因此请在使用完毕后释放所添加的任何对象。 在 `context.sync()` 内存释放生效之前，您需要调用该过程。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: fce8e8340994c7b57bb94ad6b6bd8c90189592ba
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49340594"
