### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalIconCriterion:interface'
    summary: |-
      <span data-ttu-id="1d13e-101">表示一个图标条件，其中包含类型、值、运算符和可选的自定义图标（如果不使用 iconset）。</span><span class="sxs-lookup"><span data-stu-id="1d13e-101">Represents an Icon Criterion which contains a type, value, an Operator, and an optional custom icon, if not using an iconset.</span></span>

      <span data-ttu-id="1d13e-102">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d13e-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalIconCriterion
    fullName: Excel.ConditionalIconCriterion
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ConditionalIconCriterion#customIcon:member'
      - 'excel!Excel.ConditionalIconCriterion#formula:member'
      - 'excel!Excel.ConditionalIconCriterion#operator:member'
      - 'excel!Excel.ConditionalIconCriterion#type:member'
  - uid: 'excel!Excel.ConditionalIconCriterion#customIcon:member'
    summary: |-
      <span data-ttu-id="1d13e-103">如果与默认 IconSet 不同，返回当前条件的自定义图标，否则将返回 null。</span><span class="sxs-lookup"><span data-stu-id="1d13e-103">The custom icon for the current criterion if different from the default IconSet, else null will be returned.</span></span>

      <span data-ttu-id="1d13e-104">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d13e-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: customIcon
    fullName: customIcon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customIcon?: Excel.Icon;'
      return:
        type:
          - 'excel!Excel.Icon:interface'
  - uid: 'excel!Excel.ConditionalIconCriterion#formula:member'
    summary: |-
      <span data-ttu-id="1d13e-105">取决于类型的数字或公式。</span><span class="sxs-lookup"><span data-stu-id="1d13e-105">A number or a formula depending on the type.</span></span>

      <span data-ttu-id="1d13e-106">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d13e-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formula
    fullName: formula
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formula: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1d13e-107">示例</span><span class="sxs-lookup"><span data-stu-id="1d13e-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalIconCriterion#operator:member'
    summary: |-
      <span data-ttu-id="1d13e-108">图标条件格式的每个规则类型的 GreaterThan 或 GreaterThanOrEqual。</span><span class="sxs-lookup"><span data-stu-id="1d13e-108">GreaterThan or GreaterThanOrEqual for each of the rule type for the Icon conditional format.</span></span>

      <span data-ttu-id="1d13e-109">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d13e-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: operator
    fullName: operator
    langs:
      - typeScript
    type: property
    syntax:
      content: 'operator: Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual";'
      return:
        type:
          - 'excel!Excel.ConditionalIconCriterion#operator~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1d13e-110">示例</span><span class="sxs-lookup"><span data-stu-id="1d13e-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalIconCriterion#type:member'
    summary: |-
      <span data-ttu-id="1d13e-111">应基于的图标条件公式。</span><span class="sxs-lookup"><span data-stu-id="1d13e-111">What the icon conditional formula should be based on.</span></span>

      <span data-ttu-id="1d13e-112">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1d13e-112">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile";'
      return:
        type:
          - 'excel!Excel.ConditionalIconCriterion#type~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1d13e-113">示例</span><span class="sxs-lookup"><span data-stu-id="1d13e-113">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
references:
  - uid: 'excel!Excel.Icon:interface'
    name: Excel.Icon
  - uid: 'excel!Excel.ConditionalIconCriterion#operator~0:complex'
    name: Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual"
    fullName: Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual"
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalIconCriterionOperator:enum'
        name: Excel.ConditionalIconCriterionOperator
        fullName: Excel.ConditionalIconCriterionOperator
      - name: ' | "Invalid" | "GreaterThan" | "GreaterThanOrEqual"'
        fullName: ' | "Invalid" | "GreaterThan" | "GreaterThanOrEqual"'
  - uid: 'excel!Excel.ConditionalIconCriterion#type~0:complex'
    name: Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile"
    fullName: Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile"
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormatIconRuleType:enum'
        name: Excel.ConditionalFormatIconRuleType
        fullName: Excel.ConditionalFormatIconRuleType
      - name: ' | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile"'
        fullName: ' | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile"'