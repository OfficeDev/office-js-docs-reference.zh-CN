### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Worksheet
    summary: |-
      <span data-ttu-id="32d6b-101">Excel 工作表是由单元格组成的网格。</span><span class="sxs-lookup"><span data-stu-id="32d6b-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="32d6b-102">它可以包含数据、表、图表等。若要了解有关工作表对象模型的详细信息, 请参阅[使用 Excel JAVASCRIPT API 处理工作表](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="32d6b-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="32d6b-103">.</span><span class="sxs-lookup"><span data-stu-id="32d6b-103"></span></span>

      <span data-ttu-id="32d6b-104">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Worksheet.activate
      - excel.Excel.Worksheet.calculate
      - excel.Excel.Worksheet.charts
      - excel.Excel.Worksheet.context
      - excel.Excel.Worksheet.copy
      - excel.Excel.Worksheet.copy_1
      - excel.Excel.Worksheet.delete
      - excel.Excel.Worksheet.freezePanes
      - excel.Excel.Worksheet.getCell
      - excel.Excel.Worksheet.getNext
      - excel.Excel.Worksheet.getNextOrNullObject
      - excel.Excel.Worksheet.getPrevious
      - excel.Excel.Worksheet.getPreviousOrNullObject
      - excel.Excel.Worksheet.getRange
      - excel.Excel.Worksheet.getRangeByIndexes
      - excel.Excel.Worksheet.getUsedRange
      - excel.Excel.Worksheet.getUsedRangeOrNullObject
      - excel.Excel.Worksheet.id
      - excel.Excel.Worksheet.load
      - excel.Excel.Worksheet.load_1
      - excel.Excel.Worksheet.load_2
      - excel.Excel.Worksheet.name
      - excel.Excel.Worksheet.names
      - excel.Excel.Worksheet.onActivated
      - excel.Excel.Worksheet.onCalculated
      - excel.Excel.Worksheet.onChanged
      - excel.Excel.Worksheet.onDeactivated
      - excel.Excel.Worksheet.onSelectionChanged
      - excel.Excel.Worksheet.pivotTables
      - excel.Excel.Worksheet.position
      - excel.Excel.Worksheet.protection
      - excel.Excel.Worksheet.set
      - excel.Excel.Worksheet.set_1
      - excel.Excel.Worksheet.showGridlines
      - excel.Excel.Worksheet.showHeadings
      - excel.Excel.Worksheet.standardHeight
      - excel.Excel.Worksheet.standardWidth
      - excel.Excel.Worksheet.tabColor
      - excel.Excel.Worksheet.tables
      - excel.Excel.Worksheet.toJSON
      - excel.Excel.Worksheet.visibility
  - uid: excel.Excel.Worksheet.activate
    summary: |-
      <span data-ttu-id="32d6b-105">在 Excel UI 中激活工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="32d6b-106">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-107">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.calculate
    summary: |-
      <span data-ttu-id="32d6b-108">计算工作表上的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="32d6b-108">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="32d6b-109">\[[API 集: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="32d6b-110">如果为 True, 则将全部标记为已更新。</span><span class="sxs-lookup"><span data-stu-id="32d6b-110">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.charts
    summary: |-
      <span data-ttu-id="32d6b-111">返回属于工作表的图表的集合。</span><span class="sxs-lookup"><span data-stu-id="32d6b-111">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="32d6b-112">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-112">Read-only.</span></span>

      <span data-ttu-id="32d6b-113">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
  - uid: excel.Excel.Worksheet.context
    summary: <span data-ttu-id="32d6b-114">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="32d6b-114">The request context associated with the object.</span></span> <span data-ttu-id="32d6b-115">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="32d6b-115">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Worksheet.copy
    summary: |-
      <span data-ttu-id="32d6b-116">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="32d6b-116">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="32d6b-117">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-117">Return the copied worksheet.</span></span>

      <span data-ttu-id="32d6b-118">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-118">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-119">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-119">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="32d6b-120">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-120">Optional.</span></span>
          type:
            - excel.Excel.WorksheetPositionType
        - id: relativeTo
          description: <span data-ttu-id="32d6b-121">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-121">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.copy_1
    summary: |-
      <span data-ttu-id="32d6b-122">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="32d6b-122">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="32d6b-123">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-123">Return the copied worksheet.</span></span>

      <span data-ttu-id="32d6b-124">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-124">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="32d6b-125">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-125">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="32d6b-126">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-126">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.delete
    summary: |-
      <span data-ttu-id="32d6b-127">从工作簿中删除工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-127">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="32d6b-128">请注意, 如果工作表的可见性设置为 "VeryHidden", 则删除操作将失败, 并出现 GeneralException。</span><span class="sxs-lookup"><span data-stu-id="32d6b-128">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="32d6b-129">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-129">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-130">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-130">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.freezePanes
    summary: |-
      <span data-ttu-id="32d6b-131">获取一个对象, 该对象可用于操作工作表上的冻结窗格。</span><span class="sxs-lookup"><span data-stu-id="32d6b-131">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="32d6b-132">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-132">Read-only.</span></span>

      <span data-ttu-id="32d6b-133">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-133">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - excel.Excel.WorksheetFreezePanes
  - uid: excel.Excel.Worksheet.getCell
    summary: |-
      <span data-ttu-id="32d6b-134">根据行和列编号获取包含单个单元格的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-134">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="32d6b-135">单元格可以位于其父区域的边界之外, 但前提是它停留在工作表网格中。</span><span class="sxs-lookup"><span data-stu-id="32d6b-135">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="32d6b-136">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-136">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-137">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-137">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="32d6b-138">要检索的单元格的行号。</span><span class="sxs-lookup"><span data-stu-id="32d6b-138">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="32d6b-139">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="32d6b-139">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="32d6b-140">要检索的单元格的列号。</span><span class="sxs-lookup"><span data-stu-id="32d6b-140">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="32d6b-141">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="32d6b-141">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Worksheet.getNext
    summary: |-
      <span data-ttu-id="32d6b-142">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-142">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="32d6b-143">如果此方法后面没有任何工作表, 则此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="32d6b-143">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="32d6b-144">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-144">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-145">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-145">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="32d6b-146">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-146">Optional.</span></span> <span data-ttu-id="32d6b-147">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-147">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getNextOrNullObject
    summary: |-
      <span data-ttu-id="32d6b-148">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-148">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="32d6b-149">如果此方法后面没有任何工作表, 则此方法将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-149">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="32d6b-150">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-150">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="32d6b-151">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-151">Optional.</span></span> <span data-ttu-id="32d6b-152">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-152">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPrevious
    summary: |-
      <span data-ttu-id="32d6b-153">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-153">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="32d6b-154">如果没有以前的工作表, 此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="32d6b-154">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="32d6b-155">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-155">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-156">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-156">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="32d6b-157">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-157">Optional.</span></span> <span data-ttu-id="32d6b-158">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-158">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPreviousOrNullObject
    summary: |-
      <span data-ttu-id="32d6b-159">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-159">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="32d6b-160">如果没有以前的工作表, 则此方法将返回一个空的 objet。</span><span class="sxs-lookup"><span data-stu-id="32d6b-160">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="32d6b-161">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-161">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="32d6b-162">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-162">Optional.</span></span> <span data-ttu-id="32d6b-163">如果为 true, 则只考虑可见的工作表, 跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="32d6b-163">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getRange
    summary: |-
      <span data-ttu-id="32d6b-164">获取一个 range 对象, 该对象代表由地址或名称指定的单个矩形单元格块。</span><span class="sxs-lookup"><span data-stu-id="32d6b-164">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="32d6b-165">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-165">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-166">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-166">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="32d6b-167">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-167">Optional.</span></span> <span data-ttu-id="32d6b-168">表示地址或范围名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="32d6b-168">The string representing the address or name of the range.</span></span> <span data-ttu-id="32d6b-169">例如, "A1: B2"。</span><span class="sxs-lookup"><span data-stu-id="32d6b-169">For example, "A1:B2".</span></span> <span data-ttu-id="32d6b-170">如果未指定，则返回整个工作表区域。</span><span class="sxs-lookup"><span data-stu-id="32d6b-170">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: excel.Excel.Worksheet.getRangeByIndexes
    summary: |-
      <span data-ttu-id="32d6b-171">获取以特定行索引和列索引开始并跨越了一定数量的行和列的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-171">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="32d6b-172">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-172">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="32d6b-173">起始行 (零编制索引)。</span><span class="sxs-lookup"><span data-stu-id="32d6b-173">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="32d6b-174">Start 列 (零个索引)。</span><span class="sxs-lookup"><span data-stu-id="32d6b-174">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: <span data-ttu-id="32d6b-175">要包含在范围中的行数。</span><span class="sxs-lookup"><span data-stu-id="32d6b-175">Number of rows to include in the range.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="32d6b-176">要包含在范围中的列数。</span><span class="sxs-lookup"><span data-stu-id="32d6b-176">Number of columns to include in the range.</span></span>
          type:
            - number
  - uid: excel.Excel.Worksheet.getUsedRange
    summary: |-
      <span data-ttu-id="32d6b-177">使用的区域是包含分配了值或格式化的任何单元格的最小区域。</span><span class="sxs-lookup"><span data-stu-id="32d6b-177">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="32d6b-178">如果整个工作表为空, 则此函数将返回左上角单元格 (即, 它*不*会引发错误)。</span><span class="sxs-lookup"><span data-stu-id="32d6b-178">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="32d6b-179">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-180">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-180">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="32d6b-181">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-181">Optional.</span></span> <span data-ttu-id="32d6b-182">如果为 true, 则仅考虑值为已使用单元格的单元格 (忽略格式设置)。</span><span class="sxs-lookup"><span data-stu-id="32d6b-182">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="32d6b-183">\[Api 集: ExcelApi 1。2\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-183">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="32d6b-p122">使用的区域是包含分配了值或格式的任意单元格的最小区域。如果整个工作表为空，此函数将返回 NULL 对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-p122">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="32d6b-186">\[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-186">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="32d6b-187">可选。</span><span class="sxs-lookup"><span data-stu-id="32d6b-187">Optional.</span></span> <span data-ttu-id="32d6b-188">仅将有值的单元格视为已使用的单元格。</span><span class="sxs-lookup"><span data-stu-id="32d6b-188">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Worksheet.id
    summary: |-
      <span data-ttu-id="32d6b-p124">返回用于唯一标识指定工作簿中工作表的值。即使工作表被重命名或移动，标识符的值仍然相同。只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-p124">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="32d6b-192">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-192">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.load
    summary: <span data-ttu-id="32d6b-193">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-193">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="32d6b-194">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="32d6b-194">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="32d6b-195">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="32d6b-195">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="32d6b-196">`load(option?: string | string[]): Excel.Worksheet`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-196">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="32d6b-197">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-197">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="32d6b-198">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="32d6b-198">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="32d6b-199">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="32d6b-199">It is similar to the preceding signature.</span></span> <span data-ttu-id="32d6b-200">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="32d6b-200">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="32d6b-201">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="32d6b-201">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="32d6b-202">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="32d6b-202">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetLoadOptions
  - uid: excel.Excel.Worksheet.load_1
    summary: '<span data-ttu-id="32d6b-203">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-203">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="32d6b-204">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="32d6b-204">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-205">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-205">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="32d6b-206">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-206">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Worksheet.load_2
    summary: '<span data-ttu-id="32d6b-207">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-207">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="32d6b-208">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="32d6b-208">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="32d6b-209">其中, propertyNamesAndPaths 是用逗号分隔的字符串, 用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-209">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Worksheet.name
    summary: |-
      <span data-ttu-id="32d6b-210">工作表的显示名称。</span><span class="sxs-lookup"><span data-stu-id="32d6b-210">The display name of the worksheet.</span></span>

      <span data-ttu-id="32d6b-211">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-211">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.names
    summary: |-
      <span data-ttu-id="32d6b-212">一组范围限定到当前工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="32d6b-212">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="32d6b-213">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-213">Read-only.</span></span>

      <span data-ttu-id="32d6b-214">\[[API 集: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-214">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - excel.Excel.NamedItemCollection
  - uid: excel.Excel.Worksheet.onActivated
    summary: |-
      <span data-ttu-id="32d6b-215">当激活工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="32d6b-215">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="32d6b-216">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-216">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-217">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-217">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onCalculated
    summary: |-
      <span data-ttu-id="32d6b-218">在计算工作表时发生。</span><span class="sxs-lookup"><span data-stu-id="32d6b-218">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="32d6b-219">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-219">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-220">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-220">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onChanged
    summary: |-
      <span data-ttu-id="32d6b-221">当指定的工作表上的数据发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="32d6b-221">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="32d6b-222">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-222">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-223">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-223">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: excel.Excel.Worksheet.onDeactivated
    summary: |-
      <span data-ttu-id="32d6b-224">停用工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="32d6b-224">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="32d6b-225">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-225">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-226">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-226">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onSelectionChanged
    summary: |-
      <span data-ttu-id="32d6b-227">当指定的工作表上的所选内容更改时发生。</span><span class="sxs-lookup"><span data-stu-id="32d6b-227">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="32d6b-228">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-228">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-229">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-229">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.pivotTables
    summary: |-
      <span data-ttu-id="32d6b-230">一组属于 worksheet 的 PivotTable 对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-230">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="32d6b-231">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-231">Read-only.</span></span>

      <span data-ttu-id="32d6b-232">\[[API 集: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-232">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - excel.Excel.PivotTableCollection
  - uid: excel.Excel.Worksheet.position
    summary: |-
      <span data-ttu-id="32d6b-233">工作表在工作簿中的位置，从零开始。</span><span class="sxs-lookup"><span data-stu-id="32d6b-233">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="32d6b-234">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-234">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.protection
    summary: |-
      <span data-ttu-id="32d6b-235">返回表工作表的工作表保护对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-235">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="32d6b-236">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-236">Read-only.</span></span>

      <span data-ttu-id="32d6b-237">\[[API 集: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-237">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
  - uid: excel.Excel.Worksheet.set
    summary: '<span data-ttu-id="32d6b-238">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-238">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="32d6b-239">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="32d6b-239">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="32d6b-240">此方法具有以下附加签名:</span><span class="sxs-lookup"><span data-stu-id="32d6b-240">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="32d6b-241">一个 JavaScript 对象, 其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-241">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: '<span data-ttu-id="32d6b-242">提供一个选项, 以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="32d6b-242">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Worksheet.set_1
    summary: '<span data-ttu-id="32d6b-243">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-243">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.showGridlines
    summary: |-
      <span data-ttu-id="32d6b-244">获取或设置工作表的网格线标志。</span><span class="sxs-lookup"><span data-stu-id="32d6b-244">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="32d6b-245">此标志确定是否对用户显示网格线。</span><span class="sxs-lookup"><span data-stu-id="32d6b-245">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="32d6b-246">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-246">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-247">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-247">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.showHeadings
    summary: |-
      <span data-ttu-id="32d6b-248">获取或设置工作表的标题标志。</span><span class="sxs-lookup"><span data-stu-id="32d6b-248">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="32d6b-249">此标志确定是否对用户显示标题。</span><span class="sxs-lookup"><span data-stu-id="32d6b-249">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="32d6b-250">\[[API 集: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-250">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Worksheet.standardHeight
    summary: |-
      <span data-ttu-id="32d6b-251">返回工作表中所有行的标准（默认）行高，以磅为单位。</span><span class="sxs-lookup"><span data-stu-id="32d6b-251">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="32d6b-252">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-252">Read-only.</span></span>

      <span data-ttu-id="32d6b-253">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-253">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.standardWidth
    summary: |-
      <span data-ttu-id="32d6b-254">返回或设置工作表中所有列的标准（默认）列宽。</span><span class="sxs-lookup"><span data-stu-id="32d6b-254">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="32d6b-255">一个列宽单位等于“常规”样式中一个字符的宽度。</span><span class="sxs-lookup"><span data-stu-id="32d6b-255">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="32d6b-256">对于比例字体，则使用字符 0（零）的宽度。</span><span class="sxs-lookup"><span data-stu-id="32d6b-256">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="32d6b-257">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-257">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.tabColor
    summary: |-
      <span data-ttu-id="32d6b-258">获取或设置工作表标签颜色。</span><span class="sxs-lookup"><span data-stu-id="32d6b-258">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="32d6b-259">检索选项卡颜色时, 如果工作表不可见, 则值将为 null。</span><span class="sxs-lookup"><span data-stu-id="32d6b-259">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="32d6b-260">如果工作表可见但选项卡颜色设置为自动, 将返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="32d6b-260">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="32d6b-261">否则, 在设置颜色时, 属性将设置为颜色, 格式为\#"123456", 则使用空字符串设置 "自动" 颜色, 或使用实际颜色。</span><span class="sxs-lookup"><span data-stu-id="32d6b-261">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="32d6b-262">\[[API 集: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-262">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="32d6b-263">示例</span><span class="sxs-lookup"><span data-stu-id="32d6b-263">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.tables
    summary: |-
      <span data-ttu-id="32d6b-264">属于工作表的表的集合。</span><span class="sxs-lookup"><span data-stu-id="32d6b-264">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="32d6b-265">只读。</span><span class="sxs-lookup"><span data-stu-id="32d6b-265">Read-only.</span></span>

      <span data-ttu-id="32d6b-266">\[[API 集: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-266">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
  - uid: excel.Excel.Worksheet.toJSON
    summary: '<span data-ttu-id="32d6b-267">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="32d6b-267">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="32d6b-268">.</span><span class="sxs-lookup"><span data-stu-id="32d6b-268"></span></span> <span data-ttu-id="32d6b-269">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="32d6b-269"></span></span><!-- --><span data-ttu-id="32d6b-270">反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel 工作表对象是 API 对象, 但`toJSON`方法返回一个简单的 JavaScript 对象 (类型为`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="32d6b-270">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="32d6b-271">), 其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="32d6b-271">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel.Excel.Worksheet.visibility
    summary: |-
      <span data-ttu-id="32d6b-272">工作表的可见性。</span><span class="sxs-lookup"><span data-stu-id="32d6b-272">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="32d6b-273">\[[API 集: ExcelApi 1.1 用于读取可见性; 1.2 用于设置。](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="32d6b-273">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="32d6b-274">\]</span><span class="sxs-lookup"><span data-stu-id="32d6b-274"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"