### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartScopedCollection
    summary: |-
      <span data-ttu-id="fef84-101">一个由限定的自定义 XML 部件组成的集合。</span><span class="sxs-lookup"><span data-stu-id="fef84-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="fef84-102">作用域的集合是某些操作 (例如, 按命名空间进行筛选) 的结果。</span><span class="sxs-lookup"><span data-stu-id="fef84-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="fef84-103">作用域内的集合不能进一步设定范围。</span><span class="sxs-lookup"><span data-stu-id="fef84-103">A scoped collection cannot be scoped any further.</span></span>

      <span data-ttu-id="fef84-104">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fef84-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.CustomXmlPartScopedCollection.context
      - excel.Excel.CustomXmlPartScopedCollection.getCount
      - excel.Excel.CustomXmlPartScopedCollection.getItem
      - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
      - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
      - excel.Excel.CustomXmlPartScopedCollection.items
      - excel.Excel.CustomXmlPartScopedCollection.load
      - excel.Excel.CustomXmlPartScopedCollection.load_1
      - excel.Excel.CustomXmlPartScopedCollection.load_2
      - excel.Excel.CustomXmlPartScopedCollection.toJSON
  - uid: excel.Excel.CustomXmlPartScopedCollection.context
    summary: <span data-ttu-id="fef84-105">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="fef84-105">The request context associated with the object.</span></span> <span data-ttu-id="fef84-106">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="fef84-106">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.CustomXmlPartScopedCollection.getCount
    summary: |-
      <span data-ttu-id="fef84-107">获取此集合中 CustomXML 部件的数量。</span><span class="sxs-lookup"><span data-stu-id="fef84-107">Gets the number of CustomXML parts in this collection.</span></span>

      <span data-ttu-id="fef84-108">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fef84-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fef84-109">示例</span><span class="sxs-lookup"><span data-stu-id="fef84-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItem
    summary: |-
      <span data-ttu-id="fef84-110">获取基于其 ID 的自定义 XML 部件。</span><span class="sxs-lookup"><span data-stu-id="fef84-110">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="fef84-111">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fef84-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="fef84-112">要检索的对象的 ID。</span><span class="sxs-lookup"><span data-stu-id="fef84-112">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="fef84-113">获取基于其 ID 的自定义 XML 部件。</span><span class="sxs-lookup"><span data-stu-id="fef84-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="fef84-114">如果 CustomXmlPart 不存在, 则返回对象的 isNull 属性将为 true。</span><span class="sxs-lookup"><span data-stu-id="fef84-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="fef84-115">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fef84-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fef84-116">示例</span><span class="sxs-lookup"><span data-stu-id="fef84-116">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="fef84-117">要检索的对象的 ID。</span><span class="sxs-lookup"><span data-stu-id="fef84-117">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
    summary: |-
      <span data-ttu-id="fef84-118">如果集合仅包含一个项，则此方法返回该项。</span><span class="sxs-lookup"><span data-stu-id="fef84-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="fef84-119">否则, 此方法将产生错误。</span><span class="sxs-lookup"><span data-stu-id="fef84-119">Otherwise, this method produces an error.</span></span>

      <span data-ttu-id="fef84-120">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fef84-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="fef84-121">示例</span><span class="sxs-lookup"><span data-stu-id="fef84-121">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    summary: |-
      <span data-ttu-id="fef84-122">如果集合仅包含一个项，则此方法返回该项。</span><span class="sxs-lookup"><span data-stu-id="fef84-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="fef84-123">否则, 此方法返回 Null。</span><span class="sxs-lookup"><span data-stu-id="fef84-123">Otherwise, this method returns Null.</span></span>

      <span data-ttu-id="fef84-124">\[[API 集: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="fef84-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
  - uid: excel.Excel.CustomXmlPartScopedCollection.items
    summary: <span data-ttu-id="fef84-125">获取此集合中已加载的子项。</span><span class="sxs-lookup"><span data-stu-id="fef84-125">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load
    summary: <span data-ttu-id="fef84-126">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="fef84-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="fef84-127">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="fef84-127">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="fef84-128">除了此签名之外, 此方法还具有以下签名:</span><span class="sxs-lookup"><span data-stu-id="fef84-128">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="fef84-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-Where 选项是一个逗号分隔的字符串或一个字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="fef84-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="fef84-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-Where 选项。选择是一个用逗号分隔的字符串, 用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串, 用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="fef84-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="fef84-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="fef84-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="fef84-132">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="fef84-132">It is similar to the preceding signature.</span></span> <span data-ttu-id="fef84-133">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="fef84-133">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="fef84-134">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="fef84-134">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="fef84-135">如果指定了 top 选项, 则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="fef84-135">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.CustomXmlPartScopedCollection.load_1
    summary: '<span data-ttu-id="fef84-136">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="fef84-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="fef84-137">在读取属性`context.sync()`之前, 必须先调用。</span><span class="sxs-lookup"><span data-stu-id="fef84-137">You must call `context.sync()` before reading the properties.</span></span>'
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="fef84-138">一个以逗号分隔的字符串或字符串数组, 用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="fef84-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartScopedCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
    summary: '<span data-ttu-id="fef84-139">重写 JavaScript `toJSON()`方法, 以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="fef84-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="fef84-140">.</span><span class="sxs-lookup"><span data-stu-id="fef84-140"></span></span> <span data-ttu-id="fef84-141">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="fef84-141"></span></span><!-- --><span data-ttu-id="fef84-142">反过来, 也会调用传递`toJSON`给它的对象的方法。尽管原始`Excel.CustomXmlPartScopedCollection`对象是 API 对象, 但`toJSON`方法返回一个无格式的 JavaScript 对象 (类型为`Excel.Interfaces.CustomXmlPartScopedCollectionData`</span><span class="sxs-lookup"><span data-stu-id="fef84-142">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`</span></span><!-- --><span data-ttu-id="fef84-143">), 其中包含集合的项中所有加载属性的浅表副本的 "items" 数组。</span><span class="sxs-lookup"><span data-stu-id="fef84-143">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
        description: ''