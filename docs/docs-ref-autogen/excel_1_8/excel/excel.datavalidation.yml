### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidation:class'
    summary: |-
      <span data-ttu-id="dbaec-101">表示应用于当前范围的数据验证。</span><span class="sxs-lookup"><span data-stu-id="dbaec-101">Represents the data validation applied to the current range.</span></span> <span data-ttu-id="dbaec-102">若要了解有关数据验证对象模型的详细信息，请参阅[向 Excel 区域添加数据验证](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span><span class="sxs-lookup"><span data-stu-id="dbaec-102">To learn more about the data validation object model, read [Add data validation to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span></span><!-- --><span data-ttu-id="dbaec-103">.</span><span class="sxs-lookup"><span data-stu-id="dbaec-103"></span></span>

      <span data-ttu-id="dbaec-104">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.DataValidation#clear:member(1)'
      - 'excel!Excel.DataValidation#context:member'
      - 'excel!Excel.DataValidation#errorAlert:member'
      - 'excel!Excel.DataValidation#ignoreBlanks:member'
      - 'excel!Excel.DataValidation#load:member(1)'
      - 'excel!Excel.DataValidation#load:member(2)'
      - 'excel!Excel.DataValidation#load:member(3)'
      - 'excel!Excel.DataValidation#prompt:member'
      - 'excel!Excel.DataValidation#rule:member'
      - 'excel!Excel.DataValidation#set:member(1)'
      - 'excel!Excel.DataValidation#set:member(2)'
      - 'excel!Excel.DataValidation#toJSON:member(1)'
      - 'excel!Excel.DataValidation#type:member'
      - 'excel!Excel.DataValidation#valid:member'
  - uid: 'excel!Excel.DataValidation#clear:member(1)'
    summary: |-
      <span data-ttu-id="dbaec-105">清除当前区域中的数据有效性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-105">Clears the data validation from the current range.</span></span>

      <span data-ttu-id="dbaec-106">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-106">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.DataValidation#context:member'
    summary: <span data-ttu-id="dbaec-107">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="dbaec-107">The request context associated with the object.</span></span> <span data-ttu-id="dbaec-108">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="dbaec-108">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.DataValidation#errorAlert:member'
    summary: |-
      <span data-ttu-id="dbaec-109">用户输入无效数据时，出现错误警报。</span><span class="sxs-lookup"><span data-stu-id="dbaec-109">Error alert when user enters invalid data.</span></span>

      <span data-ttu-id="dbaec-110">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-110">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: Excel.DataValidationErrorAlert;'
      return:
        type:
          - 'excel!Excel.DataValidationErrorAlert:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="dbaec-111">示例</span><span class="sxs-lookup"><span data-stu-id="dbaec-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#ignoreBlanks:member'
    summary: |-
      <span data-ttu-id="dbaec-112">忽略空白：不会对空白单元格执行数据严重，默认为 true。</span><span class="sxs-lookup"><span data-stu-id="dbaec-112">Ignore blanks: no data validation will be performed on blank cells, it defaults to true.</span></span>

      <span data-ttu-id="dbaec-113">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-113">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.DataValidation#load:member(1)'
    summary: <span data-ttu-id="dbaec-114">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-114">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="dbaec-115">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="dbaec-115">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="dbaec-116">除了此签名之外，此方法还具有以下签名：</span><span class="sxs-lookup"><span data-stu-id="dbaec-116">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="dbaec-117">`load(option?: string | string[]): Excel.DataValidation`-Where 选项是一个逗号分隔的字符串或一个字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-117">`load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="dbaec-118">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation`-Where 选项。选择是一个用逗号分隔的字符串，用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-118">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="dbaec-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="dbaec-119">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types.</span></span> <span data-ttu-id="dbaec-120">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="dbaec-120">It is similar to the preceding signature.</span></span> <span data-ttu-id="dbaec-121">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="dbaec-121">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="dbaec-122">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="dbaec-122">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="dbaec-123">如果指定了 top 选项，则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="dbaec-123">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.DataValidationLoadOptions:interface'
  - uid: 'excel!Excel.DataValidation#load:member(2)'
    summary: <span data-ttu-id="dbaec-124">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-124">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="dbaec-125">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="dbaec-125">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="dbaec-126">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-126">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.DataValidation#load:member(3)'
    summary: <span data-ttu-id="dbaec-127">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-127">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="dbaec-128">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="dbaec-128">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="dbaec-129">其中，propertyNamesAndPaths 是用逗号分隔的字符串，用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-129">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.DataValidation#prompt:member'
    summary: |-
      <span data-ttu-id="dbaec-130">当用户选择单元格时提示。</span><span class="sxs-lookup"><span data-stu-id="dbaec-130">Prompt when users select a cell.</span></span> <span data-ttu-id="dbaec-131">必须`DataValidationPrompt`将该对象设置为 JSON 对象（使用`x.prompt = {...}` ，而不是`x.prompt.message = ...`</span><span class="sxs-lookup"><span data-stu-id="dbaec-131">The `DataValidationPrompt` object must be set as a JSON object (use `x.prompt = {...}` instead of `x.prompt.message = ...`</span></span><!-- --><span data-ttu-id="dbaec-132">).</span><span class="sxs-lookup"><span data-stu-id="dbaec-132"></span></span>

      <span data-ttu-id="dbaec-133">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-133">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: Excel.DataValidationPrompt;'
      return:
        type:
          - 'excel!Excel.DataValidationPrompt:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="dbaec-134">示例</span><span class="sxs-lookup"><span data-stu-id="dbaec-134">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#rule:member'
    summary: |-
      <span data-ttu-id="dbaec-135">包含不同类型的数据验证条件的数据有效性规则。</span><span class="sxs-lookup"><span data-stu-id="dbaec-135">Data validation rule that contains different type of data validation criteria.</span></span>

      <span data-ttu-id="dbaec-136">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-136">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.DataValidationRule;'
      return:
        type:
          - 'excel!Excel.DataValidationRule:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="dbaec-137">示例</span><span class="sxs-lookup"><span data-stu-id="dbaec-137">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidation#set:member(1)'
    summary: '<span data-ttu-id="dbaec-138">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-138">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="dbaec-139">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="dbaec-139">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="dbaec-140">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="dbaec-140">This method has the following additional signature:</span></span>

      `set(properties: Excel.DataValidation): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="dbaec-141">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-141">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.DataValidationUpdateData:interface'
        - id: options
          description: <span data-ttu-id="dbaec-142">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="dbaec-142">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.DataValidation#set:member(2)'
    summary: '<span data-ttu-id="dbaec-143">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="dbaec-143">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataValidation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.DataValidation#toJSON:member(1)'
    summary: '<span data-ttu-id="dbaec-144">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="dbaec-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="dbaec-145">.</span><span class="sxs-lookup"><span data-stu-id="dbaec-145"></span></span> <span data-ttu-id="dbaec-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="dbaec-146"></span></span><!-- --><span data-ttu-id="dbaec-147">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始 DataValidation 对象是 API 对象，但`toJSON`方法返回一个无格式的 JavaScript 对象（类型为`Excel.Interfaces.DataValidationData`</span><span class="sxs-lookup"><span data-stu-id="dbaec-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`</span></span><!-- --><span data-ttu-id="dbaec-148">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="dbaec-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataValidationData;'
      return:
        type:
          - 'excel!Excel.Interfaces.DataValidationData:interface'
        description: ''
  - uid: 'excel!Excel.DataValidation#type:member'
    summary: |-
      <span data-ttu-id="dbaec-149">数据有效性类型，有关详细信息，请参阅 Excel.DataValidationType。</span><span class="sxs-lookup"><span data-stu-id="dbaec-149">Type of the data validation, see Excel.DataValidationType for details.</span></span>

      <span data-ttu-id="dbaec-150">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-150">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
      return:
        type:
          - 'excel!Excel.DataValidation#type~0:complex'
  - uid: 'excel!Excel.DataValidation#valid:member'
    summary: |-
      <span data-ttu-id="dbaec-151">表示所有单元格值根据数据有效性规则是否全部有效。</span><span class="sxs-lookup"><span data-stu-id="dbaec-151">Represents if all cell values are valid according to the data validation rules.</span></span> <span data-ttu-id="dbaec-152">如果所有单元格的值都有效，则返回 true; 如果所有单元格值无效，则返回 false。</span><span class="sxs-lookup"><span data-stu-id="dbaec-152">Returns true if all cell values are valid, or false if all cell values are invalid.</span></span> <span data-ttu-id="dbaec-153">如果区域中存在有效和无效的单元格值，则返回 null。</span><span class="sxs-lookup"><span data-stu-id="dbaec-153">Returns null if there are both valid and invalid cell values within the range.</span></span>

      <span data-ttu-id="dbaec-154">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="dbaec-154">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.DataValidationErrorAlert:interface'
    name: Excel.DataValidationErrorAlert
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.Interfaces.DataValidationLoadOptions:interface'
    name: Excel.Interfaces.DataValidationLoadOptions
  - uid: 'excel!Excel.DataValidationPrompt:interface'
    name: Excel.DataValidationPrompt
  - uid: 'excel!Excel.DataValidationRule:interface'
    name: Excel.DataValidationRule
  - uid: 'excel!Excel.Interfaces.DataValidationUpdateData:interface'
    name: Interfaces.DataValidationUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.DataValidationData:interface'
    name: Excel.Interfaces.DataValidationData
  - uid: 'excel!Excel.DataValidation#type~0:complex'
    name: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
    fullName: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
    spec.typeScript:
      - uid: 'excel!Excel.DataValidationType:enum'
        name: Excel.DataValidationType
        fullName: Excel.DataValidationType
      - name: ' | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"'
        fullName: ' | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"'