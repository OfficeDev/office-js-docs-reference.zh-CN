### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidationRule:interface'
    summary: |-
      <span data-ttu-id="f62b6-101">数据有效性规则包含不同类型的数据验证。</span><span class="sxs-lookup"><span data-stu-id="f62b6-101">Data validation rule contains different types of data validation.</span></span> <span data-ttu-id="f62b6-102">一次只能根据 DataValidationType 使用其中一种方法。</span><span class="sxs-lookup"><span data-stu-id="f62b6-102">You can only use one of them at a time according the Excel.DataValidationType.</span></span>

      <span data-ttu-id="f62b6-103">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-103">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidationRule
    fullName: Excel.DataValidationRule
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.DataValidationRule#custom:member'
      - 'excel!Excel.DataValidationRule#date:member'
      - 'excel!Excel.DataValidationRule#decimal:member'
      - 'excel!Excel.DataValidationRule#list:member'
      - 'excel!Excel.DataValidationRule#textLength:member'
      - 'excel!Excel.DataValidationRule#time:member'
      - 'excel!Excel.DataValidationRule#wholeNumber:member'
  - uid: 'excel!Excel.DataValidationRule#custom:member'
    summary: |-
      <span data-ttu-id="f62b6-104">自定义数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-104">Custom data validation criteria.</span></span>

      <span data-ttu-id="f62b6-105">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-105">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'custom?: Excel.CustomDataValidation;'
      return:
        type:
          - 'excel!Excel.CustomDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#date:member'
    summary: |-
      <span data-ttu-id="f62b6-106">日期数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-106">Date data validation criteria.</span></span>

      <span data-ttu-id="f62b6-107">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-107">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: date
    fullName: date
    langs:
      - typeScript
    type: property
    syntax:
      content: 'date?: Excel.DateTimeDataValidation;'
      return:
        type:
          - 'excel!Excel.DateTimeDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#decimal:member'
    summary: |-
      <span data-ttu-id="f62b6-108">小数数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-108">Decimal data validation criteria.</span></span>

      <span data-ttu-id="f62b6-109">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-109">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: decimal
    fullName: decimal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'decimal?: Excel.BasicDataValidation;'
      return:
        type:
          - 'excel!Excel.BasicDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#list:member'
    summary: |-
      <span data-ttu-id="f62b6-110">列表数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-110">List data validation criteria.</span></span>

      <span data-ttu-id="f62b6-111">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-111">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: list
    fullName: list
    langs:
      - typeScript
    type: property
    syntax:
      content: 'list?: Excel.ListDataValidation;'
      return:
        type:
          - 'excel!Excel.ListDataValidation:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f62b6-112">示例</span><span class="sxs-lookup"><span data-stu-id="f62b6-112">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.DataValidationRule#textLength:member'
    summary: |-
      <span data-ttu-id="f62b6-113">TextLength 数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-113">TextLength data validation criteria.</span></span>

      <span data-ttu-id="f62b6-114">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-114">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textLength
    fullName: textLength
    langs:
      - typeScript
    type: property
    syntax:
      content: 'textLength?: Excel.BasicDataValidation;'
      return:
        type:
          - 'excel!Excel.BasicDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#time:member'
    summary: |-
      <span data-ttu-id="f62b6-115">时间数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-115">Time data validation criteria.</span></span>

      <span data-ttu-id="f62b6-116">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-116">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: time
    fullName: time
    langs:
      - typeScript
    type: property
    syntax:
      content: 'time?: Excel.DateTimeDataValidation;'
      return:
        type:
          - 'excel!Excel.DateTimeDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#wholeNumber:member'
    summary: |-
      <span data-ttu-id="f62b6-117">WholeNumber 数据有效性条件。</span><span class="sxs-lookup"><span data-stu-id="f62b6-117">WholeNumber data validation criteria.</span></span>

      <span data-ttu-id="f62b6-118">\[[API 集： ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f62b6-118">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: wholeNumber
    fullName: wholeNumber
    langs:
      - typeScript
    type: property
    syntax:
      content: 'wholeNumber?: Excel.BasicDataValidation;'
      return:
        type:
          - 'excel!Excel.BasicDataValidation:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f62b6-119">示例</span><span class="sxs-lookup"><span data-stu-id="f62b6-119">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
references:
  - uid: 'excel!Excel.CustomDataValidation:interface'
    name: Excel.CustomDataValidation
  - uid: 'excel!Excel.DateTimeDataValidation:interface'
    name: Excel.DateTimeDataValidation
  - uid: 'excel!Excel.BasicDataValidation:interface'
    name: Excel.BasicDataValidation
  - uid: 'excel!Excel.ListDataValidation:interface'
    name: Excel.ListDataValidation