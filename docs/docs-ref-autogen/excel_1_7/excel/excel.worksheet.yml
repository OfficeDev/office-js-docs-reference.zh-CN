### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: |-
      <span data-ttu-id="6bb9d-101">Excel 工作表是由单元格组成的网格。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="6bb9d-102">它可以包含数据、表、图表等。若要了解有关工作表对象模型的详细信息，请参阅[使用 Excel JAVASCRIPT API 处理工作表](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span><span class="sxs-lookup"><span data-stu-id="6bb9d-102">It can contain data, tables, charts, etc. To learn more about the worksheet object model, read [Work with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)</span></span><!-- --><span data-ttu-id="6bb9d-103">.</span><span class="sxs-lookup"><span data-stu-id="6bb9d-103"></span></span>

      <span data-ttu-id="6bb9d-104">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-105">在 Excel UI 中激活工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-105">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="6bb9d-106">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-107">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-108">计算工作表上的所有单元格。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-108">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="6bb9d-109">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="6bb9d-110">如果为 True，则将全部标记为已更新。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-110">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: |-
      <span data-ttu-id="6bb9d-111">返回属于工作表的图表的集合。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-111">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="6bb9d-112">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-112">Read-only.</span></span>

      <span data-ttu-id="6bb9d-113">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: <span data-ttu-id="6bb9d-114">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-114">The request context associated with the object.</span></span> <span data-ttu-id="6bb9d-115">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-115">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-116">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-116">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="6bb9d-117">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-117">Return the copied worksheet.</span></span>

      <span data-ttu-id="6bb9d-118">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-118">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-119">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-119">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="6bb9d-120">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-120">Optional.</span></span>
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: <span data-ttu-id="6bb9d-121">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-121">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: |-
      <span data-ttu-id="6bb9d-122">复制工作表并将其置于指定位置。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-122">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="6bb9d-123">返回复制的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-123">Return the copied worksheet.</span></span>

      <span data-ttu-id="6bb9d-124">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-124">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="6bb9d-125">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-125">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="6bb9d-126">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-126">Optional.</span></span>
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-127">从工作簿中删除工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-127">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="6bb9d-128">请注意，如果工作表的可见性设置为 "VeryHidden"，则删除操作将失败， `InvalidOperation`并出现异常。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-128">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with an `InvalidOperation` exception.</span></span> <span data-ttu-id="6bb9d-129">应首先将其可见性更改为隐藏或可见，然后再将其删除。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-129">You should first change its visibility to hidden or visible before deleting it.</span></span>

      <span data-ttu-id="6bb9d-130">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-130">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-131">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-131">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: |-
      <span data-ttu-id="6bb9d-132">获取一个对象，该对象可用于操作工作表上的冻结窗格。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-132">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="6bb9d-133">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-133">Read-only.</span></span>

      <span data-ttu-id="6bb9d-134">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-134">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-135">根据行和列编号获取包含单个单元格的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-135">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="6bb9d-136">单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-136">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="6bb9d-137">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-137">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-138">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-138">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="6bb9d-139">要检索的单元格的行号。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-139">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="6bb9d-140">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-140">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="6bb9d-141">要检索的单元格的列号。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-141">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="6bb9d-142">从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-142">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-143">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-143">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="6bb9d-144">如果此方法后面没有任何工作表，则此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-144">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="6bb9d-145">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-145">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-146">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-146">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="6bb9d-147">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-147">Optional.</span></span> <span data-ttu-id="6bb9d-148">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-148">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-149">获取此工作表的后面的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-149">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="6bb9d-150">如果此方法后面没有任何工作表，则此方法将返回一个 null 对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-150">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="6bb9d-151">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-151">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="6bb9d-152">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-152">Optional.</span></span> <span data-ttu-id="6bb9d-153">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-153">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-154">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-154">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="6bb9d-155">如果没有以前的工作表，此方法将引发错误。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-155">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="6bb9d-156">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-156">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-157">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-157">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="6bb9d-158">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-158">Optional.</span></span> <span data-ttu-id="6bb9d-159">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-159">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-160">获取此项之前的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-160">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="6bb9d-161">如果没有以前的工作表，则此方法将返回一个空的 objet。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-161">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="6bb9d-162">\[[API 集： ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-162">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="6bb9d-163">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-163">Optional.</span></span> <span data-ttu-id="6bb9d-164">如果为 true，则只考虑可见的工作表，跳过任何隐藏的工作表。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-164">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-165">获取一个 range 对象，该对象代表由地址或名称指定的单个矩形单元格块。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-165">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="6bb9d-166">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-166">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-167">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-167">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="6bb9d-168">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-168">Optional.</span></span> <span data-ttu-id="6bb9d-169">表示地址或范围名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-169">The string representing the address or name of the range.</span></span> <span data-ttu-id="6bb9d-170">例如，"A1： B2"。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-170">For example, "A1:B2".</span></span> <span data-ttu-id="6bb9d-171">如果未指定，则返回整个工作表区域。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-171">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-172">获取以特定行索引和列索引开始并跨越了一定数量的行和列的 range 对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-172">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="6bb9d-173">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-173">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="6bb9d-174">起始行（零编制索引）。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-174">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="6bb9d-175">Start 列（零个索引）。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-175">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: <span data-ttu-id="6bb9d-176">要包含在范围中的行数。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-176">Number of rows to include in the range.</span></span>
          type:
            - number
        - id: columnCount
          description: <span data-ttu-id="6bb9d-177">要包含在范围中的列数。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-177">Number of columns to include in the range.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-178">使用的区域是包含分配了值或格式化的任何单元格的最小区域。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-178">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="6bb9d-179">如果整个工作表为空，则此函数将返回左上角单元格（即，它*不*会引发错误）。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-179">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="6bb9d-180">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-180">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-181">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-181">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="6bb9d-182">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-182">Optional.</span></span> <span data-ttu-id="6bb9d-183">如果为 true，则仅考虑值为已使用单元格的单元格（忽略格式设置）。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-183">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="6bb9d-184">\[Api 集： ExcelApi 1。2\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-184">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="6bb9d-p122">使用的区域是包含分配了值或格式的任意单元格的最小区域。如果整个工作表为空，此函数将返回 NULL 对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-p122">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="6bb9d-187">\[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-187">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="6bb9d-188">可选。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-188">Optional.</span></span> <span data-ttu-id="6bb9d-189">仅将有值的单元格视为已使用的单元格。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-189">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: |-
      <span data-ttu-id="6bb9d-p124">返回用于唯一标识指定工作簿中工作表的值。即使工作表被重命名或移动，标识符的值仍然相同。只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-p124">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="6bb9d-193">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-193">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: <span data-ttu-id="6bb9d-194">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-194">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6bb9d-195">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-195">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="6bb9d-196">提供要加载的对象的属性的选项。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-196">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: <span data-ttu-id="6bb9d-197">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-197">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6bb9d-198">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-198">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-199">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-199">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="6bb9d-200">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-200">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: <span data-ttu-id="6bb9d-201">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-201">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6bb9d-202">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-202">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="6bb9d-203">`propertyNamesAndPaths.select`是一个以逗号分隔的字符串，用于指定要加载的属性`propertyNamesAndPaths.expand` ，并且是一个以逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-203">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: |-
      <span data-ttu-id="6bb9d-204">工作表的显示名称。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-204">The display name of the worksheet.</span></span>

      <span data-ttu-id="6bb9d-205">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-205">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: |-
      <span data-ttu-id="6bb9d-206">一组范围限定到当前工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-206">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="6bb9d-207">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-207">Read-only.</span></span>

      <span data-ttu-id="6bb9d-208">\[[API 集： ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-208">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: |-
      <span data-ttu-id="6bb9d-209">当激活工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-209">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="6bb9d-210">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-210">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-211">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-211">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: |-
      <span data-ttu-id="6bb9d-212">当指定的工作表上的数据发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-212">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="6bb9d-213">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-213">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-214">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-214">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: |-
      <span data-ttu-id="6bb9d-215">停用工作表时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-215">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="6bb9d-216">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-216">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-217">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-217">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: |-
      <span data-ttu-id="6bb9d-218">当指定的工作表上的所选内容更改时发生。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-218">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="6bb9d-219">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-219">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-220">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-220">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: |-
      <span data-ttu-id="6bb9d-221">一组属于 worksheet 的 PivotTable 对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-221">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="6bb9d-222">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-222">Read-only.</span></span>

      <span data-ttu-id="6bb9d-223">\[[API 集： ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-223">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: |-
      <span data-ttu-id="6bb9d-224">工作表在工作簿中的位置，从零开始。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-224">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="6bb9d-225">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-225">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: |-
      <span data-ttu-id="6bb9d-226">返回表工作表的工作表保护对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-226">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="6bb9d-227">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-227">Read-only.</span></span>

      <span data-ttu-id="6bb9d-228">\[[API 集： ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-228">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: '<span data-ttu-id="6bb9d-229">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-229">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="6bb9d-230">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-230">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="6bb9d-231">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="6bb9d-231">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="6bb9d-232">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-232">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: <span data-ttu-id="6bb9d-233">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-233">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: '<span data-ttu-id="6bb9d-234">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-234">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: |-
      <span data-ttu-id="6bb9d-235">返回工作表中所有行的标准（默认）行高，以磅为单位。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-235">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="6bb9d-236">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-236">Read-only.</span></span>

      <span data-ttu-id="6bb9d-237">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-237">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: |-
      <span data-ttu-id="6bb9d-238">返回或设置工作表中所有列的标准（默认）列宽。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-238">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="6bb9d-239">一个列宽单位等于“常规”样式中一个字符的宽度。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-239">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="6bb9d-240">对于比例字体，则使用字符 0（零）的宽度。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-240">For proportional fonts, the width of the character 0 (zero) is used.</span></span>

      <span data-ttu-id="6bb9d-241">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-241">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: |-
      <span data-ttu-id="6bb9d-242">获取或设置工作表标签颜色。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-242">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="6bb9d-243">检索选项卡颜色时，如果工作表不可见，则值将为 null。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-243">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="6bb9d-244">如果工作表可见但选项卡颜色设置为自动，将返回一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-244">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="6bb9d-245">否则，在设置颜色时，属性将设置为颜色，格式为\#"123456"，则使用空字符串设置 "自动" 颜色，或使用实际颜色。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-245">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="6bb9d-246">\[[API 集： ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-246">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6bb9d-247">示例</span><span class="sxs-lookup"><span data-stu-id="6bb9d-247">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: |-
      <span data-ttu-id="6bb9d-248">属于工作表的表的集合。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-248">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="6bb9d-249">只读。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-249">Read-only.</span></span>

      <span data-ttu-id="6bb9d-250">\[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-250">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: '<span data-ttu-id="6bb9d-251">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="6bb9d-251">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="6bb9d-252">.</span><span class="sxs-lookup"><span data-stu-id="6bb9d-252"></span></span> <span data-ttu-id="6bb9d-253">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="6bb9d-253"></span></span><!-- --><span data-ttu-id="6bb9d-254">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始的 Excel 工作表对象是 API 对象，但`toJSON`方法返回一个简单的 JavaScript 对象（类型为`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="6bb9d-254">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="6bb9d-255">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-255">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: |-
      <span data-ttu-id="6bb9d-256">工作表的可见性。</span><span class="sxs-lookup"><span data-stu-id="6bb9d-256">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="6bb9d-257">\[[API 集： ExcelApi 1.1 用于读取可见性; 1.2 用于设置。](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="6bb9d-257">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="6bb9d-258">\]</span><span class="sxs-lookup"><span data-stu-id="6bb9d-258"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'