### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormat:class'
    summary: |-
      <span data-ttu-id="4a2db-101">一个封装条件格式的范围、格式、规则和其他属性的对象。</span><span class="sxs-lookup"><span data-stu-id="4a2db-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span> <span data-ttu-id="4a2db-102">若要了解有关条件格式对象模型的详细信息，请参阅[将条件格式应用于 Excel 区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)</span><span class="sxs-lookup"><span data-stu-id="4a2db-102">To learn more about the conditional formatting object model, read [Apply conditional formatting to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)</span></span><!-- --><span data-ttu-id="4a2db-103">.</span><span class="sxs-lookup"><span data-stu-id="4a2db-103"></span></span>

      <span data-ttu-id="4a2db-104">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormat#cellValue:member'
      - 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#colorScale:member'
      - 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#context:member'
      - 'excel!Excel.ConditionalFormat#custom:member'
      - 'excel!Excel.ConditionalFormat#customOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#dataBar:member'
      - 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#delete:member(1)'
      - 'excel!Excel.ConditionalFormat#getRange:member(1)'
      - 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
      - 'excel!Excel.ConditionalFormat#iconSet:member'
      - 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#id:member'
      - 'excel!Excel.ConditionalFormat#load:member(1)'
      - 'excel!Excel.ConditionalFormat#load:member(2)'
      - 'excel!Excel.ConditionalFormat#load:member(3)'
      - 'excel!Excel.ConditionalFormat#preset:member'
      - 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#priority:member'
      - 'excel!Excel.ConditionalFormat#set:member(1)'
      - 'excel!Excel.ConditionalFormat#set:member(2)'
      - 'excel!Excel.ConditionalFormat#stopIfTrue:member'
      - 'excel!Excel.ConditionalFormat#textComparison:member'
      - 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#toJSON:member(1)'
      - 'excel!Excel.ConditionalFormat#topBottom:member'
      - 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#type:member'
  - uid: 'excel!Excel.ConditionalFormat#cellValue:member'
    summary: |-
      <span data-ttu-id="4a2db-105">如果当前条件格式为 CellValue 类型，则返回单元格值条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-105">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="4a2db-106">例如，设置5到10之间的所有单元格的格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-106">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="4a2db-107">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-107">Read-only.</span></span>

      <span data-ttu-id="4a2db-108">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-108">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-109">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-110">如果当前条件格式为 CellValue 类型，则返回单元格值条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-110">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="4a2db-111">例如，设置5到10之间的所有单元格的格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-111">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="4a2db-112">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-112">Read-only.</span></span>

      <span data-ttu-id="4a2db-113">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#colorScale:member'
    summary: |-
      <span data-ttu-id="4a2db-114">如果当前条件格式为色阶类型，则返回色阶条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-114">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="4a2db-115">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-115">Read-only.</span></span>

      <span data-ttu-id="4a2db-116">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-116">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-117">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-117">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-118">如果当前条件格式为色阶类型，则返回色阶条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-118">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="4a2db-119">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-119">Read-only.</span></span>

      <span data-ttu-id="4a2db-120">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-120">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#context:member'
    summary: <span data-ttu-id="4a2db-121">与该对象关联的请求上下文。</span><span class="sxs-lookup"><span data-stu-id="4a2db-121">The request context associated with the object.</span></span> <span data-ttu-id="4a2db-122">这会将加载项的进程连接到 Office 主机应用程序的进程。</span><span class="sxs-lookup"><span data-stu-id="4a2db-122">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormat#custom:member'
    summary: |-
      <span data-ttu-id="4a2db-123">如果当前条件格式为自定义类型，则返回自定义条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-123">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="4a2db-124">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-124">Read-only.</span></span>

      <span data-ttu-id="4a2db-125">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-125">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-126">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-127">如果当前条件格式为自定义类型，则返回自定义条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-127">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="4a2db-128">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-128">Read-only.</span></span>

      <span data-ttu-id="4a2db-129">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-129">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#dataBar:member'
    summary: |-
      <span data-ttu-id="4a2db-130">如果当前条件格式为数据栏，则返回数据条属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-130">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="4a2db-131">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-131">Read-only.</span></span>

      <span data-ttu-id="4a2db-132">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-132">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-133">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-133">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-134">如果当前条件格式为数据栏，则返回数据条属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-134">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="4a2db-135">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-135">Read-only.</span></span>

      <span data-ttu-id="4a2db-136">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-136">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    summary: |-
      <span data-ttu-id="4a2db-137">删除此条件格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-137">Deletes this conditional format.</span></span>

      <span data-ttu-id="4a2db-138">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-138">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRange:member(1)'
    summary: |-
      <span data-ttu-id="4a2db-139">返回应用条件格式的范围。</span><span class="sxs-lookup"><span data-stu-id="4a2db-139">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="4a2db-140">如果将条件格式应用于多个区域，则会引发错误。</span><span class="sxs-lookup"><span data-stu-id="4a2db-140">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="4a2db-141">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-141">Read-only.</span></span>

      <span data-ttu-id="4a2db-142">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-142">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-143">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-143">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="4a2db-144">返回条件格式应用于的区域; 或者，如果将条件格式应用于多个区域，则返回 null 对象。</span><span class="sxs-lookup"><span data-stu-id="4a2db-144">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="4a2db-145">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-145">Read-only.</span></span>

      <span data-ttu-id="4a2db-146">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-146">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#iconSet:member'
    summary: |-
      <span data-ttu-id="4a2db-147">如果当前条件格式为 IconSet 类型，则返回 IconSet 条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-147">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="4a2db-148">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-148">Read-only.</span></span>

      <span data-ttu-id="4a2db-149">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-149">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-150">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-150">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-151">如果当前条件格式为 IconSet 类型，则返回 IconSet 条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-151">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="4a2db-152">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-152">Read-only.</span></span>

      <span data-ttu-id="4a2db-153">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-153">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#id:member'
    summary: |-
      <span data-ttu-id="4a2db-154">当前 ConditionalFormatCollection 内的条件格式的优先级。</span><span class="sxs-lookup"><span data-stu-id="4a2db-154">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="4a2db-155">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-155">Read-only.</span></span>

      <span data-ttu-id="4a2db-156">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-156">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    summary: <span data-ttu-id="4a2db-157">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-157">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4a2db-158">在读取属性之前，你必须调用“context.sync()”。</span><span class="sxs-lookup"><span data-stu-id="4a2db-158">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="4a2db-159">除了此签名之外，此方法还具有以下签名：</span><span class="sxs-lookup"><span data-stu-id="4a2db-159">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="4a2db-160">`load(option?: string | string[]): Excel.ConditionalFormat`-Where 选项是一个逗号分隔的字符串或一个字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-160">`load(option?: string | string[]): Excel.ConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="4a2db-161">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Where 选项。选择是一个用逗号分隔的字符串，用于指定要加载的属性和选项。 expand 是一个用逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-161">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="4a2db-162">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-仅适用于集合类型。</span><span class="sxs-lookup"><span data-stu-id="4a2db-162">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="4a2db-163">它类似于前面的签名。</span><span class="sxs-lookup"><span data-stu-id="4a2db-163">It is similar to the preceding signature.</span></span> <span data-ttu-id="4a2db-164">Top 指定结果中可包含的集合项的最大数量。</span><span class="sxs-lookup"><span data-stu-id="4a2db-164">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="4a2db-165">选项。 skip 指定要跳过且不包含在结果中的项目数。</span><span class="sxs-lookup"><span data-stu-id="4a2db-165">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="4a2db-166">如果指定了 top 选项，则在跳过指定数目的项目后将启动结果集。</span><span class="sxs-lookup"><span data-stu-id="4a2db-166">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.ConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="4a2db-167">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-167">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4a2db-168">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="4a2db-168">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="4a2db-169">一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-169">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="4a2db-170">将命令加入队列以加载对象的指定属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-170">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4a2db-171">在读取属性`context.sync()`之前，必须先调用。</span><span class="sxs-lookup"><span data-stu-id="4a2db-171">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="4a2db-172">其中，propertyNamesAndPaths 是用逗号分隔的字符串，用于指定要加载的属性和 propertyNamesAndPaths。扩展是一个用逗号分隔的字符串，用于指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-172">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.ConditionalFormat#preset:member'
    summary: |-
      <span data-ttu-id="4a2db-173">返回预设条件的条件格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-173">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="4a2db-174">有关更多详细信息，请参阅 PresetCriteriaConditionalFormat。</span><span class="sxs-lookup"><span data-stu-id="4a2db-174">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="4a2db-175">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-175">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-176">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-176">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-177">返回预设条件的条件格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-177">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="4a2db-178">有关更多详细信息，请参阅 PresetCriteriaConditionalFormat。</span><span class="sxs-lookup"><span data-stu-id="4a2db-178">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="4a2db-179">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-179">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#priority:member'
    summary: |-
      <span data-ttu-id="4a2db-180">条件格式集合中当前存在此条件格式的优先级（或索引）。</span><span class="sxs-lookup"><span data-stu-id="4a2db-180">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="4a2db-181">更改此设置还会更改其他条件格式的优先级，以允许进行连续的优先级顺序。</span><span class="sxs-lookup"><span data-stu-id="4a2db-181">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="4a2db-182">使用负优先级从后开始。</span><span class="sxs-lookup"><span data-stu-id="4a2db-182">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="4a2db-183">优先级大于界限将获取并设置为最大值（如果为负，则为最小值）优先级。</span><span class="sxs-lookup"><span data-stu-id="4a2db-183">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="4a2db-184">另请注意，如果您更改优先级，则必须在该新的优先级位置重新获取该对象的新副本（如果要对其进行进一步的更改）。</span><span class="sxs-lookup"><span data-stu-id="4a2db-184">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="4a2db-185">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-185">Read-only.</span></span>

      <span data-ttu-id="4a2db-186">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-186">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.ConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="4a2db-187">同时设置一个对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-187">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="4a2db-188">您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。</span><span class="sxs-lookup"><span data-stu-id="4a2db-188">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="4a2db-189">此方法具有以下附加签名：</span><span class="sxs-lookup"><span data-stu-id="4a2db-189">This method has the following additional signature:</span></span>

      `set(properties: Excel.ConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="4a2db-190">一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-190">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.ConditionalFormatUpdateData:interface'
        - id: options
          description: <span data-ttu-id="4a2db-191">提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。</span><span class="sxs-lookup"><span data-stu-id="4a2db-191">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.ConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="4a2db-192">基于现有加载的对象同时设置该对象的多个属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-192">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.ConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    summary: |-
      <span data-ttu-id="4a2db-193">如果满足此条件格式的条件，则不会有任何低优先级格式应在此单元格上生效。</span><span class="sxs-lookup"><span data-stu-id="4a2db-193">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="4a2db-194">数值、icon sets 和 colorscales 中的 Null，因为没有针对这些项的 StopIfTrue 的概念</span><span class="sxs-lookup"><span data-stu-id="4a2db-194">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>

      <span data-ttu-id="4a2db-195">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-195">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.ConditionalFormat#textComparison:member'
    summary: |-
      <span data-ttu-id="4a2db-196">如果当前条件格式是文本类型，则返回特定的文本条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-196">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="4a2db-197">例如，设置与单词 "Text" 相匹配的单元格的格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-197">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="4a2db-198">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-198">Read-only.</span></span>

      <span data-ttu-id="4a2db-199">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-199">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-200">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-200">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-201">如果当前条件格式是文本类型，则返回特定的文本条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-201">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="4a2db-202">例如，设置与单词 "Text" 相匹配的单元格的格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-202">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="4a2db-203">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-203">Read-only.</span></span>

      <span data-ttu-id="4a2db-204">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-204">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="4a2db-205">重写 JavaScript `toJSON()`方法，以便在将 API 对象传递到时提供更有用的输出`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="4a2db-205">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="4a2db-206">.</span><span class="sxs-lookup"><span data-stu-id="4a2db-206"></span></span> <span data-ttu-id="4a2db-207">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="4a2db-207"></span></span><!-- --><span data-ttu-id="4a2db-208">反过来，也会调用传递`toJSON`给它的对象的方法。尽管原始 ConditionalFormat 对象是 API 对象，但`toJSON`方法返回一个无格式的 JavaScript 对象（类型为`Excel.Interfaces.ConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="4a2db-208">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`</span></span><!-- --><span data-ttu-id="4a2db-209">），其中包含原始对象中所有已加载的子属性的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="4a2db-209">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ConditionalFormatData:interface'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#topBottom:member'
    summary: |-
      <span data-ttu-id="4a2db-210">如果当前条件格式为 TopBottom 类型，则返回 Top/底端条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-210">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="4a2db-211">例如，设置前 10% 或前10个项目的格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-211">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="4a2db-212">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-212">Read-only.</span></span>

      <span data-ttu-id="4a2db-213">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-213">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    summary: |-
      <span data-ttu-id="4a2db-214">如果当前条件格式为 TopBottom 类型，则返回 Top/底端条件格式属性。</span><span class="sxs-lookup"><span data-stu-id="4a2db-214">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="4a2db-215">例如，设置前 10% 或前10个项目的格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-215">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="4a2db-216">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-216">Read-only.</span></span>

      <span data-ttu-id="4a2db-217">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-217">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#type:member'
    summary: |-
      <span data-ttu-id="4a2db-218">一种条件格式。</span><span class="sxs-lookup"><span data-stu-id="4a2db-218">A type of conditional format.</span></span> <span data-ttu-id="4a2db-219">一次只能设置一个。</span><span class="sxs-lookup"><span data-stu-id="4a2db-219">Only one can be set at a time.</span></span> <span data-ttu-id="4a2db-220">只读。</span><span class="sxs-lookup"><span data-stu-id="4a2db-220">Read-only.</span></span>

      <span data-ttu-id="4a2db-221">\[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4a2db-221">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - 'excel!Excel.ConditionalFormat#type~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4a2db-222">示例</span><span class="sxs-lookup"><span data-stu-id="4a2db-222">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.CellValueConditionalFormat:class'
    name: Excel.CellValueConditionalFormat
  - uid: 'excel!Excel.ColorScaleConditionalFormat:class'
    name: Excel.ColorScaleConditionalFormat
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomConditionalFormat:class'
    name: Excel.CustomConditionalFormat
  - uid: 'excel!Excel.DataBarConditionalFormat:class'
    name: Excel.DataBarConditionalFormat
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.IconSetConditionalFormat:class'
    name: Excel.IconSetConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: Excel.ConditionalFormat
  - uid: 'excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.ConditionalFormatLoadOptions
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat:class'
    name: Excel.PresetCriteriaConditionalFormat
  - uid: 'excel!Excel.Interfaces.ConditionalFormatUpdateData:interface'
    name: Interfaces.ConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.TextConditionalFormat:class'
    name: Excel.TextConditionalFormat
  - uid: 'excel!Excel.Interfaces.ConditionalFormatData:interface'
    name: Excel.Interfaces.ConditionalFormatData
  - uid: 'excel!Excel.TopBottomConditionalFormat:class'
    name: Excel.TopBottomConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat#type~0:complex'
    name: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    fullName: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormatType:enum'
        name: Excel.ConditionalFormatType
        fullName: Excel.ConditionalFormatType
      - name: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
        fullName: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'