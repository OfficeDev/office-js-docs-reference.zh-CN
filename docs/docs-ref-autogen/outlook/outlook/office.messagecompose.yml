### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.MessageCompose:interface'
    summary: |-
      [Office](xref:outlook!Office.Item:interface)的邮件撰写模式。<!-- -->.

      **重要说明**：这是一个内部 Outlook 对象，而不是直接通过现有接口公开。 应将此视为的模式`Office.context.mailbox.item`<!-- -->. 有关详细信息，请参阅[对象模型](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item)页。

      父接口：

      - [ItemCompose](xref:outlook!Office.ItemCompose:interface)

      - [邮件](xref:outlook!Office.Message:interface)
    name: Office.MessageCompose
    fullName: Office.MessageCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Message:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)'
      - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(2)'
      - 'outlook!Office.MessageCompose#addHandlerAsync:member(1)'
      - 'outlook!Office.MessageCompose#addHandlerAsync:member(2)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#bcc:member'
      - 'outlook!Office.MessageCompose#body:member'
      - 'outlook!Office.MessageCompose#categories:member'
      - 'outlook!Office.MessageCompose#cc:member'
      - 'outlook!Office.MessageCompose#close:member(1)'
      - 'outlook!Office.MessageCompose#conversationId:member'
      - 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(1)'
      - 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(2)'
      - 'outlook!Office.MessageCompose#from:member'
      - 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(1)'
      - 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(2)'
      - 'outlook!Office.MessageCompose#getAttachmentsAsync:member(1)'
      - 'outlook!Office.MessageCompose#getAttachmentsAsync:member(2)'
      - 'outlook!Office.MessageCompose#getComposeTypeAsync:member(1)'
      - 'outlook!Office.MessageCompose#getComposeTypeAsync:member(2)'
      - 'outlook!Office.MessageCompose#getInitializationContextAsync:member(1)'
      - 'outlook!Office.MessageCompose#getInitializationContextAsync:member(2)'
      - 'outlook!Office.MessageCompose#getItemIdAsync:member(1)'
      - 'outlook!Office.MessageCompose#getItemIdAsync:member(2)'
      - 'outlook!Office.MessageCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.MessageCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(1)'
      - 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(2)'
      - 'outlook!Office.MessageCompose#internetHeaders:member'
      - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(1)'
      - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(2)'
      - 'outlook!Office.MessageCompose#itemType:member'
      - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.MessageCompose#notificationMessages:member'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.MessageCompose#removeHandlerAsync:member(1)'
      - 'outlook!Office.MessageCompose#removeHandlerAsync:member(2)'
      - 'outlook!Office.MessageCompose#saveAsync:member(1)'
      - 'outlook!Office.MessageCompose#saveAsync:member(2)'
      - 'outlook!Office.MessageCompose#seriesId:member'
      - 'outlook!Office.MessageCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.MessageCompose#setSelectedDataAsync:member(2)'
      - 'outlook!Office.MessageCompose#subject:member'
      - 'outlook!Office.MessageCompose#to:member'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      将文件作为附件添加到邮件或约会。

      `addFileAttachmentAsync` 方法在指定的 URI 上载文件并将其附加到撰写窗体中的项目。

      随后可以将该标识符与 `removeAttachmentAsync` 方法一同使用，以删除同一个会话中的附件。

      **重要说明**：在 Windows 上的 Outlook 的最新内部版本中，引入了一个`Authorization: Bearer`错误，该错误会错误地将标头追加到此操作（无论是使用此 API 还是 Outlook UI）。 若要解决此问题，您可以尝试使用由`addFileAttachmentFromBase64`要求集1.8 引入的 API。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `AttachmentSizeExceeded`<!-- -->：附件大于允许的大小。

      - `FileTypeNotSupported`<!-- -->：附件的分机号码不允许。

      - `NumberOfAttachmentsExceeded`<!-- -->：邮件或约会的附件过多。

      #### <a name="examples"></a>示例

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
      ```javascript
      // The following example adds an image file as an inline attachment and
      // references the attachment in the message body.
      Office.context.mailbox.item.addFileAttachmentAsync(
          "http://i.imgur.com/WJXklif.png",
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
      ```javascript
      var attachmentUrl = $("#attachmentUrl").val();
      Office.context.mailbox.item.addFileAttachmentAsync(
          attachmentUrl,
          getFileName(attachmentUrl),
          { "asyncContext" : { var1: 1, var2: true } },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: 提供附加到邮件或约会的文件的位置的 URI。 最大长度为 2048 个字符。
          type:
            - string
        - id: attachmentName
          description: 在附件上载过程中显示的附件名称。 最大长度为 255 个字符。
          type:
            - string
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。 `isInline`<!-- -->：如果为 true，则表示附件将在邮件正文中以内联方式显示，并且不应显示在附件列表中。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，附件标识符将在 `asyncResult.value` 属性中提供。 如果上传附件失败，`asyncResult` 对象将包含一个提供错误说明的 `Error` 对象。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)'
    summary: |-
      将文件作为附件添加到邮件或约会。

      `addFileAttachmentAsync` 方法在指定的 URI 上载文件并将其附加到撰写窗体中的项目。

      随后可以将该标识符与 `removeAttachmentAsync` 方法一同使用，以删除同一个会话中的附件。

      **重要说明**：在 Windows 上的 Outlook 的最新内部版本中，引入了一个`Authorization: Bearer`错误，该错误会错误地将标头追加到此操作（无论是使用此 API 还是 Outlook UI）。 若要解决此问题，您可以尝试使用由`addFileAttachmentFromBase64`要求集1.8 引入的 API。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `AttachmentSizeExceeded`<!-- -->：附件大于允许的大小。

      - `FileTypeNotSupported`<!-- -->：附件的分机号码不允许。

      - `NumberOfAttachmentsExceeded`<!-- -->：邮件或约会的附件过多。
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: 提供附加到邮件或约会的文件的位置的 URI。 最大长度为 2048 个字符。
          type:
            - string
        - id: attachmentName
          description: 在附件上载过程中显示的附件名称。 最大长度为 255 个字符。
          type:
            - string
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在 callback 参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，附件标识符将在 `asyncResult.value` 属性中提供。 如果上传附件失败，`asyncResult` 对象将包含一个提供错误说明的 `Error` 对象。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)'
    summary: |-
      将文件作为附件添加到邮件或约会。

      该`addFileAttachmentFromBase64Async`方法从 base64 编码中上载文件，并将其附加到撰写窗体中的项目。 此方法返回`asyncResult.value`对象中的附件标识符。

      随后可以将该标识符与 `removeAttachmentAsync` 方法一同使用，以删除同一个会话中的附件。

      **注意**：如果使用的是数据 URL API （例如，`readAsDataURL`<!-- -->），您需要先去掉数据 URL 前缀，然后再将字符串的其余部分发送到此 API。 例如，如果完整的字符串由`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->，请删除`data:image/svg+xml;base64,`<!-- -->.

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `AttachmentSizeExceeded`<!-- -->：附件大于允许的大小。

      - `FileTypeNotSupported`<!-- -->：附件的分机号码不允许。

      - `NumberOfAttachmentsExceeded`<!-- -->：邮件或约会的附件过多。

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
          base64String,
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                      // Do something here.
                  });
          });
      ```
      ```javascript
      base64String = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
          base64String,
          "logo.png",
          { isInline: false },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: 要添加到电子邮件或事件的图像或文件的 base64 编码内容。
          type:
            - string
        - id: attachmentName
          description: 在附件上载过程中显示的附件名称。 最大长度为 255 个字符。
          type:
            - string
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。 `isInline`<!-- -->：如果为 true，则表示附件将在邮件正文中以内联方式显示，并且不应显示在附件列表中。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~0:complex'
        - id: callback
          description: 可选。 方法完成后，使用类型为 AsyncResult 的单个`callback`参数调用在参数中传递的函数。 如果成功，附件标识符将在 `asyncResult.value` 属性中提供。 如果上传附件失败，`asyncResult` 对象将包含一个提供错误说明的 `Error` 对象。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~1:complex'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(2)'
    summary: |-
      将文件作为附件添加到邮件或约会。

      该`addFileAttachmentFromBase64Async`方法从 base64 编码中上载文件，并将其附加到撰写窗体中的项目。 此方法返回`asyncResult.value`对象中的附件标识符。

      随后可以将该标识符与 `removeAttachmentAsync` 方法一同使用，以删除同一个会话中的附件。

      **注意**：如果使用的是数据 URL API （例如，`readAsDataURL`<!-- -->），您需要先去掉数据 URL 前缀，然后再将字符串的其余部分发送到此 API。 例如，如果完整的字符串由`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->，请删除`data:image/svg+xml;base64,`<!-- -->.

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `AttachmentSizeExceeded`<!-- -->：附件大于允许的大小。

      - `FileTypeNotSupported`<!-- -->：附件的分机号码不允许。

      - `NumberOfAttachmentsExceeded`<!-- -->：邮件或约会的附件过多。
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: 要添加到电子邮件或事件的图像或文件的 base64 编码内容。
          type:
            - string
        - id: attachmentName
          description: 在附件上载过程中显示的附件名称。 最大长度为 255 个字符。
          type:
            - string
        - id: callback
          description: 可选。 方法完成后，使用类型为 AsyncResult 的单个`callback`参数调用在参数中传递的函数。 如果成功，附件标识符将在 `asyncResult.value` 属性中提供。 如果上传附件失败，`asyncResult` 对象将包含一个提供错误说明的 `Error` 对象。
          type:
            - 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~2:complex'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync:member(1)'
    summary: |-
      添加支持事件的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应调用处理程序的事件。
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~0:complex'
        - id: handler
          description: 用于处理事件的函数。 此函数必须接受一个参数，即对象文本。 参数的 type 属性将与传递给的`eventType`参数相匹配`addHandlerAsync`<!-- -->.
          type:
            - any
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在`callback`参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync:member(2)'
    summary: |-
      添加支持事件的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应调用处理程序的事件。
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~2:complex'
        - id: handler
          description: 用于处理事件的函数。 此函数必须接受一个参数，即对象文本。 参数的 type 属性将与传递给的`eventType`参数相匹配`addHandlerAsync`<!-- -->.
          type:
            - any
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在`callback`参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。
          type:
            - 'outlook!Office.MessageCompose#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      将 Exchange 项目（如邮件）作为附件添加到邮件或约会。

      `addItemAttachmentAsync` 方法将包含指定 Exchange 标识符的项目附加到撰写窗体中的项目。 如果指定了回调方法，则使用一个参数调用方法，`asyncResult`<!-- -->，其中包含附件标识符或指示附加项目时出现的任何错误的代码。 如果需要，可以使用 options 参数将状态信息传递给回调方法。

      随后可以将该标识符与 `removeAttachmentAsync` 方法一同使用，以删除同一个会话中的附件。

      如果 Office 加载项是在 Outlook 网页版中运行，`addItemAttachmentAsync` 方法可以将项附加到除正在编辑的项外的项；但既不支持也不建议这样做。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `NumberOfAttachmentsExceeded`<!-- -->：邮件或约会的附件过多。

      #### <a name="examples"></a>示例

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
      ```javascript
      var attachmentItemId = $("#attachmentItemId").val();
      Office.context.mailbox.item.addItemAttachmentAsync(
          attachmentItemId,
          "My attachment",
          { "asyncContext" : { var3: 3, var4: false } },
          function(result) { console.log(result); });
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 要附加的项目的 Exchange 标识符。 最大长度为 100 个字符。
          type:
            - any
        - id: attachmentName
          description: 在附件上载过程中显示的附件名称。 最大长度为 255 个字符。
          type:
            - string
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，附件标识符将在 `asyncResult.value` 属性中提供。 如果添加附件失败，`asyncResult` 对象将包含一个提供错误说明的 `Error` 对象。
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)'
    summary: |-
      将 Exchange 项目（如邮件）作为附件添加到邮件或约会。

      `addItemAttachmentAsync` 方法将包含指定 Exchange 标识符的项目附加到撰写窗体中的项目。 如果指定了回调方法，则使用一个参数调用方法，`asyncResult`<!-- -->，其中包含附件标识符或指示附加项目时出现的任何错误的代码。 如果需要，可以使用 options 参数将状态信息传递给回调方法。

      随后可以将该标识符与 `removeAttachmentAsync` 方法一同使用，以删除同一个会话中的附件。

      如果 Office 加载项是在 Outlook 网页版中运行，`addItemAttachmentAsync` 方法可以将项附加到除正在编辑的项外的项；但既不支持也不建议这样做。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `NumberOfAttachmentsExceeded`<!-- -->：邮件或约会的附件过多。
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 要附加的项目的 Exchange 标识符。 最大长度为 100 个字符。
          type:
            - any
        - id: attachmentName
          description: 在附件上载过程中显示的附件名称。 最大长度为 255 个字符。
          type:
            - string
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，附件标识符将在 `asyncResult.value` 属性中提供。 如果添加附件失败，`asyncResult` 对象将包含一个提供错误说明的 `Error` 对象。
          type:
            - 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#bcc:member'
    summary: |-
      获取对象，该对象提供用于获取或更新邮件的密件抄送 (Bcc) 行上的收件人的方法。

      默认情况下，集合上限为 100 个成员。 但是，在 Windows 和 Mac 上，以下限制适用。

      - 最多包含 500 个成员。

      - 为每个呼叫最多设置 100 个成员，总共多达 500 个成员。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.bcc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfBccRecipients = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgBcc = asyncResult.value;
          console.log("Message being bcc'd to:");
          for (var i = 0; i < msgBcc.length; i++) {
            console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: bcc
    fullName: bcc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bcc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#body:member'
    summary: |-
      获取一个提供用于处理项目正文的方法的对象。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.MessageCompose#categories:member'
    summary: |-
      获取一个对象，该对象提供用于管理项的类别的方法。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.categories.getAsync(function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              console.log("Categories: " + JSON.stringify(asyncResult.value));
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories) {
            console.log(categories);
          } else {
            console.log("There are no categories.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: categories
    fullName: categories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'categories: Categories;'
      return:
        type:
          - 'outlook!Office.Categories:interface'
  - uid: 'outlook!Office.MessageCompose#cc:member'
    summary: |-
      提供对邮件的抄送 (Cc) 收件人的访问权限。 对象的类型和访问级别取决于当前项目的模式。

      该`cc`属性返回一个[收件人](xref:outlook!Office.Recipients:interface)对象，该对象提供用于获取或更新邮件的 "抄送" 行上的收件人的方法。 默认情况下，集合上限为 100 个成员。 但是，在 Windows 和 Mac 上，以下限制适用。

      - 最多包含 500 个成员。

      - 为每个呼叫最多设置 100 个成员，总共多达 500 个成员。
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.cc.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfCcRecipients = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgCc = asyncResult.value;
          console.log("Message being copied to:");
          for (var i = 0; i < msgCc.length; i++) {
            console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: cc
    fullName: cc
    langs:
      - typeScript
    type: property
    syntax:
      content: 'cc: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.MessageCompose#close:member(1)'
    summary: |-
      关闭正在撰写的当前项目

      Close 方法的行为取决于正在撰写的项目的当前状态。 如果项目具有未保存的更改，则客户端将提示用户保存、放弃或关闭该操作。

      在 Outlook 桌面客户端中，如果邮件是内嵌答复，则 close 方法将不起作用。

      **注意**：在 web 上的 Outlook 中，如果该项目是一个约会，并且以前使用它进行了保存`saveAsync`<!-- -->，即使自上次保存项目后未发生更改，也会提示用户保存、放弃或取消。

      \[[API 集：邮箱 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`Restricted`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.close();
      ```
    name: close()
    fullName: close()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'outlook!Office.MessageCompose#conversationId:member'
    summary: |-
      获取包含特定消息的电子邮件会话的标识符。

      如果在阅读窗体或撰写窗体的回复中激活邮件应用程序，则此属性可以获得一个整数值。如果用户随后更改了回复邮件的主题（若发送回复），则该邮件的对话 ID 将改变且之前获取的值将不适用。

      对于撰写窗体的新项目，此属性获得一个 null 值。如果用户设置一个主题并保存该项目，`conversationId` 属性将返回一个值。
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      var conversationId = Office.context.mailbox.item.conversationId;
      console.log("conversationId: " + conversationId);
      ```
    name: conversationId
    fullName: conversationId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'conversationId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(1)'
    summary: |-
      禁用 Outlook 客户端签名。

      对于 Windows 和 Mac 富客户端，此 API 会将发送帐户的 "新建邮件" 和 "答复/转发" 部分的签名设置为 "（无）"，从而有效地禁用该签名。 对于 web 上的 Outlook，API 应禁用新邮件、答复和转发的签名选项。 如果选择了签名，此 API 调用应禁用它。

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)<!-- -->**：邮件撰写
    isPreview: true
    name: 'disableClientSignatureAsync(options, callback)'
    fullName: 'disableClientSignatureAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disableClientSignatureAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在 callback 参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。
          type:
            - 'outlook!Office.MessageCompose#disableClientSignatureAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync:member(2)'
    summary: |-
      禁用 Outlook 客户端签名。

      对于 Windows 和 Mac 富客户端，此 API 会将发送帐户的 "新建邮件" 和 "答复/转发" 部分的签名设置为 "（无）"，从而有效地禁用该签名。 对于 web 上的 Outlook，API 应禁用新邮件、答复和转发的签名选项。 如果选择了签名，此 API 调用应禁用它。

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // Disable the client signature.
      Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("disableClientSignatureAsync succeeded");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: disableClientSignatureAsync(callback)
    fullName: disableClientSignatureAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disableClientSignatureAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在 callback 参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。
          type:
            - 'outlook!Office.MessageCompose#disableClientSignatureAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#from:member'
    summary: |-
      获取邮件发件人的电子邮件地址。

      `from` 和 `sender` 属性表示同一个人，邮件由代理人发送的除外。 在这种情况下`from` ，该属性表示所有者， `sender`属性表示委托。

      `from`属性返回一个`From`对象，该对象提供用于获取 "起始" 值的方法。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.from.getAsync(callback);

      function callback(asyncResult) {
          var from = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.from.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgFrom = asyncResult.value;
          console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: from
    fullName: from
    langs:
      - typeScript
    type: property
    syntax:
      content: 'from: From;'
      return:
        type:
          - 'outlook!Office.From:interface'
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(1)'
    summary: |-
      从邮件或约会中获取附件并将其作为`AttachmentContent`对象返回。

      该`getAttachmentContentAsync`方法从项目中获取具有指定标识符的附件。 作为最佳实践，应使用标识符在与`getAttachmentsAsync` or `item.attachments`调用一起检索附件 id 的同一会话中检索附件。 在 Outlook 网页版和移动设备上，附件标识符只在同一个会话中才有效。 当用户关闭应用程序时，或者如果用户开始撰写内嵌窗体，随后弹出窗体以继续在单独的窗口中。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `AttachmentTypeNotSupported`<!-- -->：不支持该附件类型。 不受支持的类型包括 Rtf 格式的嵌入图像或电子邮件或日历项目（如联系人或任务项）以外的项附件类型。

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。

      #### <a name="examples"></a>示例

      ```javascript
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, options, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 要获取的附件的标识符。
          type:
            - string
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在`callback`参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。 如果调用失败，该`asyncResult.error`属性将包含错误代码和失败原因。
          type:
            - 'outlook!Office.MessageCompose#getAttachmentContentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync:member(2)'
    summary: |-
      从邮件或约会中获取附件并将其作为`AttachmentContent`对象返回。

      该`getAttachmentContentAsync`方法从项目中获取具有指定标识符的附件。 作为最佳实践，应使用标识符在与`getAttachmentsAsync` or `item.attachments`调用一起检索附件 id 的同一会话中检索附件。 在 Outlook 网页版和移动设备上，附件标识符只在同一个会话中才有效。 当用户关闭应用程序时，或者如果用户开始撰写内嵌窗体，随后弹出窗体以继续在单独的窗口中。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `AttachmentTypeNotSupported`<!-- -->：不支持该附件类型。 不受支持的类型包括 Rtf 格式的嵌入图像或电子邮件或日历项目（如联系人或任务项）以外的项附件类型。

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。

      #### <a name="examples"></a>示例

      ```javascript
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  console.log(result.value.content);
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  console.log("Attachment is a message.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  console.log("Attachment is a calendar item.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  console.log("Attachment is a cloud attachment.");
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 要获取的附件的标识符。
          type:
            - string
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在`callback`参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。 如果调用失败，该`asyncResult.error`属性将包含错误代码和失败原因。
          type:
            - 'outlook!Office.MessageCompose#getAttachmentContentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync:member(1)'
    summary: |-
      以数组的形式获取项目的附件。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写
    name: 'getAttachmentsAsync(options, callback)'
    fullName: 'getAttachmentsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果调用失败，该`asyncResult.error`属性将包含错误代码和失败原因。
          type:
            - 'outlook!Office.MessageCompose#getAttachmentsAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync:member(2)'
    summary: |-
      以数组的形式获取项目的附件。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      var item = Office.context.mailbox.item;
      var outputString = "";
      item.getAttachmentsAsync(callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  var attachment = result.value [i];
                  outputString += "<BR>" + i + ". Name: ";
                  outputString += attachment.name;
                  outputString += "<BR>ID: " + attachment.id;
                  outputString += "<BR>contentType: " + attachment.contentType;
                  outputString += "<BR>size: " + attachment.size;
                  outputString += "<BR>attachmentType: " + attachment.attachmentType;
                  outputString += "<BR>isInline: " + attachment.isInline;
              }
          }
      }
      ```
      ```javascript
      Office.context.mailbox.item.getAttachmentsAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(result.error.message);
          } else {
              if (result.value.length > 0) {
                  for (var i = 0; i < result.value.length; i++) {
                      var attachment = result.value[i];
                      console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                  }
              }
              else {
                  console.log("No attachments on this message.");
              }
          }
      });
      ```
    name: getAttachmentsAsync(callback)
    fullName: getAttachmentsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在 callback 参数中传递的函数`Office.AsyncResult`<!-- -->. 如果调用失败，该`asyncResult.error`属性将包含错误代码和失败原因。
          type:
            - 'outlook!Office.MessageCompose#getAttachmentsAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync:member(1)'
    summary: |-
      指定邮件撰写的类型及其强制类型。 邮件可以是新邮件，也可以是答复或转发邮件。 强制类型可以是 HTML 格式，也可以是纯文本。

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)<!-- -->**：邮件撰写
    isPreview: true
    name: 'getComposeTypeAsync(options, callback)'
    fullName: 'getComposeTypeAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComposeTypeAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 一个对象， `ComposeType`包含`CoercionType`和枚举该邮件项目的枚举值。
      parameters:
        - id: options
          description: 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，该`asyncResult.value`属性将包含具有项目的撰写类型和强制类型的对象。
          type:
            - 'outlook!Office.MessageCompose#getComposeTypeAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync:member(2)'
    summary: |-
      指定邮件撰写的类型及其强制类型。 邮件可以是新邮件，也可以是答复或转发邮件。 强制类型可以是 HTML 格式，也可以是纯文本。

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // Get the compose type of the current item (mail only).
      Office.context.mailbox.item.getComposeTypeAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log(
            "getComposeTypeAsync succeeded with composeType: " +
              asyncResult.value.composeType +
              " and coercionType: " +
              asyncResult.value.coercionType
          );
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: getComposeTypeAsync(callback)
    fullName: getComposeTypeAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComposeTypeAsync(callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 一个对象， `ComposeType`包含`CoercionType`和枚举该邮件项目的枚举值。
      parameters:
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，该`asyncResult.value`属性将包含具有项目的撰写类型和强制类型的对象。
          type:
            - 'outlook!Office.MessageCompose#getComposeTypeAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync:member(1)'
    summary: |-
      获取通过可操作邮件激活加载项时传递的初始化数据。

      **注意**：仅 outlook 2016 或更高版本（大于16.0.8413.1000 的即点即用版本）和适用于 Office 365 的 outlook 网页版支持此方法。

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      有关可[操作邮件](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)的详细信息<!-- -->.
    isPreview: true
    name: 'getInitializationContextAsync(options, callback)'
    fullName: 'getInitializationContextAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，初始化数据在`asyncResult.value`属性中提供为字符串。 如果没有初始化上下文， `asyncResult`该对象将包含其`Error` `code`属性设置为9020的对象，并将其`name`属性设置为`GenericResponseError`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#getInitializationContextAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync:member(2)'
    summary: |-
      获取通过可操作邮件激活加载项时传递的初始化数据。

      **注意**：仅 outlook 2016 或更高版本（大于16.0.8413.1000 的即点即用版本）和适用于 Office 365 的 outlook 网页版支持此方法。

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      有关可[操作邮件](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)的详细信息<!-- -->.

      #### <a name="examples"></a>示例

      ```javascript
      // Get the initialization context (if present).
      Office.context.mailbox.item.getInitializationContextAsync(
          function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                  if (asyncResult.value != null && asyncResult.value.length > 0) {
                      // The value is a string, parse to an object.
                      var context = JSON.parse(asyncResult.value);
                      // Do something with context.
                  } else {
                      // Empty context, treat as no context.
                  }
              } else {
                  if (asyncResult.error.code == 9020) {
                      // GenericResponseError returned when there is no context.
                      // Treat as no context.
                  } else {
                      // Handle the error.
                  }
              }
          }
      );
      ```
    isPreview: true
    name: getInitializationContextAsync(callback)
    fullName: getInitializationContextAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInitializationContextAsync(callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果成功，初始化数据在`asyncResult.value`属性中提供为字符串。 如果没有初始化上下文， `asyncResult`该对象将包含其`Error` `code`属性设置为9020的对象，并将其`name`属性设置为`GenericResponseError`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#getInitializationContextAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync:member(1)'
    summary: |-
      异步获取已保存项的 ID。

      调用此方法时，此方法通过回调方法返回项 ID。

      **注意**：如果你的外接程序`getItemIdAsync`对撰写模式中的项（例如，获取`itemId`与 EWS 或 REST API 一起使用）调用，请注意，当 Outlook 处于缓存模式下时，可能需要一段时间才能将项目同步到服务器。 在同步项目之前，无法识别`itemId`该项目并使用它将返回错误。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `ItemNotSaved`<!-- -->：在保存项目之前无法检索该 id。
    name: 'getItemIdAsync(options, callback)'
    fullName: 'getItemIdAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#getItemIdAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync:member(2)'
    summary: |-
      异步获取已保存项的 ID。

      调用此方法时，此方法通过回调方法返回项 ID。

      **注意**：如果你的外接程序`getItemIdAsync`对撰写模式中的项（例如，获取`itemId`与 EWS 或 REST API 一起使用）调用，请注意，当 Outlook 处于缓存模式下时，可能需要一段时间才能将项目同步到服务器。 在同步项目之前，无法识别`itemId`该项目并使用它将返回错误。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `ItemNotSaved`<!-- -->：在保存项目之前无法检索该 id。

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.getItemIdAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`getItemIdAsync failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: getItemIdAsync(callback)
    fullName: getItemIdAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#getItemIdAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync:member(1)'
    summary: |-
      以异步方式返回邮件的主题或正文中选定的数据。

      如果没有选定内容，但光标位于正文或主题中，此方法将会为所选数据返回空字符串。如果选定的是字段，而不是正文或主题，则此方法返回 `InvalidSelection` 错误。

      若要从回调方法访问所选数据，请调用`asyncResult.value.data`<!-- -->. 若要访问所选内容来自的源属性，请调用`asyncResult.value.sourceProperty`<!-- -->，这将是`body`或`subject`<!-- -->.

      \[[API 集：邮箱 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // Get selected data.
      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };

      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          console.log("Selected text in " + prop + ": " + text);
      }
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 作为字符串的选定数据，其格式由`coercionType`<!-- -->.
      parameters:
        - id: coercionType
          description: 请求数据的格式。 即使`Text`<!-- -->，该方法以字符串的形式返回纯文本，同时删除所有 HTML 标记。 即使`Html`<!-- -->，则该方法将返回选定的文本，无论是纯文本还是 HTML。
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync:member(2)'
    summary: |-
      以异步方式返回邮件的主题或正文中选定的数据。

      如果没有选定内容，但光标位于正文或主题中，此方法将会为所选数据返回空字符串。如果选定的是字段，而不是正文或主题，则此方法返回 `InvalidSelection` 错误。

      若要从回调方法访问所选数据，请调用`asyncResult.value.data`<!-- -->. 若要访问所选内容来自的源属性，请调用`asyncResult.value.sourceProperty`<!-- -->，这将是`body`或`subject`<!-- -->.

      \[[API 集：邮箱 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;
          console.log("Selected text in " + prop + ": " + text);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: 作为字符串的选定数据，其格式由`coercionType`<!-- -->.
      parameters:
        - id: coercionType
          description: 请求数据的格式。 即使`Text`<!-- -->，该方法以字符串的形式返回纯文本，同时删除所有 HTML 标记。 即使`Html`<!-- -->，则该方法将返回选定的文本，无论是纯文本还是 HTML。
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(1)'
    summary: |-
      获取共享文件夹、日历或邮箱中的约会或邮件的属性。

      **注意**： Mac、IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
        if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
          Office.context.mailbox.item.getSharedPropertiesAsync(
            {
              // Pass auth token along.
              asyncContext: result.value
            },
            function(result2) {
              let sharedProperties = result2.value;
              let delegatePermissions = sharedProperties.delegatePermissions;

              // Determine if user can do the expected operation, e.g., do they have Write permission?
              if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
                var ewsId = Office.context.mailbox.item.itemId;
                var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
                let rest_url =
                  sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

                $.ajax({
                  url: rest_url,
                  dataType: "json",
                  headers: { Authorization: "Bearer " + result2.asyncContext }
                })
                  .done(function(response) {
                    console.log(response);
                  })
                  .fail(function(error) {
                    console.error(error);
                  });
              }
            }
          );
        }
      });
      ```
    name: 'getSharedPropertiesAsync(options, callback)'
    fullName: 'getSharedPropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 结果`value`的属性是共享项的属性。
          type:
            - 'outlook!Office.MessageCompose#getSharedPropertiesAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync:member(2)'
    summary: |-
      获取共享文件夹、日历或邮箱中的约会或邮件的属性。

      **注意**： Mac、IOS 或 Android 上的 Outlook 中不支持此方法。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.getSharedPropertiesAsync(callback);

      function callback (asyncResult) {
          var context = asyncResult.context;
          var sharedProperties = asyncResult.value;
      }
      ```
      ```javascript
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
        console.log(result.value);
      });
      ```
    name: getSharedPropertiesAsync(callback)
    fullName: getSharedPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 结果`value`的属性是共享项的属性。
          type:
            - 'outlook!Office.MessageCompose#getSharedPropertiesAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#internetHeaders:member'
    summary: |-
      获取或设置邮件的自定义 internet 邮件头。

      `internetHeaders`属性返回一个`InternetHeaders`对象，该对象提供用于管理邮件上的 internet 标头的方法。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.internetHeaders.getAsync(["header1", "header2"], callback);

      function callback(asyncResult) {
          var dictionary = asyncResult.value;
          var header1_value = dictionary["header1"];
      }
      ```
    name: internetHeaders
    fullName: internetHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'internetHeaders: InternetHeaders;'
      return:
        type:
          - 'outlook!Office.InternetHeaders:interface'
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(1)'
    summary: |-
      获取客户端签名是否已启用。

      对于 Windows 和 Mac 富客户端，如果新邮件、 `true`答复或转发的默认签名设置为发送 Outlook 帐户的模板，则 API 调用应返回。 对于 web 上的 Outlook，如果为撰写类型启用`true`了签名，API 调用应返回`newMail`<!-- -->, `reply`<!-- -->，或者`forward`<!-- -->. 如果 Mac 或 Windows 富客户端中的设置设置为 "（无）" 或在 Web 上的 Outlook 中禁用，API 调用应返回`false`<!-- -->.

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)<!-- -->**：邮件撰写
    isPreview: true
    name: 'isClientSignatureEnabledAsync(options, callback)'
    fullName: 'isClientSignatureEnabledAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isClientSignatureEnabledAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<boolean>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync:member(2)'
    summary: |-
      获取客户端签名是否已启用。

      对于 Windows 和 Mac 富客户端，如果新邮件、 `true`答复或转发的默认签名设置为发送 Outlook 帐户的模板，则 API 调用应返回。 对于 web 上的 Outlook，如果为撰写类型启用`true`了签名，API 调用应返回`newMail`<!-- -->, `reply`<!-- -->，或者`forward`<!-- -->. 如果 Mac 或 Windows 富客户端中的设置设置为 "（无）" 或在 Web 上的 Outlook 中禁用，API 调用应返回`false`<!-- -->.

      \[[API 集：邮箱预览](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // Check if the client signature is currently enabled.
      Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    isPreview: true
    name: isClientSignatureEnabledAsync(callback)
    fullName: isClientSignatureEnabledAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isClientSignatureEnabledAsync(callback: (asyncResult: Office.AsyncResult<boolean>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#itemType:member'
    summary: |-
      获取实例表示的项的类型。

      该`itemType`属性返回一个`ItemType`枚举值，指示 item 对象实例是邮件还是约会。
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.MessageCompose#itemType~0:complex'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      异步加载所选项目上此外接程序的自定义属性。

      自定义属性基于每个应用、每个项目存储为键/值对。此方法在回调中返回 `CustomProperties` 对象，该回调提供访问特定于当前项目和当前外接程序的自定义属性的方法。自定义属性未在项目上加密，因此这不应用作安全存储。

      自定义属性作为 `asyncResult.value` 属性中的 `CustomProperties` 对象提供。 此对象可用于获取、设置以及从项目中删除自定义属性，并将自定义属性集的更改重新保存到服务器。
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 可选。 开发人员可以提供他们想要在回调函数中访问的任何对象。 此对象可以通过回调函数中的 `asyncResult.asyncContext` 属性进行访问。
          type:
            - any
  - uid: 'outlook!Office.MessageCompose#notificationMessages:member'
    summary: |-
      获取项目的通知邮件。

      \[[API 集：邮箱 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      // Get all notifications.
      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
      ```
      ```javascript
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```
      ```javascript
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(1)'
    summary: |-
      将附件从邮件或约会中删除。

      `removeAttachmentAsync` 方法删除项目中带指定标识符的附件。 最佳做法是，仅当同一个邮件应用程序在同一会话中添加了一个附件时，你才应使用该附件标识符来删除该附件。 在 Outlook 网页版和移动设备上，附件标识符只在同一个会话中才有效。 当用户关闭应用程序时，或者如果用户开始撰写内嵌窗体，随后弹出窗体以继续在单独的窗口中。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。

      #### <a name="examples"></a>示例

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
      ```javascript
      Office.context.mailbox.item.removeAttachmentAsync(
          $("#attachmentId").val(),
          { asyncContext : null },
          function(result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded) {
                  console.error(`${result.error.message}`);
              } else {
                  console.log(`Attachment removed successfully.`);
              }
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 要删除的附件的标识符。
          type:
            - string
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果删除附件失败，`asyncResult.error` 属性将包含一个说明失败原因的错误代码。
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync:member(2)'
    summary: |-
      将附件从邮件或约会中删除。

      `removeAttachmentAsync` 方法删除项目中带指定标识符的附件。 最佳做法是，仅当同一个邮件应用程序在同一会话中添加了一个附件时，你才应使用该附件标识符来删除该附件。 在 Outlook 网页版和移动设备上，附件标识符只在同一个会话中才有效。 当用户关闭应用程序时，或者如果用户开始撰写内嵌窗体，随后弹出窗体以继续在单独的窗口中。

      \[[API 集：邮箱 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: 要删除的附件的标识符。
          type:
            - string
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->. 如果删除附件失败，`asyncResult.error` 属性将包含一个说明失败原因的错误代码。
          type:
            - 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync:member(1)'
    summary: |-
      删除受支持事件类型的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应撤销处理程序的事件。
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~0:complex'
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在`callback`参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync:member(2)'
    summary: |-
      删除受支持事件类型的事件处理程序。 **注意**：事件仅在任务窗格中可用。

      若要查看受支持的事件类型， `Office.EventType`请参阅了解详细信息。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 应撤销处理程序的事件。
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~2:complex'
        - id: callback
          description: 可选。 方法完成后，使用单个参数调用在`callback`参数中传递的函数。`asyncResult`<!-- -->，它是一个`Office.AsyncResult`对象。
          type:
            - 'outlook!Office.MessageCompose#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.MessageCompose#saveAsync:member(1)'
    summary: |-
      异步保存项目。

      调用此方法时，此方法将当前邮件保存为草稿，并通过回调方法返回项目 ID。 在 Outlook 网页版或 Outlook 联机模式下，该项目被保存到服务器中。 在 Outlook 缓存模式下，该项目被保存到本地缓存中。

      由于约会没有草稿状态，如果以撰写模式在约会中调用 `saveAsync`，则该项将被保存为用户日历中的正常约会。对于之前未保存过的新约会，则不会发送邀请。保存现有约会将向添加或删除的与会者发送更新。

      **注意**：如果外接程序对撰写`saveAsync`模式中的项目调用，以便获取要用于 EWS 或 REST API 的项目 ID，请注意，当 Outlook 处于缓存模式下时，可能需要一段时间才能将项目实际同步到服务器。 在同步项目之前，使用 itemId 将返回错误。

      \[[API 集：邮箱 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#saveAsync~0:complex'
  - uid: 'outlook!Office.MessageCompose#saveAsync:member(2)'
    summary: |-
      异步保存项目。

      调用时，此方法将当前邮件保存为草稿，并通过回调方法返回项目 ID。 在 Outlook 网页版或 Outlook 联机模式下，该项目被保存到服务器中。 在 Outlook 缓存模式下，该项目被保存到本地缓存中。

      由于约会没有草稿状态，如果以撰写模式在约会中调用 `saveAsync`，则该项将被保存为用户日历中的正常约会。对于之前未保存过的新约会，则不会发送邀请。保存现有约会将向添加或删除的与会者发送更新。

      **注意**：如果外接程序对撰写`saveAsync`模式中的项目调用，以便获取要用于 EWS 或 REST API 的项目 ID，请注意，当 Outlook 处于缓存模式下时，可能需要一段时间才能将项目实际同步到服务器。 在项目同步前，使用 `itemId` 将返回一个错误。

      \[[API 集：邮箱 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.saveAsync(
          function callback(result) {
              // Process the result.
          });

      // The following is an example of the
      // `result` parameter passed to the
      // callback function. The `value`
      // property contains the item ID of
      // the item.
      {
          "value": "AAMkADI5...AAA=",
          "status": "succeeded"
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#saveAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#seriesId:member'
    summary: |-
      获取实例所属的系列的 ID。

      在 web 上的 Outlook 和桌面客户端中`seriesId` ，返回此项所属的父（系列）项的 Exchange web 服务（EWS） ID。 但是，在 iOS 和 Android 上，Webcasts&seriesid 返回父项的 REST ID。

      **注意**： `seriesId`属性返回的标识符与 Exchange Web 服务项目标识符相同。 `seriesId`属性与 OUTLOOK REST API 使用的 outlook id 不相同。 使用此值进行 REST API 调用之前，应使用此值进行转换`Office.context.mailbox.convertToRestId`<!-- -->. 有关更多详细信息，请参阅[使用 outlook 外接程序中的 OUTLOOK REST api](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.

      对于`seriesId`不包含`null`父项（如单个约会、系列项或会议请求）的项，该属性将返回， `undefined`对于不是会议请求的任何其他项，该属性返回。

      \[[API 集：邮箱 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      // The seriesId property returns null for items that do
      // not have parent items (such as single appointments,
      // series items, or meeting requests) and returns
      // undefined for messages that are not meeting requests.
      var isSeriesInstance = (seriesId != null);
      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync:member(1)'
    summary: |-
      以异步方式将数据插入到邮件的正文或主题中。

      `setSelectedDataAsync` 方法将指定字符串插入到项目主题或正文的光标位置，或者，如果在编辑器中已选择文本，则该方法将替换选择的文本。如果光标不在正文或主题字段中，则返回错误。插入之后，光标会位于插入内容的末尾。

      \[[API 集：邮箱 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: '要插入的数据。数据不得超过 1,000,000 个字符。如果传入的数据超过 1,000,000 个字符，则会引发 `ArgumentOutOfRange` 异常。'
          type:
            - string
        - id: options
          description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供希望访问的任何对象。 `coercionType`<!-- -->：如果是文本，则当前样式应用于 web 上的 Outlook 和桌面客户端。 如果字段是 HTML 编辑器，只会插入文本数据，即使数据为 HTML，也不例外。 如果 html 和字段支持 HTML （主题不），则当前样式应用于 web 上的 Outlook，并且默认样式应用于桌面客户端上的 Outlook 中。 如果该字段是文本字段，则返回 `InvalidDataFormat` 错误。 如果未设置 `coercionType`，则结果取决于该字段：如果该字段是 HTML，则使用 HTML；如果该字段是文本，则使用纯文本。
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync:member(2)'
    summary: |-
      以异步方式将数据插入到邮件的正文或主题中。

      `setSelectedDataAsync` 方法将指定字符串插入到项目主题或正文的光标位置，或者，如果在编辑器中已选择文本，则该方法将替换选择的文本。如果光标不在正文或主题字段中，则返回错误。插入之后，光标会位于插入内容的末尾。

      \[[API 集：邮箱 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadWriteItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      **错误**：

      - `InvalidAttachmentId`<!-- -->：附件标识符不存在。

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
      ```
      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected text has been updated successfully.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: '要插入的数据。数据不得超过 1,000,000 个字符。如果传入的数据超过 1,000,000 个字符，则会引发 `ArgumentOutOfRange` 异常。'
          type:
            - string
        - id: callback
          description: 可选。 方法完成后，使用单个参数类型调用在`callback`参数中传递的函数`Office.AsyncResult`<!-- -->.
          type:
            - 'outlook!Office.MessageCompose#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.MessageCompose#subject:member'
    summary: |-
      获取或设置显示在项目的主题字段中的说明。

      `subject` 属性获取或设置由电子邮件服务器发送项目时的整个主题。

      `subject` 属性返回一个 `Subject` 对象，该对象提供用于获取和设置主题的方法。
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.subject.getAsync(callback);

      function callback(asyncResult) {
          var subject = asyncResult.value;
      }
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
  - uid: 'outlook!Office.MessageCompose#to:member'
    summary: |-
      提供对邮件的“收件人”行上的收件人的访问权限。 对象的类型和访问级别取决于当前项目的模式。

      `to` 属性返回一个 `Recipients` 对象，该对象提供用于获取或更新邮件的“收件人”行上收件人的方法。 默认情况下，集合上限为 100 个成员。 但是，在 Windows 和 Mac 上，以下限制适用。

      - 最多包含 500 个成员。

      - 为每个呼叫最多设置 100 个成员，总共多达 500 个成员。
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：邮件撰写

      #### <a name="examples"></a>示例

      ```javascript
      Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.to.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfToRecipients = asyncResult.value;
      }
      ```
      ```javascript
      Office.context.mailbox.item.to.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgTo = asyncResult.value;
          console.log("Message being sent to:");
          for (var i = 0; i < msgTo.length; i++) {
            console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: to
    fullName: to
    langs:
      - typeScript
    type: property
    syntax:
      content: 'to: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
references:
  - uid: 'outlook!Office.Message:interface'
    name: Message
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addFileAttachmentFromBase64Async~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Categories:interface'
    name: Categories
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#disableClientSignatureAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.From:interface'
    name: From
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#getAttachmentContentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.MessageCompose#getAttachmentsAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getComposeTypeAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getInitializationContextAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getItemIdAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.MessageCompose#getSharedPropertiesAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.InternetHeaders:interface'
    name: InternetHeaders
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<boolean>) => void'
    fullName: '(asyncResult: Office.AsyncResult<boolean>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <boolean>) => void
        fullName: <boolean>) => void
  - uid: 'outlook!Office.MessageCompose#isClientSignatureEnabledAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<boolean>) => void'
    fullName: '(asyncResult: Office.AsyncResult<boolean>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <boolean>) => void
        fullName: <boolean>) => void
  - uid: 'outlook!Office.MessageCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.MessageCompose#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#saveAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.MessageCompose#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject