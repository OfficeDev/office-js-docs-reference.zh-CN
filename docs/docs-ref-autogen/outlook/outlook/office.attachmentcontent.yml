### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AttachmentContent:interface'
    summary: |-
      表示邮件或约会项目上的附件内容。

      \[[API 集：邮箱 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**：`ReadItem`

      **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**：撰写或阅读
    name: Office.AttachmentContent
    fullName: Office.AttachmentContent
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.AttachmentContent#content:member'
      - 'outlook!Office.AttachmentContent#format:member'
  - uid: 'outlook!Office.AttachmentContent#content:member'
    summary: 字符串形式的附件内容。
    name: content
    fullName: content
    langs:
      - typeScript
    type: property
    syntax:
      content: 'content: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AttachmentContent#format:member'
    summary: |-
      附件内容要使用的字符串格式。

      对于文件附件，格式为 base64 编码的字符串。

      对于表示邮件且通过拖放或 "附加项目" 附加的项目附件，该格式是一个字符串，表示一个 .eml 格式的文件。 **重要说明**：如果在 web 上的 Outlook 中通过拖放附加了邮件项，则`getAttachmentContentAsync`会引发错误。

      对于表示日历项目且通过拖放或 "附加项目" 附加的项目附件，该格式是一个代表 icalendar 文件的字符串。 **重要说明**：如果日历项目是通过 web 上的 Outlook 中的拖放附加的，则`getAttachmentContentAsync`会引发错误。

      对于云附件，格式为 URL 字符串。
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'format: MailboxEnums.AttachmentContentFormat | string;'
      return:
        type:
          - 'outlook!Office.AttachmentContent#format~0:complex'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          var item = Office.context.mailbox.item;
          var options = {asyncContext: {currentItem: item}};
          item.getAttachmentsAsync(options, callback);

          function callback(result) {
              if (result.value.length > 0) {
                  for (i = 0 ; i < result.value.length ; i++) {
                      result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
                  }
              }
          }

          function handleAttachmentsCallback(result) {
              // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
              switch (result.value.format) {
                  case Office.MailboxEnums.AttachmentContentFormat.Base64:
                      // Handle file attachment.
                      break;
                  case Office.MailboxEnums.AttachmentContentFormat.Eml:
                      // Handle email item attachment.
                      break;
                  case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                      // Handle .icalender attachment.
                      break;
                  case Office.MailboxEnums.AttachmentContentFormat.Url:
                      // Handle cloud attachment.
                      break;
                  default:
                      // Handle attachment formats that are not supported.
              }
          }
          ```
references:
  - uid: 'outlook!Office.AttachmentContent#format~0:complex'
    name: MailboxEnums.AttachmentContentFormat | string
    fullName: Office.MailboxEnums.AttachmentContentFormat | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.AttachmentContentFormat:enum'
        name: MailboxEnums.AttachmentContentFormat
        fullName: Office.MailboxEnums.AttachmentContentFormat
      - name: ' | string'
        fullName: ' | string'