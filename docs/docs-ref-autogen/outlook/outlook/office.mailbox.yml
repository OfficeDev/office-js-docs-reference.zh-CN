### YamlMime:TSType
name: Office.Mailbox
uid: outlook!Office.Mailbox:interface
package: outlook!
fullName: Office.Mailbox
summary: >-
  提供对 Microsoft Outlook 外接程序对象模型的访问权限。


  关键属性：


  - `diagnostics`<!-- -->：向 Outlook 外接程序提供诊断信息。


  - `item`<!-- -->：提供用于访问 Outlook 外接程序中的邮件或约会的方法和属性。


  - `userProfile`<!-- -->：提供有关 Outlook 外接程序中的用户的信息。
remarks: >-
  **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


  **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
isPreview: false
isDeprecated: false
type: interface
properties:
- name: diagnostics
  uid: outlook!Office.Mailbox#diagnostics:member
  package: outlook!
  fullName: diagnostics
  summary: >-
    将诊断信息提供给 Outlook 外接程序。


    包含以下成员：


    - `hostName` (字符串) ：表示主机应用程序名称的字符串。 它应该是下列值之一： `Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->，或 `OutlookAndroid`<!-- -->. **注意**：为桌面客户端（例如 Windows 和 Mac (）上的 Outlook 返回"Outlook") 。


    - `hostVersion` (字符串) ：表示主机应用程序或 Exchange Server (版本（例如，"15.0.468.0") ）。 如果邮件外接程序在桌面版或移动客户端上的 Outlook 中运行，则该属性返回主机应用程序 `hostVersion` Outlook 的版本。 在 Outlook 网页版中，该属性返回 Exchange Server。


    - `OWAView` (或字符串) ：一 (或字符串文本) 表示 `MailboxEnums.OWAView` Outlook 网页视图的枚举。 如果主机应用程序不是 Web 上的 Outlook，则访问此属性会导致未定义。 Web 上的 Outlook 有三个视图 (在屏幕较窄时显示，屏幕较宽时显示，而当屏幕宽时显示) 对应于屏幕和窗口的宽度以及可显示的列数。 `OneColumn` `TwoColumns` `ThreeColumns`


    详细信息位于 [Office.Diagnostics 下](xref:outlook!Office.Diagnostics:interface)<!-- -->.
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'diagnostics: Diagnostics;'
    return:
      type: <xref uid="outlook!Office.Diagnostics:interface" />
- name: ewsUrl
  uid: outlook!Office.Mailbox#ewsUrl:member
  package: outlook!
  fullName: ewsUrl
  summary: >-
    获取此电子邮件帐户的 Exchange Web Services (EWS) 终点的 URL。 仅限阅读模式。


    你的应用必须具有在其清单 `ReadItem` 中指定的权限才能在阅读 `ewsUrl` 模式下调用成员。


    在撰写模式中，必须调用 `saveAsync` 方法，才能使用 `ewsUrl` 成员。 你的应用必须具有 `ReadWriteItem` 调用该方法 `saveAsync` 的权限。


    **注意**：iOS 版或 Android 版 Outlook 不支持此成员。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    远程服务可使用 `ewsUrl` 值对用户邮箱进行 EWS 调用。 例如，可以创建远程服务以 [从所选项目获取附件](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ewsUrl: string;'
    return:
      type: string
- name: item
  uid: outlook!Office.Mailbox#item:member
  package: outlook!
  fullName: item
  summary: >-
    邮箱项目。 根据加载项打开的上下文，项目类型可能会有所不同。 如果只想查看IntelliSense或模式，请强制将此项强制转换到以下项之一：


    [MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->[，MessageRead](xref:outlook!Office.MessageRead:interface)<!-- -->[，AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->[、AppointmentRead](xref:outlook!Office.AppointmentRead:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'item: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead;'
    return:
      type: <xref uid="outlook!Office.Item:interface" /> & <xref uid="outlook!Office.ItemCompose:interface" /> & <xref uid="outlook!Office.ItemRead:interface" /> & <xref uid="outlook!Office.Message:interface" /> & <xref uid="outlook!Office.MessageCompose:interface" /> & <xref uid="outlook!Office.MessageRead:interface" /> & <xref uid="outlook!Office.Appointment:interface" /> & <xref uid="outlook!Office.AppointmentCompose:interface" /> & <xref uid="outlook!Office.AppointmentRead:interface" />
- name: masterCategories
  uid: outlook!Office.Mailbox#masterCategories:member
  package: outlook!
  fullName: masterCategories
  summary: >-
    获取一个对象，该对象提供用于管理与邮箱关联的类别主列表的方法。


    \[[API 集：Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadWriteMailbox`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'masterCategories: MasterCategories;'
    return:
      type: <xref uid="outlook!Office.MasterCategories:interface" />
- name: restUrl
  uid: outlook!Office.Mailbox#restUrl:member
  package: outlook!
  fullName: restUrl
  summary: >-
    获取此电子邮件帐户的 REST 终结点的 URL。


    你的应用必须具有在其清单 `ReadItem` 中指定的权限才能在阅读 `restUrl` 模式下调用成员。


    在撰写模式中，必须调用 `saveAsync` 方法，才能使用 `restUrl` 成员。 你的应用必须具有 `ReadWriteItem` 调用该方法 `saveAsync` 的权限。


    但是，在委托或共享方案中，应改为使用要求集 `targetRestUrl` 1.8 (中引入的 [SharedProperties](xref:outlook!Office.SharedProperties:interface) 对象) 。 有关详细信息，请参阅委托 [访问](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) 文章。


    \[[API 集：Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`\n\n**[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读\n\n`restUrl` 值可用于对用户邮箱进行 [REST API](https://docs.microsoft.com/outlook/rest/) 调用。\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'restUrl: string;'
    return:
      type: string
- name: userProfile
  uid: outlook!Office.Mailbox#userProfile:member
  package: outlook!
  fullName: userProfile
  summary: >-
    有关与邮箱关联的用户的信息。 这包括他们的帐户类型、显示名称、电子邮件地址和时区。


    详细信息位于 [Office.UserProfile 下](xref:outlook!Office.UserProfile:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'userProfile: UserProfile;'
    return:
      type: <xref uid="outlook!Office.UserProfile:interface" />
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.Mailbox#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    添加支持事件的事件处理程序。 **注意**：事件仅适用于任务窗格。


    有关支持的事件，请参阅 ["邮箱对象模型](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox#events) 事件"部分。


    \[[API 集：Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    Office.initialize = function (reason) {
        $(document).ready(function () {
            Office.context.mailbox.addHandlerAsync(
                Office.EventType.ItemChanged,
                loadNewItem,
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        // Handle error.
                    }
                });
        });
    };


    function loadNewItem(eventArgs) {
        var item = Office.context.mailbox.item;

        // Check that item is not null.
        if (item !== null) {
            // Work with item, e.g., define and call function that
            // loads the properties of the newly selected item.
            loadProps(item);
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: 应调用处理程序的事件。
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: 用于处理事件的函数。 此函数必须接受一个参数，即对象文本。 参数上的 type 属性将匹配 `eventType` 传递给的参数 `addHandlerAsync`<!-- -->.
      type: '(type: <xref uid="office!Office.EventType:enum" />) =&gt; void'
    - id: options
      description: 可选。 提供用于保留任何类型的上下文数据（未更改）的选项，以用于回调。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 方法完成后，使用一个类型参数调用在参数中传递 `callback` 的函数 `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: convertToEwsId(itemId, restVersion)
  uid: outlook!Office.Mailbox#convertToEwsId:member(1)
  package: outlook!
  fullName: convertToEwsId(itemId, restVersion)
  summary: >-
    将项目 ID 格式化（从 REST 转换为 EWS 格式）。


    通过 REST API 检索的项 Id（如 Outlook 邮件 API 或 Microsoft Graph）使用与 Exchange Web 服务 (EWS) 所使用格式不同的格式。 方法将 REST 格式化的 ID 转换为正确的 EWS 格式。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。


    \[[API 集：Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
    parameters:
    - id: itemId
      description: 为 Outlook REST API 设置格式的项目 ID。
      type: string
    - id: restVersion
      description: 指示用于检索项目 ID 的 Outlook REST API 的版本。
      type: <xref uid="outlook!Office.MailboxEnums.RestVersion:enum" /> | string
    return:
      type: string
      description: ''
- name: convertToLocalClientTime(timeValue)
  uid: outlook!Office.Mailbox#convertToLocalClientTime:member(1)
  package: outlook!
  fullName: convertToLocalClientTime(timeValue)
  summary: >-
    获取包含以本地客户端时间表示的时间信息的字典。


    Outlook 网页版或桌面客户端的邮件应用程序使用的日期和时间可以使用不同的时区。 Outlook 使用客户端计算机时区;Web 上的 Outlook 使用在 Exchange 管理中心和 EAC (设置的) 。 应对日期和时间值进行处理，以便用户界面上显示的值始终与用户预期的时区一致。


    如果邮件应用程序在桌面客户端上的 Outlook 中运行，该方法将返回值设置为客户端计算机时区的 `convertToLocalClientTime` 字典对象。 如果邮件应用程序在 Outlook 网页版中运行，该方法将返回值设置为 EAC 中指定的时区的 `convertToLocalClientTime` 字典对象。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
    parameters:
    - id: timeValue
      description: '`Date` 对象。'
      type: Date
    return:
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
      description: ''
- name: convertToRestId(itemId, restVersion)
  uid: outlook!Office.Mailbox#convertToRestId:member(1)
  package: outlook!
  fullName: convertToRestId(itemId, restVersion)
  summary: >-
    将项目 ID 格式化（从 EWS 转换为 REST 格式）。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。


    \[[API 集：Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`Restricted`\n\n**[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读\n\n通过 EWS 或通过属性检索的项目 ID 使用的格式与 REST API `itemId` [ (（](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations) 如 Outlook 邮件 API 或 Microsoft [Graph）使用的格式不同](https://graph.microsoft.io/)<!-- -->. 方法将 EWS 格式化的 ID 转换为正确的 REST 格式。\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
    parameters:
    - id: itemId
      description: 适用于 Exchange Web 服务 (EWS) 的项目 ID 格式化。
      type: string
    - id: restVersion
      description: 值指示转换的 ID 所使用的 Outlook REST API 的版本。
      type: <xref uid="outlook!Office.MailboxEnums.RestVersion:enum" /> | string
    return:
      type: string
      description: ''
- name: convertToUtcClientTime(input)
  uid: outlook!Office.Mailbox#convertToUtcClientTime:member(1)
  package: outlook!
  fullName: convertToUtcClientTime(input)
  summary: >-
    从 `Date` 包含时间信息的字典获取对象。


    该方法将包含本地日期和时间的字典转换为具有本地日期和时间的正确 `convertToUtcClientTime` `Date` 值的对象。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Represents 3:37 PM PDT on Monday, August 26, 2019.

    var input = {
        date: 26,
        hours: 15,
        milliseconds: 2,
        minutes: 37,
        month: 7,
        seconds: 2,
        timezoneOffset: -420,
        year: 2019
    };


    // result should be a Date object.

    var result = Office.context.mailbox.convertToUtcClientTime(input);


    // Output should be "2019-08-26T22:37:02.002Z".

    console.log(result.toISOString());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
    parameters:
    - id: input
      description: 要转换的本地时间值。
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
    return:
      type: Date
      description: 包含以 UTC 表示的时间的 Date 对象。
- name: displayAppointmentForm(itemId)
  uid: outlook!Office.Mailbox#displayAppointmentForm:member(1)
  package: outlook!
  fullName: displayAppointmentForm(itemId)
  summary: >-
    显示现有日历约会。


    `displayAppointmentForm` 方法将打开桌面新窗口中或移动设备对话框中的现有日历约会。


    在 Mac 上的 Outlook 中，可以使用此方法显示属于定期系列的单个约会，或显示定期系列的主约会。 但是，无法显示系列实例，因为无法访问属性集 (包括定期系列实例) ID。


    在 Outlook 网页版中，此方法仅在窗体正文小于或等于 32K 字符时打开指定的窗体。


    如果指定的项目标识符未标识现有约会，将在客户端计算机或设备上打开一个空白窗格，并且不会返回错误消息。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: 现有日历约会的 Exchange Web 服务 (EWS) 标识符。
      type: string
    return:
      type: void
      description: ''
- name: displayAppointmentFormAsync(itemId, options, callback)
  uid: outlook!Office.Mailbox#displayAppointmentFormAsync:member(1)
  package: outlook!
  fullName: displayAppointmentFormAsync(itemId, options, callback)
  summary: >-
    显示现有日历约会。


    `displayAppointmentFormAsync` 方法将打开桌面新窗口中或移动设备对话框中的现有日历约会。


    在 Mac 上的 Outlook 中，可以使用此方法显示属于定期系列的单个约会，或显示定期系列的主约会。 但是，无法显示系列实例，因为无法访问属性集 (包括定期系列实例) ID。


    在 Outlook 网页版中，此方法仅在窗体正文小于或等于 32K 字符时打开指定的窗体。


    如果指定的项目标识符未标识现有约会，将在客户端计算机或设备上打开一个空白窗格，并且不会返回错误消息。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。


    \[[API 集：Mailbox 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayAppointmentFormAsync(itemId, function(asyncResult) {
      console.log("Result: " + JSON.stringify(asyncResult));
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentFormAsync(itemId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: itemId
      description: 现有日历约会的 Exchange Web 服务 (EWS) 标识符。
      type: string
    - id: options
      description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供他们希望访问的任何对象。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 方法完成后，用单个参数调用在参数中传递 `callback` 的函数， `asyncResult`<!-- -->，它是一 `Office.AsyncResult` 个对象。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayMessageForm(itemId)
  uid: outlook!Office.Mailbox#displayMessageForm:member(1)
  package: outlook!
  fullName: displayMessageForm(itemId)
  summary: >-
    显示现有邮件。


    `displayMessageForm` 方法将打开桌面新窗口中或移动设备对话框中的现有邮件。


    在 Outlook 网页版中，此方法仅在窗体正文小于或等于 32K 字符时打开指定的窗体。


    如果指定的项目标识符未标识现有消息，客户端计算机上将不会显示任何消息，并且不会返回错误消息。


    请勿将 . `displayMessageForm` 与表示约会的 itemId 一同使用。 使用 `displayAppointmentForm` 方法显示现有的约会，并使用 `displayNewAppointmentForm` 显示窗体以新建约会。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: 现有消息的 Exchange Web 服务 (EWS) 标识符。
      type: string
    return:
      type: void
      description: ''
- name: displayMessageFormAsync(itemId, options, callback)
  uid: outlook!Office.Mailbox#displayMessageFormAsync:member(1)
  package: outlook!
  fullName: displayMessageFormAsync(itemId, options, callback)
  summary: >-
    显示现有邮件。


    `displayMessageFormAsync` 方法将打开桌面新窗口中或移动设备对话框中的现有邮件。


    在 Outlook 网页版中，此方法仅在窗体正文小于或等于 32K 字符时打开指定的窗体。


    如果指定的项目标识符未标识现有消息，客户端计算机上将不会显示任何消息，并且不会返回错误消息。


    请勿将 `displayMessageForm` or `displayMessageFormAsync` 方法与表示约会的 itemId 一同使用。 使用 `displayAppointmentForm` or `displayAppointmentFormAsync` 方法可显示现有约会，或者 `displayNewAppointmentForm` `displayNewAppointmentFormAsync` 显示窗体以创建新约会。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。


    \[[API 集：Mailbox 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayMessageFormAsync(itemId, function (asyncResult) {
     console.log("Result: " + JSON.stringify(asyncResult));
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageFormAsync(itemId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: itemId
      description: 现有消息的 Exchange Web 服务 (EWS) 标识符。
      type: string
    - id: options
      description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供他们希望访问的任何对象。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 方法完成后，用单个参数调用在参数中传递 `callback` 的函数， `asyncResult`<!-- -->，它是一 `Office.AsyncResult` 个对象。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayNewAppointmentForm(parameters)
  uid: outlook!Office.Mailbox#displayNewAppointmentForm:member(1)
  package: outlook!
  fullName: displayNewAppointmentForm(parameters)
  summary: >-
    显示用于新建日历约会的表单。


    `displayNewAppointmentForm` 方法打开可让用户新建约会或会议的窗体。如果指定了参数，将使用参数的内容自动填充约会窗体字段。


    在 Outlook 网页中，此方法始终显示包含与会者字段的窗体。 如果你未将任何与会者指定为输入参数，该方法将显示为一个包含“**保存**”按钮的窗体。 如果已指定与会者，窗体将包含与会者和“**发送**”按钮。


    在 Outlook 富客户端和 Outlook RT 中，如果在 `requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->或 `resources` 参数，此方法显示包含"发送"按钮的会议窗体。 如果未指定任何收件人，此方法将显示具有"保存关闭"按钮的 **约会 &amp;** 窗体。


    如果任何参数超过指定大小限制，或者指定了未知参数名称，则会引发异常。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：读取


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
    parameters:
    - id: parameters
      description: 描述 `AppointmentForm` 新约会的一个描述。 所有属性都是可选的。
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    return:
      type: void
      description: ''
- name: displayNewAppointmentFormAsync(parameters, options, callback)
  uid: outlook!Office.Mailbox#displayNewAppointmentFormAsync:member(1)
  package: outlook!
  fullName: displayNewAppointmentFormAsync(parameters, options, callback)
  summary: >-
    显示用于新建日历约会的表单。


    `displayNewAppointmentFormAsync` 方法打开可让用户新建约会或会议的窗体。如果指定了参数，将使用参数的内容自动填充约会窗体字段。


    在 Outlook 网页中，此方法始终显示包含与会者字段的窗体。 如果你未将任何与会者指定为输入参数，该方法将显示为一个包含“**保存**”按钮的窗体。 如果已指定与会者，窗体将包含与会者和“**发送**”按钮。


    在 Outlook 富客户端和 Outlook RT 中，如果在 `requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->或 `resources` 参数，此方法显示包含"发送"按钮的会议窗体。 如果未指定任何收件人，此方法将显示具有"保存关闭"按钮的 **约会 &amp;** 窗体。


    如果任何参数超过指定大小限制，或者指定了未知参数名称，则会引发异常。


    **注意**：iOS 版或 Android 版 Outlook 不支持此方法。


    \[[API 集：Mailbox 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：读取


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.displayNewAppointmentFormAsync(
      {
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentFormAsync(parameters: AppointmentForm, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: parameters
      description: 描述 `AppointmentForm` 新约会的一个描述。 所有属性都是可选的。
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    - id: options
      description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供他们希望访问的任何对象。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 方法完成后，用单个参数调用在参数中传递 `callback` 的函数， `asyncResult`<!-- -->，它是一 `Office.AsyncResult` 个对象。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayNewMessageForm(parameters)
  uid: outlook!Office.Mailbox#displayNewMessageForm:member(1)
  package: outlook!
  fullName: displayNewMessageForm(parameters)
  summary: >-
    显示用于创建新邮件的窗体。


    该方法 `displayNewMessageForm` 将打开一个表单，使用户能够创建新邮件。 如果指定了参数，则会自动用参数的内容填充邮件窗体字段。


    如果任何参数超过指定大小限制，或者指定了未知参数名称，则会引发异常。


    \[[API 集：Mailbox 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：读取


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    Office.context.mailbox.displayNewMessageForm({
      toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
      ccRecipients: ["sam@contoso.com"],
      subject: "Outlook add-ins are cool!",
      htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
      attachments: [
        {
          type: "file",
          name: "image.png",
          url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
          isInline: true
        }
      ]
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewMessageForm(parameters: any): void;'
    parameters:
    - id: parameters
      description: >-
        包含要填充的新表单中用户的所有值的字典。 所有参数都是可选的。


        `toRecipients`<!-- -->：包含电子邮件地址的字符串数组或包含"收件人"行上每个收件人的 [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) **对象的** 数组。 数组限制为最多 100 个条目。


        `ccRecipients`<!-- -->：包含电子邮件地址的字符串数组或包含"抄送"行上每个收件人的 [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) **对象的数组。** 数组限制为最多 100 个条目。


        `bccRecipients`<!-- -->：包含电子邮件地址的字符串数组或包含"Bcc"行上每个收件人的 [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) **对象的** 数组。 数组限制为最多 100 个条目。


        `subject`<!-- -->：包含邮件主题的字符串。 字符串长度限制为最多 255 个字符。


        `htmlBody`<!-- -->：邮件的 HTML 正文。 正文内容限制为最大 32 KB。


        `attachments`<!-- -->：是文件或项目附件的 JSON 对象数组。


        `attachments.type`<!-- -->：指示附件的类型。 必须是文件附件的文件或项目附件的项目。


        `attachments.name`<!-- -->：包含附件名称的字符串，长度最多为 255 个字符。


        `attachments.url`<!-- -->：仅在类型设置为文件时使用。 文件的位置的 URI。


        `attachments.isInline`<!-- -->：仅在类型设置为文件时使用。 如果为 true，则指示附件将在邮件正文中内联显示，并且不应显示在附件列表中。


        `attachments.itemId`<!-- -->：仅在类型设置为项目时使用。 要附加到新邮件的现有电子邮件的 EWS 项目 ID。 字符串最长为 100 个字符。
      type: any
    return:
      type: void
      description: ''
- name: displayNewMessageFormAsync(parameters, options, callback)
  uid: outlook!Office.Mailbox#displayNewMessageFormAsync:member(1)
  package: outlook!
  fullName: displayNewMessageFormAsync(parameters, options, callback)
  summary: >-
    显示用于创建新邮件的窗体。


    该方法 `displayNewMessageFormAsync` 将打开一个表单，使用户能够创建新邮件。 如果指定了参数，则会自动用参数的内容填充邮件窗体字段。


    如果任何参数超过指定大小限制，或者指定了未知参数名称，则会引发异常。


    \[[API 集：Mailbox 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：读取


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new message form has been created.

    Office.context.mailbox.displayNewMessageFormAsync(
      {
        toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
        ccRecipients: ["sam@contoso.com"],
        subject: "Outlook add-ins are cool!",
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
          {
            type: "file",
            name: "image.png",
            url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
            isInline: true
          }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewMessageFormAsync(parameters: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: parameters
      description: >-
        包含要填充的新表单中用户的所有值的字典。 所有参数都是可选的。


        `toRecipients`<!-- -->：包含电子邮件地址的字符串数组或包含"收件人"行上每个收件人的 [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) **对象的** 数组。 数组限制为最多 100 个条目。


        `ccRecipients`<!-- -->：包含电子邮件地址的字符串数组或包含"抄送"行上每个收件人的 [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) **对象的数组。** 数组限制为最多 100 个条目。


        `bccRecipients`<!-- -->：包含电子邮件地址的字符串数组或包含"Bcc"行上每个收件人的 [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) **对象的** 数组。 数组限制为最多 100 个条目。


        `subject`<!-- -->：包含邮件主题的字符串。 字符串长度限制为最多 255 个字符。


        `htmlBody`<!-- -->：邮件的 HTML 正文。 正文内容限制为最大 32 KB。


        `attachments`<!-- -->：是文件或项目附件的 JSON 对象数组。


        `attachments.type`<!-- -->：指示附件的类型。 必须是文件附件的文件或项目附件的项目。


        `attachments.name`<!-- -->：包含附件名称的字符串，长度最多为 255 个字符。


        `attachments.url`<!-- -->：仅在类型设置为文件时使用。 文件的位置的 URI。


        `attachments.isInline`<!-- -->：仅在类型设置为文件时使用。 如果为 true，则指示附件将在邮件正文中内联显示，并且不应显示在附件列表中。


        `attachments.itemId`<!-- -->：仅在类型设置为项目时使用。 要附加到新邮件的现有电子邮件的 EWS 项目 ID。 字符串最长为 100 个字符。
      type: any
    - id: options
      description: 可选。 包含一个或多个以下属性的对象文本。 `asyncContext`<!-- -->：开发人员可以在回调方法中提供他们希望访问的任何对象。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 方法完成后，用单个参数调用在参数中传递 `callback` 的函数， `asyncResult`<!-- -->，它是一 `Office.AsyncResult` 个对象。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(options, callback)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(1)
  package: outlook!
  fullName: getCallbackTokenAsync(options, callback)
  summary: >-
    获取一个字符串，其中包含用于调用 EWS (REST API 或 Exchange Web Services) 。


    `getCallbackTokenAsync` 方法进行异步调用，从托管用户邮箱的 Exchange Server 获取非跳转令牌。回调令牌的生存期为 5 分钟。


    令牌作为字符串在属性中 `asyncResult.value` 返回。


    在 `getCallbackTokenAsync` 读取模式下调用该方法需要最低权限级别 `ReadItem`<!-- -->.


    在 `getCallbackTokenAsync` 撰写模式下调用该方法需要你已保存项目。 `saveAsync`此方法要求最低权限级别为`ReadWriteItem`<!-- -->.


    **重要** 说明：有关委派或共享方案的指南，请参阅 [委派访问](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) 文章。


    *REST 令牌*


    请求 REST 令牌时 (`options.isRest` = `true`<!-- -->) ，生成的令牌无法对 EWS 调用进行身份验证。 令牌的作用域限制为对当前项及其附件的只读访问，除非外接程序在其清单中指定了 `ReadWriteMailbox` 权限。 如果指定了 `ReadWriteMailbox` 权限，则生成的令牌将授予对邮件、日历和联系人的读/写权限，包括发送邮件的功能。


    在进行 REST API 调用时，外接程序应使用 `restUrl` 属性来确定要使用的正确 URL。


    此 API 适用于以下范围：


    - `Mail.ReadWrite`


    - `Mail.Send`


    - `Calendars.ReadWrite`


    - `Contacts.ReadWrite`


    *EWS 令牌*


    请求 EWS 令牌时 (`options.isRest` = `false`<!-- -->) ，生成的令牌将不能对 REST API 调用进行身份验证。 令牌的作用域限制为访问当前项。


    外接程序应使用 `ewsUrl` 属性来确定进行 EWS 调用时要使用的正确 URL。


    可以将令牌和附件标识符或项标识符传递到第三方系统。 第三方系统使用令牌作为持有者身份验证令牌调用 Exchange Web 服务 (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) 操作或 [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) 操作，以返回附件或项目。 例如，可以创建远程服务以 [从所选项目获取附件](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    **注意**：建议加载项尽可能使用 REST API 而不是 Exchange Web 服务。


    \[[API 集：Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`\n\n**[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读\n\n**错误**：\n\n- `HTTPRequestFailure`<!-- -->：请求已失败。 请查看诊断对象，了解 HTTP 错误代码。\n\n- `InternalServerError`<!-- -->：Exchange 服务器返回错误。 请查看诊断对象，了解详细信息。\n\n- `NetworkError`<!-- -->：用户不再连接到网络。 请检查网络连接并重试。\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 包含一个或多个以下属性的对象文本。 `isRest`<!-- -->：确定提供的令牌是否将用于 Outlook REST API 或 Exchange Web 服务。 默认值为 `false`<!-- -->. `asyncContext`<!-- -->：传递给异步方法的任何状态数据。
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isRest?: boolean }'
    - id: callback
      description: 方法完成后，用一个类型参数调用回调参数中传递的函数 `Office.AsyncResult`<!-- -->. 令牌作为字符串在属性中 `asyncResult.value` 返回。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(2)
  package: outlook!
  fullName: getCallbackTokenAsync(callback, userContext)
  summary: >-
    获取一个字符串，其中包含用于从 Exchange Server 获取附件或项目的令牌。


    `getCallbackTokenAsync` 方法进行异步调用，从托管用户邮箱的 Exchange Server 获取非跳转令牌。回调令牌的生存期为 5 分钟。


    令牌作为字符串在属性中 `asyncResult.value` 返回。


    可以将令牌和附件标识符或项标识符传递到第三方系统。 第三方系统使用令牌作为持有者身份验证令牌调用 Exchange Web 服务 (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) 或 [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation)，以返回附件或项目。 例如，可以创建远程服务以 [从所选项目获取附件](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    在 `getCallbackTokenAsync` 读取模式下调用该方法需要最低权限级别 `ReadItem`<!-- -->.


    在 `getCallbackTokenAsync` 撰写模式下调用该方法需要你已保存项目。 `saveAsync`此方法要求最低权限级别为`ReadWriteItem`<!-- -->.


    **重要** 说明：有关委派或共享方案的指南，请参阅 [委派访问](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) 文章。


    \[[API 集：所有支持读取模式;邮箱 1.3 引入了撰写模式支持](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    **错误**：


    - `HTTPRequestFailure`<!-- -->：请求已失败。 请查看诊断对象，了解 HTTP 错误代码。


    - `InternalServerError`<!-- -->：Exchange 服务器返回错误。 请查看诊断对象，了解详细信息。


    - `NetworkError`<!-- -->：用户不再连接到网络。 请检查网络连接并重试。


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml

    Office.context.mailbox.getCallbackTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: 方法完成后，用一个类型参数调用回调参数中传递的函数 `Office.AsyncResult`<!-- -->. 令牌作为字符串在属性中 `asyncResult.value` 返回。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: 可选。 传递给异步方法的任何状态数据。
      type: any
    return:
      type: void
      description: ''
- name: getUserIdentityTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)
  package: outlook!
  fullName: getUserIdentityTokenAsync(callback, userContext)
  summary: >-
    获取用于标识用户和 Office 外接程序的令牌。


    令牌作为字符串在属性中 `asyncResult.value` 返回。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    此方法 `getUserIdentityTokenAsync` 返回一个令牌，可用于通过第三方系统[](https://docs.microsoft.com/office/dev/add-ins/outlook/authentication)标识外接程序和用户并进行身份验证<!-- -->.


    **错误**：


    - `HTTPRequestFailure`<!-- -->：请求已失败。 请查看诊断对象，了解 HTTP 错误代码。


    - `InternalServerError`<!-- -->：Exchange 服务器返回错误。 请查看诊断对象，了解详细信息。


    - `NetworkError`<!-- -->：用户不再连接到网络。 请检查网络连接并重试。


    #### <a name="examples"></a>示例


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: 方法完成后，用一个类型参数调用回调参数中传递的函数 `Office.AsyncResult`<!-- -->. 令牌作为字符串在属性中 `asyncResult.value` 返回。 如果出现错误，则 `asyncResult.error` 和 `asyncResult.diagnostics` 属性可能会提供其他信息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: 可选。 传递给异步方法的任何状态数据。
      type: any
    return:
      type: void
      description: ''
- name: makeEwsRequestAsync(data, callback, userContext)
  uid: outlook!Office.Mailbox#makeEwsRequestAsync:member(1)
  package: outlook!
  fullName: makeEwsRequestAsync(data, callback, userContext)
  summary: >-
    对承载用户邮箱的 Exchange (EWS) 服务执行异步请求。


    在这些情况下，加载项应该使用 REST API 来改为访问用户的邮箱。


    `makeEwsRequestAsync` 方法代表外接程序将 EWS 请求发送到 Exchange。


    你不能使用 `makeEwsRequestAsync` 方法请求与文件夹关联的项目。


    XML 请求必须指定 UTF-8 编码： `\<?xml version="1.0" encoding="utf-8"?\>`<!-- -->.


    您的外接程序必须具有 `ReadWriteMailbox` 使用该方法 `makeEwsRequestAsync` 的权限。 有关使用权限以及可以使用该方法调用的 EWS 操作的信息，请参阅"指定邮件外接程序访问用户邮箱 `ReadWriteMailbox` `makeEwsRequestAsync` [的权限](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)"<!-- -->.


    EWS 调用的 XML 结果作为 `asyncResult.value` 属性中的字符串提供。 如果结果大小超过 1 MB，则改为返回一条错误消息。


    **注意**：此方法在下列情况下不受支持：


    - 在 iOS 版或 Android 版 Outlook 中。


    - 在 Gmail 邮箱中加载加载项时。


    **注意**：服务器管理员必须在客户端访问服务器 EWS 目录上设置为，才能启用该方法 `OAuthAuthentication` `true` `makeEwsRequestAsync` 以提出 EWS 请求。


    *版本差异*


    在 `makeEwsRequestAsync` 运行在早于版本 15.0.4535.1004 的 Outlook 版本中的邮件应用程序中使用此方法时，您应将编码值设置为 ISO-8859-1。


    `<?xml version="1.0" encoding="iso-8859-1"?>`


    当邮件应用程序运行在 Outlook 网页版中时，您不需要设置编码值。 可以使用该属性确定邮件应用程序是否在 Outlook 或 Web 上的 Outlook `mailbox.diagnostics.hostName` 中运行。 可以使用该属性确定运行哪个版本的 `mailbox.diagnostics.hostVersion` Outlook。
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadWriteMailbox`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读


    #### <a name="examples"></a>示例


    ```javascript

    function getSubjectRequest(id) {
        // Return a GetItem operation request for the subject of the specified item.
        var request =
            '<?xml version="1.0" encoding="utf-8"?>' +
            '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
            '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
            '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
            '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
            '  <soap:Header>' +
            '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
            '  </soap:Header>' +
            '  <soap:Body>' +
            '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
            '      <ItemShape>' +
            '        <t:BaseShape>IdOnly</t:BaseShape>' +
            '        <t:AdditionalProperties>' +
            '            <t:FieldURI FieldURI="item:Subject"/>' +
            '        </t:AdditionalProperties>' +
            '      </ItemShape>' +
            '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
            '    </GetItem>' +
            '  </soap:Body>' +
            '</soap:Envelope>';

        return request;
    }


    function sendRequest() {
        // Create a local variable that contains the mailbox.
        Office.context.mailbox.makeEwsRequestAsync(
            getSubjectRequest(mailbox.item.itemId), callback);
    }


    function callback(asyncResult)  {
        var result = asyncResult.value;
        var context = asyncResult.asyncContext;

        // Process the returned response here.
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml

    var ewsId = Office.context.mailbox.item.itemId;

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
        '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
        '  <soap:Body>' +
        '    <m:GetItem>' +
        '      <m:ItemShape>' +
        '        <t:BaseShape>IdOnly</t:BaseShape>' +
        '      </m:ItemShape >' +
        '      <m:ItemIds>' +
        '        <t:ItemId Id="' + ewsId + '" />' +
        '      </m:ItemIds>' +
        '    </m:GetItem>' +
        '  </soap:Body>' +
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: data
      description: EWS 请求。
      type: any
    - id: callback
      description: 方法完成后，用一个类型参数调用回调参数中传递的函数 `Office.AsyncResult`<!-- -->. `value`结果的属性是作为字符串提供的 EWS 请求的 XML。 如果结果大小超过 1 MB，则改为返回一条错误消息。
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: 可选。 传递给异步方法的任何状态数据。
      type: any
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.Mailbox#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    删除受支持事件类型的事件处理程序。 **注意**：事件仅适用于任务窗格。


    有关支持的事件，请参阅 ["邮箱对象模型](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox#events) 事件"部分。


    \[[API 集：Mailbox 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[最低权限级别](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**：`ReadItem`


    **[适用的 Outlook 模式](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**：撰写或阅读
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: 应撤销处理程序的事件。
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: 可选。 提供用于保留任何类型的上下文数据（未更改）的选项，以用于回调。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 方法完成后，使用一个类型参数调用在参数中传递 `callback` 的函数 `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: e05dfbd5bab1a5cc24aad121159d10735b5f2546
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49850939"
