### YamlMime:TSType
name: Excel.Application
uid: excel!Excel.Application:class
package: excel!
fullName: Excel.Application
summary: >-
  表示用于管理工作簿的 Excel 应用程序。


  \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: calculationEngineVersion
  uid: excel!Excel.Application#calculationEngineVersion:member
  package: excel!
  fullName: calculationEngineVersion
  summary: >-
    返回用于上次完整重新计算的 Excel 计算引擎版本。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly calculationEngineVersion: number;'
    return:
      type: number
- name: calculationMode
  uid: excel!Excel.Application#calculationMode:member
  package: excel!
  fullName: calculationMode
  summary: >-
    返回工作簿中使用的计算模式，如 CalculationMode 中的常量所定义。 可能的值包括： `Automatic`<!-- -->，Excel 控制重新计算的位置; `AutomaticExceptTables`<!-- -->，Excel 在其中控制重新计算，但忽略表中的更改。 `Manual`<!-- -->，在用户请求计算时完成计算。


    \[[API 集： ExcelApi 1.1 for get，1.8 （用于设置）](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
    return:
      type: <xref uid="excel!Excel.CalculationMode:enum" /> | "Automatic" | "AutomaticExceptTables" | "Manual"
- name: calculationState
  uid: excel!Excel.Application#calculationState:member
  package: excel!
  fullName: calculationState
  summary: >-
    返回应用程序的计算状态。 有关详细信息，请参阅 Excel.CalculationState。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly calculationState: Excel.CalculationState | "Done" | "Calculating" | "Pending";'
    return:
      type: <xref uid="excel!Excel.CalculationState:enum" /> | "Done" | "Calculating" | "Pending"
- name: context
  uid: excel!Excel.Application#context:member
  package: excel!
  fullName: context
  summary: 与该对象关联的请求上下文。 这会将加载项的进程连接到 Office 主机应用程序的进程。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: iterativeCalculation
  uid: excel!Excel.Application#iterativeCalculation:member
  package: excel!
  fullName: iterativeCalculation
  summary: >-
    返回“迭代计算”设置。 在 Windows 和 Mac 上的 Excel 中，这些设置将应用于 Excel 应用程序。 在 Excel 中的 web 和其他平台上，这些设置将应用于活动工作簿。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly iterativeCalculation: Excel.IterativeCalculation;'
    return:
      type: <xref uid="excel!Excel.IterativeCalculation:class" />
methods:
- name: calculate(calculationType)
  uid: excel!Excel.Application#calculate:member(1)
  package: excel!
  fullName: calculate(calculationType)
  summary: >-
    重新计算 Excel 中当前打开的所有工作簿。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(calculationType: Excel.CalculationType): void;'
    parameters:
    - id: calculationType
      description: 指定要使用的计算类型。 有关详细信息，请参阅 CalculationType。
      type: <xref uid="excel!Excel.CalculationType:enum" />
    return:
      type: void
      description: ''
- name: calculate(calculationTypeString)
  uid: excel!Excel.Application#calculate:member(2)
  package: excel!
  fullName: calculate(calculationTypeString)
  summary: >-
    重新计算 Excel 中当前打开的所有工作簿。


    \[[API 集： ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;'
    parameters:
    - id: calculationTypeString
      description: 指定要使用的计算类型。 有关详细信息，请参阅 CalculationType。
      type: "\"Recalculate\" | \"Full\" | \"FullRebuild\""
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) {\n    ctx.workbook.application.calculate('Full');\n    return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.Application#load:member(1)
  package: excel!
  fullName: load(options)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
    parameters:
    - id: options
      description: 提供要加载的对象的属性的选项。
      type: <xref uid="excel!Excel.Interfaces.ApplicationLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Application:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Application#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Application;'
    parameters:
    - id: propertyNames
      description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Application:class" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nExcel.run(function (ctx) {\n    var application = ctx.workbook.application;\n    application.load('calculationMode');\n    return ctx.sync().then(function() {\n        console.log(application.calculationMode);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Application#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Application;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` 是一个以逗号分隔的字符串，用于指定要加载的属性，并且 `propertyNamesAndPaths.expand` 是一个以逗号分隔的字符串，用于指定要加载的导航属性。'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Application:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Application#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: 同时设置一个对象的多个属性。 您可以传递具有相应属性的纯对象或相同类型的其他 API 对象。
  remarks: >-
    此方法具有以下附加签名：


    `set(properties: Excel.Application): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: 一个 JavaScript 对象，其属性的结构 isomorphically 为在其上调用方法的对象的属性。
      type: <xref uid="excel!Excel.Interfaces.ApplicationUpdateData:interface" />
    - id: options
      description: 提供一个选项，以在 properties 对象尝试设置任何只读属性时禁止显示错误。
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Application#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: 基于现有加载的对象同时设置该对象的多个属性。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Application): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Application:class" />
    return:
      type: void
      description: ''
- name: suspendApiCalculationUntilNextSync()
  uid: excel!Excel.Application#suspendApiCalculationUntilNextSync:member(1)
  package: excel!
  fullName: suspendApiCalculationUntilNextSync()
  summary: >-
    在下一次调用“context.sync()”前暂停计算。设置后，开发者负责重新计算工作簿，以确保传播所有依赖项。


    \[[API 集： ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'suspendApiCalculationUntilNextSync(): void;'
    return:
      type: void
      description: ''
- name: suspendScreenUpdatingUntilNextSync()
  uid: excel!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)
  package: excel!
  fullName: suspendScreenUpdatingUntilNextSync()
  summary: >-
    在调用下一步之前挂起屏幕更新 `context.sync()` 。


    * 注意 * *：请勿 `suspendScreenUpdatingUntilNextSync` 反复调用 (例如在循环) 中。 重复调用将导致 Excel 窗口闪烁。


    \[[API 集： ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'suspendScreenUpdatingUntilNextSync(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/90-scenarios/performance-optimization.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const rowCount = 500;\n    const columnCount = 20;\n\n    const startTime = Date.now();\n    console.log(\"Starting...\");\n\n    if (pauseScreenPainting) {\n        // Note: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such as in a loop).\n        // Repeated calls will cause the Excel window to flicker. \n        context.application.suspendScreenUpdatingUntilNextSync();\n    }\n\n    for (let i = 0; i < rowCount; i++) {\n        for (let j = 0; j < columnCount; j++) {\n            let cell = sheet.getCell(i, j);\n            cell.values = [[i * j * Math.random()]];\n            if (untrack) {\n                cell.untrack();\n            }\n        }\n    }\n\n    await context.sync();\n\n    console.log(`Ending. Adding ${rowCount * columnCount} cells took ${Date.now() - startTime} milliseconds`);\n});\n```"
- name: toJSON()
  uid: excel!Excel.Application#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: 重写 JavaScript `toJSON()` 方法，以便在将 API 对象传递到时提供更有用的输出 `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->反过来，调用 `toJSON` 传递给它的对象的方法。 ) ，而原始的 Excel. Application 对象是 API 对象，则该 `toJSON` 方法返回一个简单的 JavaScript 对象 (类型为 `Excel.Interfaces.ApplicationData`<!-- -->) ，其中包含原始对象中任何已加载的子属性的浅表副本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ApplicationData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ApplicationData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 098f34c08363e39f0b430f789f2eaea6fcea4817
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49167135"
