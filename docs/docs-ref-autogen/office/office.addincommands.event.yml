### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: 事件对象作为参数传递给由无 UI 调用的外接程序函数 (不小于命令按钮)。 该对象允许外接程序确定单击了哪个按钮，并向主机发出信号说明已完成处理。
    remarks: |-
      有关详细支持信息, 请参阅[外接程序命令要求集](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets)。

      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: 受限的**[适用 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: 撰写或阅读
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      指示外接程序已完成由外接程序命令按钮或事件处理程序触发的处理。

      此方法必须在由外接程序命令 (由 xsi: type 属性设置为 ExecuteFunction 的 Action 元素定义) 调用的函数末尾调用。 调用此方法会向主机客户端发出信号，指示函数已完成并且它可以清理调用该函数所涉及的任何状态。 例如，如果用户在调用此方法之前关闭 Outlook，Outlook 将警告函数仍在执行。

      事件处理完成后，必须在由 Office.context.mailbox.addHandlerAsync 添加的事件处理程序中调用此方法。

      \[[API 集: 邮箱 1.3](/office/dev/add-ins/reference/javascript-api-for-office)\]
    remarks: |-
      **[最低权限级别](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: 受限的**[适用 Outlook 模式](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: 撰写或阅读

      邮箱1.3 没有参数, `options`而邮箱预览不支持`options`参数。

      #### <a name="examples"></a>示例

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: EventCompletedOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '可选。 一个对象, 用于指定事件完成时的行为选项。'
          type:
            - office.Office.AddinCommands.EventCompletedOptions
  - uid: office.Office.AddinCommands.Event.source
    summary: 有关触发调用此函数的控件的信息。
    remarks: |-
      仅在[要求集](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)邮箱1.3 和更高版本中的 Outlook 中支持此属性。

      #### <a name="examples"></a>示例

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source