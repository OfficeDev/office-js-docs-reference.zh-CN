### YamlMime:UniversalReference
items:
  - uid: 'office!Office.File:interface'
    summary: 表示与 Office 外接程序关联的文档文件。
    remarks: 在传递给 Document.getfileasync 方法的回调函数中使用 AsyncResult 属性访问 File 对象。
    name: Office.File
    fullName: Office.File
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.File#closeAsync:member(1)'
      - 'office!Office.File#getSliceAsync:member(1)'
      - 'office!Office.File#size:member'
      - 'office!Office.File#sliceCount:member'
  - uid: 'office!Office.File#closeAsync:member(1)'
    summary: 关闭文档文件。
    remarks: |-
      **要求集**：[文件](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      内存中不允许两个以上的文档；否则 Document.getFileAsync 操作将会失败。 处理完文件后，使用 File.closeAsync 方法关闭文件。

      在传递给 closeAsync 方法的回调函数中，您可以使用 AsyncResult 对象的属性返回以下信息。

      <table> <tr> <th>属性</th> <th>用于...</th> </tr> <tr> <td>AsyncResult.value</td> <td>始终返回 undefined，这是因为没有要检索的对象或数据。</td> </tr> <tr> <td>AsyncResult.status</td> <td>确定操作是成功还是失败。</td> </tr> <tr> <td>AsyncResult.error</td> <td>如果操作失败，则访问提供错误信息的 Error 对象。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</td> </tr> </table>
    name: closeAsync(callback)
    fullName: closeAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'closeAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.File#closeAsync~0:complex'
  - uid: 'office!Office.File#getSliceAsync:member(1)'
    summary: 返回指定的切片。
    remarks: |-
      **要求集**：[文件](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      在传递给 getSliceAsync 方法的回调函数中，您可以使用 AsyncResult 对象的属性返回以下信息。

      <table> <tr> <th>属性</th> <th>用于...</th> </tr> <tr> <td>AsyncResult.value</td> <td>访问 Slice 对象。</td> </tr> <tr> <td>AsyncResult.status</td> <td>确定操作是成功还是失败。</td> </tr> <tr> <td>AsyncResult.error</td> <td>如果操作失败，则访问提供错误信息的 Error 对象。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</td> </tr> </table>

      #### <a name="examples"></a>示例

      ```typescript
      // This sample shows how to get all the slices of a file. 
      // The asynchronous operation returns a Promise so it can be awaited.
      private getAllSlices(file: any): Promise<any> {
          var self = this;
          var isError = false;

          return new Promise(async (resolve, reject) => {
              var documentFileData = [];
              for (var sliceIndex = 0; (sliceIndex < file.sliceCount) && !isError; sliceIndex++) {
                  var sliceReadPromise = new Promise((sliceResolve, sliceReject) => {
                      file.getSliceAsync(sliceIndex, (asyncResult) => {
                          if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                              documentFileData = documentFileData.concat(asyncResult.value.data);
                              sliceResolve({
                                  IsSuccess: true,
                                  Data: documentFileData
                              });
                          } else {
                              file.closeAsync();
                              sliceReject({
                                  IsSuccess: false,
                                  ErrorMessage: `Error in reading the slice: ${sliceIndex} of the document`
                              });
                          }
                      });
                  });
                  await sliceReadPromise.catch((error) => {
                      isError = true;
                  });
              }

              if (isError || !documentFileData.length) {
                  reject('Error while reading document. Please try it again.');
                  return;
              }

              file.closeAsync();

              resolve({
                  IsSuccess: true,
                  Data: documentFileData
              });
          });
      }
      ```
    name: 'getSliceAsync(sliceIndex, callback)'
    fullName: 'getSliceAsync(sliceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSliceAsync(sliceIndex: number, callback?: (result: AsyncResult<Office.Slice>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sliceIndex
          description: Specifies the zero-based index of the slice to be retrieved. Required.
          type:
            - number
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. 结果`value`的属性为 "Office"[切片](xref:office!Office.Slice:interface)对象。'
          type:
            - 'office!Office.File#getSliceAsync~0:complex'
  - uid: 'office!Office.File#size:member'
    summary: 获取以字节为单位的文档文件大小。
    name: size
    fullName: size
    langs:
      - typeScript
    type: property
    syntax:
      content: 'size: number;'
      return:
        type:
          - number
  - uid: 'office!Office.File#sliceCount:member'
    summary: 获取文件分为的切片数。
    name: sliceCount
    fullName: sliceCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'sliceCount: number;'
      return:
        type:
          - number
references:
  - uid: 'office!Office.File#closeAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.File#getSliceAsync~0:complex'
    name: '(result: AsyncResult<Office.Slice>) => void'
    fullName: '(result: Office.AsyncResult<Office.Slice>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.Slice:interface'
        name: Office.Slice
        fullName: Office.Slice
      - name: '>) => void'
        fullName: '>) => void'