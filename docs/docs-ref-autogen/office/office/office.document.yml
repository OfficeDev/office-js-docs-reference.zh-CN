### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Document:interface'
    summary: 表示与外接程序交互的文档的抽象类。
    remarks: '**主机**： Excel、PowerPoint、Project、Word'
    name: Office.Document
    fullName: Office.Document
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Document#addHandlerAsync:member(1)'
      - 'office!Office.Document#addHandlerAsync:member(2)'
      - 'office!Office.Document#bindings:member'
      - 'office!Office.Document#customXmlParts:member'
      - 'office!Office.Document#getActiveViewAsync:member(1)'
      - 'office!Office.Document#getActiveViewAsync:member(2)'
      - 'office!Office.Document#getFileAsync:member(1)'
      - 'office!Office.Document#getFileAsync:member(2)'
      - 'office!Office.Document#getFilePropertiesAsync:member(1)'
      - 'office!Office.Document#getFilePropertiesAsync:member(2)'
      - 'office!Office.Document#getMaxResourceIndexAsync:member(1)'
      - 'office!Office.Document#getMaxResourceIndexAsync:member(2)'
      - 'office!Office.Document#getMaxTaskIndexAsync:member(1)'
      - 'office!Office.Document#getMaxTaskIndexAsync:member(2)'
      - 'office!Office.Document#getProjectFieldAsync:member(1)'
      - 'office!Office.Document#getProjectFieldAsync:member(2)'
      - 'office!Office.Document#getResourceByIndexAsync:member(1)'
      - 'office!Office.Document#getResourceByIndexAsync:member(2)'
      - 'office!Office.Document#getResourceFieldAsync:member(1)'
      - 'office!Office.Document#getResourceFieldAsync:member(2)'
      - 'office!Office.Document#getSelectedDataAsync:member(1)'
      - 'office!Office.Document#getSelectedDataAsync:member(2)'
      - 'office!Office.Document#getSelectedResourceAsync:member(1)'
      - 'office!Office.Document#getSelectedResourceAsync:member(2)'
      - 'office!Office.Document#getSelectedTaskAsync:member(1)'
      - 'office!Office.Document#getSelectedTaskAsync:member(2)'
      - 'office!Office.Document#getSelectedViewAsync:member(1)'
      - 'office!Office.Document#getSelectedViewAsync:member(2)'
      - 'office!Office.Document#getTaskAsync:member(1)'
      - 'office!Office.Document#getTaskAsync:member(2)'
      - 'office!Office.Document#getTaskByIndexAsync:member(1)'
      - 'office!Office.Document#getTaskByIndexAsync:member(2)'
      - 'office!Office.Document#getTaskFieldAsync:member(1)'
      - 'office!Office.Document#getTaskFieldAsync:member(2)'
      - 'office!Office.Document#getWSSUrlAsync:member(1)'
      - 'office!Office.Document#getWSSUrlAsync:member(2)'
      - 'office!Office.Document#goToByIdAsync:member(1)'
      - 'office!Office.Document#goToByIdAsync:member(2)'
      - 'office!Office.Document#mode:member'
      - 'office!Office.Document#removeHandlerAsync:member(1)'
      - 'office!Office.Document#removeHandlerAsync:member(2)'
      - 'office!Office.Document#setResourceFieldAsync:member(1)'
      - 'office!Office.Document#setResourceFieldAsync:member(2)'
      - 'office!Office.Document#setSelectedDataAsync:member(1)'
      - 'office!Office.Document#setSelectedDataAsync:member(2)'
      - 'office!Office.Document#setTaskFieldAsync:member(1)'
      - 'office!Office.Document#setTaskFieldAsync:member(2)'
      - 'office!Office.Document#settings:member'
      - 'office!Office.Document#url:member'
  - uid: 'office!Office.Document#addHandlerAsync:member(1)'
    summary: 为 Document 对象事件添加事件处理程序。
    remarks: |-
      **要求集**： [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      只要每个事件处理程序函数的名称是唯一的，您就可以为指定的事件类型添加多个事件处理程序。
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 对于 Document 对象事件，可将事件的参数指定为 `Office.EventType.Document.SelectionChanged` 或`Office.EventType.Document.ActiveViewChanged`<!-- -->，或此枚举的对应文本值。
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '要添加的事件处理程序函数，其唯一的参数的类型为[Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. 必需。'
          type:
            - any
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#addHandlerAsync~0:complex'
  - uid: 'office!Office.Document#addHandlerAsync:member(2)'
    summary: 为 Document 对象事件添加事件处理程序。
    remarks: |-
      **要求集**： [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      只要每个事件处理程序函数的名称是唯一的，您就可以为指定的事件类型添加多个事件处理程序。

      #### <a name="examples"></a>示例

      ```javascript
      // The following example adds an event handler for the SelectionChanged event of a document
      function addSelectionChangedEventHandler() {
          Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithDocument(eventArgs.document);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example adds a handler for the ResourceSelectionChanged event.
      // When the resource selection changes in the document, it gets the GUID of the selected resource.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
              });
          };

          // Get the GUID of the selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ResourceSelectionChanged
      // event handler in a Project add-in, see "Create your first task pane add-in
      // for Project 2013 by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example adds a handler for the TaskSelectionChanged event.
      // When the task selection changes in the document, it gets the GUID of the
      // selected task.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.TaskSelectionChanged,
                      getTaskGuid);
                  getTaskGuid();
              });
          };

          // Get the GUID of the selected task and display it in the add-in.
          function getTaskGuid() {
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
      ```javascript
      // The following code example adds a handler for the ViewSelectionChanged
      // event. When the active view changes, it gets the name and type of the active view.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  getActiveView();
              });
          };

          // Get the name and type of the active view and display it in the add-in.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, result.value.viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For an example that shows how to use a ViewSelectionChanged event handler in a
      // Project add-in, see "Create your first task pane add-in for Project 2013 by
      // using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.
      // When the active view changes, the handler checks the view type. It enables a button if the view is a resource
      // view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected
      // resource and displays it in the add-in.
      // The example assumes that your add-in has a reference to the jQuery library and that the following page controls
      // are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" disabled="disabled" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  // Add a ViewSelectionChanged event handler.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  $('#get-info').click(getResourceGuid);

                  // This example calls the handler on page load to get the active view
                  // of the default page.
                  getActiveView();
              });
          };

          // Activate the button based on the active view type of the document.
          // This is the ViewSelectionChanged event handler.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var viewType = result.value.viewType;
                          if (viewType == 6 ||   // ResourceForm
                              viewType == 7 ||   // ResourceSheet
                              viewType == 8 ||   // ResourceGraph
                              viewType == 15) {  // ResourceUsage
                              $('#get-info').removeAttr('disabled');
                          }
                          else {
                              $('#get-info').attr('disabled', 'disabled');
                          }
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,
      // see "Create your first task pane add-in for Project by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 对于 Document 对象事件，可将事件的参数指定为 `Office.EventType.Document.SelectionChanged` 或`Office.EventType.Document.ActiveViewChanged`<!-- -->，或此枚举的对应文本值。
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '要添加的事件处理程序函数，其唯一的参数的类型为[Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. 必需。'
          type:
            - any
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#addHandlerAsync~1:complex'
  - uid: 'office!Office.Document#bindings:member'
    summary: 获取提供对文档中定义的绑定的访问的对象。
    remarks: |-
      您不会直接在脚本中实例化 Document 对象。 若要调用 Document 对象的成员以便与当前文档或工作表交互，请使用脚本中的 `Office.context.document`。

      #### <a name="examples"></a>示例

      ```javascript
      function displayAllBindings() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - 'office!Office.Bindings:interface'
  - uid: 'office!Office.Document#customXmlParts:member'
    summary: 获取文档中表示自定义 XML 部件的对象。
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - 'office!Office.CustomXmlParts:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          function getCustomXmlParts(){
              Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
                  write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.Document#getActiveViewAsync:member(1)'
    summary: 返回演示文稿（编辑或读取）的当前视图的状态。
    remarks: |-
      **要求集**： [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)

      当视图更改时可以触发事件。
    name: 'getActiveViewAsync(options, callback)'
    fullName: 'getActiveViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是演示文稿的当前视图的状态。 返回的值可以是 "编辑" 或 "读取"。 "编辑" 对应于可在其中编辑幻灯片的任何视图，如 "普通" 或 "大纲视图"。 "读取" 对应于幻灯片放映或阅读视图。'
          type:
            - 'office!Office.Document#getActiveViewAsync~0:complex'
  - uid: 'office!Office.Document#getActiveViewAsync:member(2)'
    summary: 返回演示文稿（编辑或读取）的当前视图的状态。
    remarks: |-
      **要求集**： [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)

      当视图更改时可以触发事件。

      #### <a name="examples"></a>示例

      ```javascript
      function getFileView() {
          // Get whether the current view is edit or read.
          Office.context.document.getActiveViewAsync(function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage(asyncResult.value);
              }
          });
      }
      ```
    name: getActiveViewAsync(callback)
    fullName: getActiveViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是演示文稿的当前视图的状态。 返回的值可以是 "编辑" 或 "读取"。 "编辑" 对应于可在其中编辑幻灯片的任何视图，如 "普通" 或 "大纲视图"。 "读取" 对应于幻灯片放映或阅读视图。'
          type:
            - 'office!Office.Document#getActiveViewAsync~1:complex'
  - uid: 'office!Office.Document#getFileAsync:member(1)'
    summary: 以高达 4194304 字节 (4 MB) 的切片形式返回整个文档文件。 对于 iPad 上的外接程序，支持最高为65536的文件切片（64 KB）。 请注意，若指定文件切片的大小上限超出允许限制，则会导致一个“内部错误”故障。
    remarks: |-
      **要求集**：

      - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) （使用时`Office.FileType.Compressed`<!-- -->)

      - [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) （使用时`Office.FileType.Text`<!-- -->)

      对于在 iPad 之外的 office 主机应用程序中运行的外接程序，此 `getFileAsync` 方法支持获取最多为4194304字节（4 MB）的切片中的文件。 对于在 iPad 上的 Office 应用程序中运行的外接程序，此 `getFileAsync` 方法支持获取最高为65536（64 KB）的切片中的文件。

      `fileType`可以使用[Office 文件类型](xref:office!Office.FileType:enum)枚举或文本值指定该参数。 但可能的值因主机而异：

      *支持的 FileTypes，按平台* <table> <tr><th> </th><th> Windows 版 Office </th><th> Office 网页版 </th><th> iPad 版 Office </th><th> Mac 版 Office </th></tr> <tr><td><strong>Excel</strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong>PowerPoint</strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong>Word</strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>

      #### <a name="examples"></a>示例

      ```javascript
      // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.
      // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.
      function getDocumentAsCompressed() {
          Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
              function (result) {
                  if (result.status == "succeeded") {
                      // If the getFileAsync call succeeded, then
                      // result.value will return a valid File Object.
                      var myFile = result.value;
                      var sliceCount = myFile.sliceCount;
                      var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                      app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                      // Get the file slices.
                      getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
                  else {
                      app.showNotification("Error:", result.error.message);
                  }
          });
      }

      function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
          file.getSliceAsync(nextSlice, function (sliceResult) {
              if (sliceResult.status == "succeeded") {
                  if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                      return;
                  }

                  // Got one slice, store it in a temporary array.
                  // (Or you can do something else, such as
                  // send it to a third-party server.)
                  docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                  if (++slicesReceived == sliceCount) {
                    // All slices have been received.
                    file.closeAsync();
                    onGotAllSlices(docdataSlices);
                  }
                  else {
                      getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
              }
                  else {
                      gotAllSlices = false;
                      file.closeAsync();
                      app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                  }
          });
      }

      function onGotAllSlices(docdataSlices) {
          var docdata = [];
          for (var i = 0; i < docdataSlices.length; i++) {
              docdata = docdata.concat(docdataSlices[i]);
          }

          var fileContent = new String();
          for (var j = 0; j < docdata.length; j++) {
              fileContent += String.fromCharCode(docdata[j]);
          }

          // Now all the file content is stored in 'fileContent' variable,
          // you can do something with it, such as print, fax...
      }

      // The following example gets the document in PDF format.
      Office.context.document.getFileAsync(Office.FileType.Pdf,
          function(result) {
              if (result.status == "succeeded") {
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                  // Now, you can call getSliceAsync to download the files,
                  // as described in the previous code segment (compressed format).
                  
                  myFile.closeAsync();
              }
              else {
                  app.showNotification("Error:", result.error.message);
              }
      }
      );
      ```
    name: 'getFileAsync(fileType, options, callback)'
    fullName: 'getFileAsync(fileType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: 将返回文件的格式
          type:
            - 'office!Office.FileType:enum'
        - id: options
          description: 提供用于设置要将文档拆分成的扇区大小的选项。
          type:
            - 'office!Office.GetFileOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是 File 对象。'
          type:
            - 'office!Office.Document#getFileAsync~0:complex'
  - uid: 'office!Office.Document#getFileAsync:member(2)'
    summary: 以高达 4194304 字节 (4 MB) 的切片形式返回整个文档文件。 对于 iPad 上的外接程序，支持最高为65536的文件切片（64 KB）。 请注意，若指定文件切片的大小上限超出允许限制，则会导致一个“内部错误”故障。
    remarks: |-
      **要求集**：

      - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) （使用时`Office.FileType.Compressed`<!-- -->)

      - [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) （使用时`Office.FileType.Text`<!-- -->)

      对于在 iPad 之外的 office 主机应用程序中运行的外接程序，此 `getFileAsync` 方法支持获取最多为4194304字节（4 MB）的切片中的文件。 对于在 iPad 应用程序上运行的外接程序，此 `getFileAsync` 方法支持获取最高为65536（64 KB）的切片中的文件。

      `fileType`可以使用[Office 文件类型](xref:office!Office.FileType:enum)枚举或文本值指定该参数。 但可能的值因主机而异：

      *支持的 FileTypes，按平台* <table> <tr><th> </th><th> Windows 版 Office </th><th> Office 网页版 </th><th> iPad 版 Office </th><th> Mac 版 Office </th></tr> <tr><td><strong>Excel</strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong>PowerPoint</strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong>Word</strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
    name: 'getFileAsync(fileType, callback)'
    fullName: 'getFileAsync(fileType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: 将返回文件的格式
          type:
            - 'office!Office.FileType:enum'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是 File 对象。'
          type:
            - 'office!Office.Document#getFileAsync~1:complex'
  - uid: 'office!Office.Document#getFilePropertiesAsync:member(1)'
    summary: 获取当前文档的文件属性。
    remarks: |-
      **要求集**：[不在集合中](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      您可以使用 url 属性获取文件的 URL`asyncResult.value.url`<!-- -->.
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: 'getFilePropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是文件的属性（URL 位于`asyncResult.value.url`<!-- -->).'
          type:
            - 'office!Office.Document#getFilePropertiesAsync~0:complex'
  - uid: 'office!Office.Document#getFilePropertiesAsync:member(2)'
    summary: 获取当前文档的文件属性。
    remarks: |-
      **要求集**：[不在集合中](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      您可以使用 url 属性获取文件的 URL`asyncResult.value.url`<!-- -->.

      #### <a name="examples"></a>示例

      ```javascript
      // To read the URL of the current file, you need to write a callback function that returns the URL.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that returns the value of the file's URL
      //    to the callback parameter of the getFilePropertiesAsync method.
      // 2. Display the value on the add-in's page.
      function getFileUrl() {
          // Get the URL of the current file.
          Office.context.document.getFilePropertiesAsync(function (asyncResult) {
              var fileUrl = asyncResult.value.url;
              if (fileUrl == "") {
                  showMessage("The file hasn't been saved yet. Save the file and try again");
              }
              else {
                  showMessage(fileUrl);
              }
          });
      }
      ```
    name: getFilePropertiesAsync(callback)
    fullName: getFilePropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是文件的属性（URL 位于`asyncResult.value.url`<!-- -->).'
          type:
            - 'office!Office.Document#getFilePropertiesAsync~1:complex'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync:member(1)'
    summary: |-
      仅限项目文档。 获取当前项目中的资源集合的最大索引。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'getMaxResourceIndexAsync(options, callback)'
    fullName: 'getMaxResourceIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是当前项目的资源集合中的最大索引号。'
          type:
            - 'office!Office.Document#getMaxResourceIndexAsync~0:complex'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync:member(2)'
    summary: |-
      仅限项目文档。 获取当前项目中的资源集合的最大索引。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: getMaxResourceIndexAsync(callback)
    fullName: getMaxResourceIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection 
          // of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync
          // method to get each resource GUID. The example assumes that your add-in has a reference to the 
          // jQuery library and that the following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是当前项目的资源集合中的最大索引号。'
          type:
            - 'office!Office.Document#getMaxResourceIndexAsync~1:complex'
  - uid: 'office!Office.Document#getMaxTaskIndexAsync:member(1)'
    summary: |-
      仅限项目文档。 获取当前项目中的任务集合的最大索引。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'getMaxTaskIndexAsync(options, callback)'
    fullName: 'getMaxTaskIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是当前项目的任务集合中的最大索引号。'
          type:
            - 'office!Office.Document#getMaxTaskIndexAsync~0:complex'
  - uid: 'office!Office.Document#getMaxTaskIndexAsync:member(2)'
    summary: |-
      仅限项目文档。 获取当前项目中的任务集合的最大索引。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: getMaxTaskIndexAsync(callback)
    fullName: getMaxTaskIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the maximum index
          // of the collection of tasks in the current project. Then it uses the returned value
          // with the getTaskByIndexAsync method to get each task GUID.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是当前项目的任务集合中的最大索引号。'
          type:
            - 'office!Office.Document#getMaxTaskIndexAsync~1:complex'
  - uid: 'office!Office.Document#getProjectFieldAsync:member(1)'
    summary: 仅限项目文档。 获取项目域（例如 ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: 'getProjectFieldAsync(fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: 项目级别字段。
          type:
            - number
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含 `fieldValue` 属性，它表示指定字段的值。'
          type:
            - 'office!Office.Document#getProjectFieldAsync~0:complex'
  - uid: 'office!Office.Document#getProjectFieldAsync:member(2)'
    summary: 仅限项目文档。 获取项目域（例如 ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, callback)'
    fullName: 'getProjectFieldAsync(fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example gets the values of three specified fields for the active project, 
          // and then displays the values in the add-in.
          // The example calls getProjectFieldAsync recursively, after the previous call returns successfully.
          // It also tracks the calls to determine when all calls are sent.
          // The example assumes your add-in has a reference to the jQuery library and that the 
          // following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information for the active project.
                      getProjectInformation();
                  });
              };

              // Get the specified fields for the active project.
              function getProjectInformation() {
                  var fields =
                      [Office.ProjectProjectFields.Start, 
                       Office.ProjectProjectFields.Finish, 
                       Office.ProjectProjectFields.GUID];
                  var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == fields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }
                      else {
                          Office.context.document.getProjectFieldAsync(
                              fields[index],
                              function (result) {

                                  // If the call is successful, get the field value and then get the next field.
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: fieldId
          description: 项目级别字段。
          type:
            - number
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含 `fieldValue` 属性，它表示指定字段的值。'
          type:
            - 'office!Office.Document#getProjectFieldAsync~1:complex'
  - uid: 'office!Office.Document#getResourceByIndexAsync:member(1)'
    summary: |-
      仅限项目文档。 获取资源集合中具有指定索引的资源的 GUID。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getResourceByIndexAsync~0:complex'
  - uid: 'office!Office.Document#getResourceByIndexAsync:member(2)'
    summary: |-
      仅限项目文档。 获取资源集合中具有指定索引的资源的 GUID。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'getResourceByIndexAsync(resourceIndex, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource
          // collection, and then calls getResourceByIndexAsync to get the GUID for each resource.
          // The example assumes that your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceIndex
          description: The index of the resource in the collection of resources for the project.
          type:
            - number
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getResourceByIndexAsync~1:complex'
  - uid: 'office!Office.Document#getResourceFieldAsync:member(1)'
    summary: 仅限项目文档。 获取所提供资源 Id 的资源域。（Ex）
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: 或者是一个资源 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 资源域。
          type:
            - number
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getResourceFieldAsync~0:complex'
  - uid: 'office!Office.Document#getResourceFieldAsync:member(2)'
    summary: 仅限项目文档。 获取所提供资源 Id 的资源域。（Ex）
    name: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource
          // that's currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: 或者是一个资源 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 资源域。
          type:
            - number
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getResourceFieldAsync~1:complex'
  - uid: 'office!Office.Document#getSelectedDataAsync:member(1)'
    summary: 读取包含在文档的当前选择中的数据。
    remarks: |-
      **要求集**：

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) （使用时`Office.CoercionType.Html`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) （使用时`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) （使用时`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) （使用时`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) （使用时`Office.CoercionType.Text`<!-- -->)

      在传递给 getSelectedDataAsync 方法的回调函数中，您可以使用 AsyncResult 对象的属性返回以下信息。

      <table> <tr> <th>属性</th> <th>用于...</th> </tr> <tr> <td>AsyncResult.value</td> <td>始终返回 undefined，这是因为没有要检索的对象或数据。</td> </tr> <tr> <td>AsyncResult.status</td> <td>确定操作是成功还是失败。</td> </tr> <tr> <td>AsyncResult.error</td> <td>如果操作失败，则访问提供错误信息的 Error 对象。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</td> </tr> </table>

      [CoercionType](xref:office!Office.CoercionType:enum)参数的可能值因主机而异。

      <table> <tr> <th>Host</th> <th>支持的 coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project 和 Word</td> <td>`Office.CoercionType.Text`类似</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Matrix`（数组的数组）</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Table`（TableData 对象）</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`（Office Open XML）</td> </tr> <tr> <td>PowerPoint 在 web 和 Windows 上</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint 和 Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a>示例

      ```javascript
      // The following example uses the getSelectedDataAsync method of the Document object to retrieve the
      // user's current selection as text, and then display it in the add-in's page.

      // Display the user's current selection.
      function showSelection() {
          Office.context.document.getSelectedDataAsync(
              "text",                        // coercionType
              {valueFormat: "unformatted",   // valueFormat
              filterType: "all"},            // filterType
              function (result) {            // callback
                  var dataValue; 
                  dataValue = result.value;
                  write('Selected data is: ' + dataValue);
              });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To read the value of the current selection, you need to write a callback function that reads the selection.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that reads the value of the current selection
      //    to the callback parameter of the getSelectedDataAsync method.
      // 2. Read the selection as text, unformatted, and not filtered.
      // 3. Display the value on the add-in's page.
      function getText() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
              { valueFormat: "unformatted", filterType: "all" },
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  } 
                  else {
                      // Get selected data.
                      var dataValue = asyncResult.value; 
                      write('Selected data is ' + dataValue);
                  }            
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example gets the values of the selected cells. It uses the optional
      // asyncContext parameter to pass some text to the callback function.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page controls are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getSelectedText);
              });
          };

          // Get the text from the selected cells in the document, and display it in the add-in.
          function getSelectedText() {
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text,
                  {asyncContext: 'Some related info'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'Selected text: {0}<br/>Passed info: {1}',
                              result.value, result.asyncContext);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: 要返回的数据结构的类型。 有关每个主机支持的强制类型，请参阅 "备注" 部分。
          type:
            - 'office!Office.CoercionType:enum'
        - id: options
          description: 提供用于自定义要返回的数据及其格式的选项。
          type:
            - 'office!Office.GetSelectedDataOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性为当前所选内容中的数据。 这是使用 coercionType 参数指定的数据结构或格式返回的。 （请参阅备注，了解有关数据强制的详细信息。）'
          type:
            - 'office!Office.Document#getSelectedDataAsync~0:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Document#getSelectedDataAsync:member(2)'
    summary: 读取包含在文档的当前选择中的数据。
    remarks: |-
      **要求集**：

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) （使用时`Office.CoercionType.Html`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) （使用时`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) （使用时`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) （使用时`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) （使用时`Office.CoercionType.Text`<!-- -->)

      在传递给 getSelectedDataAsync 方法的回调函数中，您可以使用 AsyncResult 对象的属性返回以下信息。

      <table> <tr> <th>属性</th> <th>用于...</th> </tr> <tr> <td>AsyncResult.value</td> <td>始终返回 undefined，这是因为没有要检索的对象或数据。</td> </tr> <tr> <td>AsyncResult.status</td> <td>确定操作是成功还是失败。</td> </tr> <tr> <td>AsyncResult.error</td> <td>如果操作失败，则访问提供错误信息的 Error 对象。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</td> </tr> </table>

      [CoercionType](xref:office!Office.CoercionType:enum)参数的可能值因主机而异。

      <table> <tr> <th>Host</th> <th>支持的 coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project 和 Word</td> <td>`Office.CoercionType.Text`类似</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Matrix`（数组的数组）</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Table`（TableData 对象）</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`（Office Open XML）</td> </tr> <tr> <td>PowerPoint 在 web 和 Windows 上</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint 和 Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: 要返回的数据结构的类型。 有关每个主机支持的强制类型，请参阅 "备注" 部分。
          type:
            - 'office!Office.CoercionType:enum'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性为当前所选内容中的数据。 这是使用 coercionType 参数指定的数据结构或格式返回的。 （请参阅备注，了解有关数据强制的详细信息。）'
          type:
            - 'office!Office.Document#getSelectedDataAsync~1:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Document#getSelectedResourceAsync:member(1)'
    summary: 仅限项目文档。 获取当前选定的资源的 Id。
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: 'getSelectedResourceAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getSelectedResourceAsync~0:complex'
  - uid: 'office!Office.Document#getSelectedResourceAsync:member(2)'
    summary: 仅限项目文档。 获取当前选定的资源的 Id。
    name: getSelectedResourceAsync(callback)
    fullName: getSelectedResourceAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's 
          // currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page controls are
          // defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getSelectedResourceAsync~1:complex'
  - uid: 'office!Office.Document#getSelectedTaskAsync:member(1)'
    summary: 仅限项目文档。 获取当前所选任务的 Id。
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: 'getSelectedTaskAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getSelectedTaskAsync~0:complex'
  - uid: 'office!Office.Document#getSelectedTaskAsync:member(2)'
    summary: 仅限项目文档。 获取当前所选任务的 Id。
    name: getSelectedTaskAsync(callback)
    fullName: getSelectedTaskAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets task properties by calling getTaskAsync.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的资源的 GUID。'
          type:
            - 'office!Office.Document#getSelectedTaskAsync~1:complex'
  - uid: 'office!Office.Document#getSelectedViewAsync:member(1)'
    summary: 仅限项目文档。 获取当前选定的视图类型（Ex）。 甘特图）和视图名称。
    name: 'getSelectedViewAsync(options, callback)'
    fullName: 'getSelectedViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含以下属性： `viewName` 视图的名称，作为 ProjectViewTypes 常量。 `viewType`-视图的类型，作为 ProjectViewTypes 常量的整数值。'
          type:
            - 'office!Office.Document#getSelectedViewAsync~0:complex'
  - uid: 'office!Office.Document#getSelectedViewAsync:member(2)'
    summary: 仅限项目文档。 获取当前选定的视图类型（Ex）。 甘特图）和视图名称。
    name: getSelectedViewAsync(callback)
    fullName: getSelectedViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls adds a ViewSelectionChanged event handler that
          // calls getSelectedViewAsync to get the name and type of the active view in the document.
          // The example assumes your add-in has a reference to the jQuery library and that
          // the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      Office.context.document.addHandlerAsync(
                          Office.EventType.ViewSelectionChanged,
                          getActiveView);
                      getActiveView();
                  });
              };

              // Get the active view's name and type.
              function getActiveView() {
                  Office.context.document.getSelectedViewAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var output = String.format(
                                  'View name: {0}<br/>View type: {1}',
                                  result.value.viewName, viewType);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含以下属性： `viewName` 视图的名称，作为 ProjectViewTypes 常量。 `viewType`-视图的类型，作为 ProjectViewTypes 常量的整数值。'
          type:
            - 'office!Office.Document#getSelectedViewAsync~1:complex'
  - uid: 'office!Office.Document#getTaskAsync:member(1)'
    summary: 仅限项目文档。 获取给定 taskId 的任务名称、WSS 任务 Id 和 ResourceNames。
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: 'getTaskAsync(taskId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: 或者是任务 Id 的字符串或值。
          type:
            - string
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含以下属性： `taskName` -任务的名称。 `wssTaskId`-同步的 SharePoint 任务列表中任务的 ID。 如果项目未与 SharePoint 任务列表同步，则值为 0。 `resourceNames`-分配给任务的资源的名称的逗号分隔列表。'
          type:
            - 'office!Office.Document#getTaskAsync~0:complex'
  - uid: 'office!Office.Document#getTaskAsync:member(2)'
    summary: 仅限项目文档。 获取给定 taskId 的任务名称、WSS 任务 Id 和 ResourceNames。
    name: 'getTaskAsync(taskId, callback)'
    fullName: 'getTaskAsync(taskId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the task GUID of the currently
          // selected task. Then it calls getTaskAsync to get the properties for the task that are
          // available from the JavaScript API for Office.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: 或者是任务 Id 的字符串或值。
          type:
            - string
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含以下属性： `taskName` -任务的名称。 `wssTaskId`-同步的 SharePoint 任务列表中任务的 ID。 如果项目未与 SharePoint 任务列表同步，则值为 0。 `resourceNames`-分配给任务的资源的名称的逗号分隔列表。'
          type:
            - 'office!Office.Document#getTaskAsync~1:complex'
  - uid: 'office!Office.Document#getTaskByIndexAsync:member(1)'
    summary: |-
      仅限项目文档。 获取任务集合中具有指定索引的任务的 GUID。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'getTaskByIndexAsync(taskIndex, options, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的任务的 GUID。'
          type:
            - 'office!Office.Document#getTaskByIndexAsync~0:complex'
  - uid: 'office!Office.Document#getTaskByIndexAsync:member(2)'
    summary: |-
      仅限项目文档。 获取任务集合中具有指定索引的任务的 GUID。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'getTaskByIndexAsync(taskIndex, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the
          // maximum index in the project's task collection, and then
          // calls getTaskByIndexAsync to get the GUID for each task.
          // The example assumes that your add-in has a reference to the
          // jQuery library and that the following page controls are defined
          // in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskIndex
          description: The index of the task in the collection of tasks for the project.
          type:
            - number
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是作为字符串的任务的 GUID。'
          type:
            - 'office!Office.Document#getTaskByIndexAsync~1:complex'
  - uid: 'office!Office.Document#getTaskFieldAsync:member(1)'
    summary: 仅限项目文档。 获取所提供任务 Id 的任务域。（例如， 起始日期）。
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: 或者是任务 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 任务域。
          type:
            - number
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含 `fieldValue` 属性，它表示指定字段的值。'
          type:
            - 'office!Office.Document#getTaskFieldAsync~0:complex'
  - uid: 'office!Office.Document#getTaskFieldAsync:member(2)'
    summary: 仅限项目文档。 获取所提供任务 Id 的任务域。（例如， 起始日期）。
    name: 'getTaskFieldAsync(taskId, fieldId, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected task.
              function getTaskFields(taskGuid) {
                  var output = '';
                  var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];
                  var fieldValues = ['Priority: ', '% Complete: '];
                  var index = 0;
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // Get the field value. If the call is successful, then get the next field.
                      else {
                          Office.context.document.getTaskFieldAsync(
                              taskGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: 或者是任务 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 任务域。
          type:
            - number
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含 `fieldValue` 属性，它表示指定字段的值。'
          type:
            - 'office!Office.Document#getTaskFieldAsync~1:complex'
  - uid: 'office!Office.Document#getWSSUrlAsync:member(1)'
    summary: 仅限项目文档。 获取任务列表的 WSS Url 和列表名称时，MPP 也将同步。
    name: 'getWSSUrlAsync(options, callback)'
    fullName: 'getWSSUrlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含以下属性： `listName` -同步的 SharePoint 任务列表的名称。 `serverUrl`-同步的 SharePoint 任务列表的 URL。'
          type:
            - 'office!Office.Document#getWSSUrlAsync~0:complex'
  - uid: 'office!Office.Document#getWSSUrlAsync:member(2)'
    summary: 仅限项目文档。 获取任务列表的 WSS Url 和列表名称时，MPP 也将同步。
    name: getWSSUrlAsync(callback)
    fullName: getWSSUrlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性包含以下属性： `listName` -同步的 SharePoint 任务列表的名称。 `serverUrl`-同步的 SharePoint 任务列表的 URL。'
          type:
            - 'office!Office.Document#getWSSUrlAsync~1:complex'
  - uid: 'office!Office.Document#goToByIdAsync:member(1)'
    summary: 转到文档中指定的对象或位置。
    remarks: |-
      **要求集**：[不在集合中](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      PowerPoint 不支持母版视图中的 Document.gotobyidasync 方法。

      SelectionMode 选项导致的行为因主机而异：

      在 Excel 中： `Office.SelectionMode.Selected` 选择绑定或已命名项目中的所有内容。 Office.SelectionMode.None 对于文本绑定，选择单元格；对于矩阵绑定、表绑定和已命名的项目，选择第一个数据单元格（不是表格标题行中的第一个单元格）。

      在 PowerPoint 中： `Office.SelectionMode.Selected` 选择幻灯片标题或幻灯片上的第一个文本框。 `Office.SelectionMode.None`不会选择任何内容。

      在 Word 中： `Office.SelectionMode.Selected` 选择绑定中的所有内容。 Office.SelectionMode.None 对于文本绑定，将光标移到文本开头；对于矩阵绑定和表绑定，选择第一个数据单元格（不是表格标题行中的第一个单元格）。
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: 'goToByIdAsync(id, goToType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 要转到的对象或位置的标识符。
          type:
            - string | number
        - id: goToType
          description: 要转到的位置类型。
          type:
            - 'office!Office.GoToType:enum'
        - id: options
          description: 提供用于决定是否要选择导航到的位置的选项。
          type:
            - 'office!Office.GoToByIdOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是当前视图。'
          type:
            - 'office!Office.Document#goToByIdAsync~0:complex'
  - uid: 'office!Office.Document#goToByIdAsync:member(2)'
    summary: 转到文档中指定的对象或位置。
    remarks: |-
      **要求集**：[不在集合中](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      PowerPoint 不支持母版视图中的 Document.gotobyidasync 方法。

      SelectionMode 选项导致的行为因主机而异：

      在 Excel 中： `Office.SelectionMode.Selected` 选择绑定或已命名项目中的所有内容。 Office.SelectionMode.None 对于文本绑定，选择单元格；对于矩阵绑定、表绑定和已命名的项目，选择第一个数据单元格（不是表格标题行中的第一个单元格）。

      在 PowerPoint 中： `Office.SelectionMode.Selected` 选择幻灯片标题或幻灯片上的第一个文本框。 `Office.SelectionMode.None`不会选择任何内容。

      在 Word 中： `Office.SelectionMode.Selected` 选择绑定中的所有内容。 Office.SelectionMode.None 对于文本绑定，将光标移到文本开头；对于矩阵绑定和表绑定，选择第一个数据单元格（不是表格标题行中的第一个单元格）。

      #### <a name="examples"></a>示例

      ```javascript
      // Go to a binding by id (Word and Excel)
      // The following example shows how to:
      // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.
      // 2. Specify that binding as the binding to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value on the add-in's page.
      function gotoBinding() {
          // Create a new table binding for the selected table.
          Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
          if (asyncResult.status == "failed") {
                    showMessage("Action failed with error: " + asyncResult.error.message);
                }
                else {
                    showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
                }
          });

          // Go to binding by id.
          Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to a table in a spreadsheet (Excel)
      // The following example shows how to:
      // 1. Specify a table by name as the table to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToTable() {
          Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to the currently selected slide by id (PowerPoint)
      // The following example shows how to:
      // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.
      // 2. Specify the returned id as the slide to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value of the stringified JSON object returned by asyncResult.value,
      //    which contains information about the selected slides, on the add-in's page.
      var firstSlideId = 0;
      function gotoSelectedSlide() {
          //Get currently selected slide's id
          Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  firstSlideId = asyncResult.value.slides[0].id;
                  app.showNotification(JSON.stringify(asyncResult.value));
              }
          });
          //Go to slide by id.
          Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  app.showNotification("Navigation successful");
              }
          });
      }

      // Go to slide by index (PowerPoint)
      // The following example shows how to:
      // 1. Specify the index of the first, last, previous, or next slide to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToSlideByIndex() {
          var goToFirst = Office.Index.First;
          var goToLast = Office.Index.Last;
          var goToPrevious = Office.Index.Previous;
          var goToNext = Office.Index.Next;

          Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }
      ```
    name: 'goToByIdAsync(id, goToType, callback)'
    fullName: 'goToByIdAsync(id, goToType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: 要转到的对象或位置的标识符。
          type:
            - string | number
        - id: goToType
          description: 要转到的位置类型。
          type:
            - 'office!Office.GoToType:enum'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性是当前视图。'
          type:
            - 'office!Office.Document#goToByIdAsync~1:complex'
  - uid: 'office!Office.Document#mode:member'
    summary: 获取文档所处的模式。
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - 'office!Office.DocumentMode:enum'
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          function displayDocumentMode() {
              write(Office.context.document.mode);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
          ```javascript
          // The following example initializes the add-in and then gets properties of the
          // Document object that are available in the context of a Project document.
          // A Project document is the opened, active project. To access members of the
          // ProjectDocument object, use the Office.context.document object as shown in
          // the code examples for ProjectDocument methods and events.
          // The example assumes your add-in has a reference to the jQuery library and
          // that the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information about the document.
                      showDocumentProperties();
                  });
              };

              // Get the document mode and the URL of the active project.
              function showDocumentProperties() {
                  var output = String.format(
                      'The document mode is {0}.<br/>The URL of the active project is {1}.',
                      Office.context.document.mode,
                      Office.context.document.url);
                  $('#message').html(output);
              }
          })();
          ```
  - uid: 'office!Office.Document#removeHandlerAsync:member(1)'
    summary: 删除指定事件类型的事件处理程序。
    remarks: '**要求集**： [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 事件类型。 For document 可以是 "SelectionChanged" 或 "Document.activeviewchanged"。
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: 提供用于确定要删除的事件处理程序或处理程序的选项。
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#removeHandlerAsync~0:complex'
  - uid: 'office!Office.Document#removeHandlerAsync:member(2)'
    summary: 删除指定事件类型的事件处理程序。
    remarks: |-
      **要求集**： [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      #### <a name="examples"></a>示例

      ```javascript
      // The following example removes the event handler named 'MyHandler'.
      function removeSelectionChangedEventHandler() {
          Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
      }

      function MyHandler(eventArgs) {
          doSomethingWithDocument(eventArgs.document);
      }
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the
      // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.
      // When a resource is selected in a resource view, the handler displays the
      // resource GUID. When the handler is removed, the GUID is not displayed.
      // The example assumes that your add-in has a reference to the jQuery library and
      // that the following page control is defined in the content div in the page body:
      // <input id="remove-handler" type="button" value="Remove handler" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
                  $('#remove-handler').click(removeEventHandler);
              });
          };

          // Remove the event handler.
          function removeEventHandler() {
              Office.context.document.removeHandlerAsync(
                  Office.EventType.ResourceSelectionChanged,
                  {handler:getResourceGuid,
                  asyncContext:'The handler is removed.'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#remove-handler').attr('disabled', 'disabled');
                          $('#message').html(result.asyncContext);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 事件类型。 For document 可以是 "SelectionChanged" 或 "Document.activeviewchanged"。
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#removeHandlerAsync~1:complex'
  - uid: 'office!Office.Document#setResourceFieldAsync:member(1)'
    summary: |-
      仅限项目文档。 设置指定资源 Id 的资源域。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: 或者是一个资源 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 资源域。
          type:
            - number
        - id: fieldValue
          description: 目标字段的值。
          type:
            - string | number | boolean | object
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#setResourceFieldAsync~0:complex'
  - uid: 'office!Office.Document#setResourceFieldAsync:member(2)'
    summary: |-
      仅限项目文档。 设置指定资源 Id 的资源域。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's
          // currently selected in a resource view. Then it sets two resource field values by calling
          // setResourceFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync
          // method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setResourceInfo);
                  });
              };

              // Get the GUID of the resource, and then get the resource fields.
              function setResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          setResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected resource.
              function setResourceFields(resourceGuid) {
                  var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];
                  var fieldValues = [.28, 'Notes for the resource.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setResourceFieldAsync(
                          resourceGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: 或者是一个资源 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 资源域。
          type:
            - number
        - id: fieldValue
          description: 目标字段的值。
          type:
            - string | number | boolean | object
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#setResourceFieldAsync~1:complex'
  - uid: 'office!Office.Document#setSelectedDataAsync:member(1)'
    summary: 将指定的数据写入当前所选内容。
    remarks: |-
      **要求集**：

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->（使用时`Office.CoercionType.Html`<!-- -->)

      - [ImageCoercion 1.1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) （使用时`Office.CoercionType.Image`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) （使用时`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) （使用时`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) （使用时`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) （使用时`Office.CoercionType.Text`<!-- -->)

      - [ImageCoercion 1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) （使用时`Office.CoercionType.XmlSvg`<!-- -->)

      **特定于应用程序的行为**

      以下特定于应用程序的操作在向选定内容中写入数据时适用。

      <table> <tr> <td>Word</td> <td>如果没有选定内容且插入点位于有效位置，则在 `data` 插入点插入指定的</td> <td>如果 `data` 是字符串，则插入指定的文本。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是数组的数组（"矩阵"）或 TableData 对象，则插入一个新的 Word 表。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 为 HTML，则插入指定的 html。 （**重要说明**：如果插入的 HTML 中的任何 HTML 无效，则 Word 不会引发错误。 Word 将尽可能多地插入 HTML，并忽略任何无效数据。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是 Office OPEN xml，则插入指定的 xml。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是 base64 编码的图像流，则插入指定的图像。</td> </tr> <tr> <td></td> <td>如果有选定内容</td> <td>它将被替换为与 `data` 上述相同规则相同的指定项。</td> </tr> <tr> <td></td> <td>插入图像</td> <td>插入的图像以内嵌方式放置。 imageLeft 和 imageTop 参数将被忽略。 图像的纵横比始终被锁定。 如果只给定 imageWidth 参数或只给定 imageHeight 参数，则另一个值将自动扩展以保留原始纵横比。</td> </tr>

      <tr> <td>Excel</td> <td>如果选择了单个单元格</td> <td>如果 `data` 是字符串，则将指定的文本作为当前单元格的值插入。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是数组的数组（"矩阵"），则插入一组指定的行和列（如果不会覆盖周围单元格中的其他任何数据）。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是 TableData 对象，则插入具有一组指定的行和标题的新 Excel 表（如果不会覆盖周围单元格中的其他任何数据）。</td> </tr> <tr> <td></td> <td>如果选择了多个单元格</td> <td>If the shape does not match the shape of `data`<!-- -->，则会返回错误。</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->，则根据中的值更新所选单元格的值`data`<!-- -->.</td> </tr> <tr> <td></td> <td>插入图像</td> <td>插入的图像为浮动图像。 imageLeft 和 imageTop 位置参数是相对于当前选定的单元格而言的。 允许 imageLeft 和 imageTop 的值为负数，将由 Excel 重新调整在工作表内放置的图像位置。 除非 imageWidth 和 imageHeight 参数均已提供，否则将锁定图像的纵横比。 如果只给定 imageWidth 参数或只给定 imageHeight 参数，则另一个值将自动扩展以保留原始纵横比。</td> </tr> <tr> <td></td> <td>其他所有情况</td> <td>返回错误。</td> </tr>

      <tr> <td>Excel 网页版</td> <td>除了上述 Excel 所述的行为之外，在 Excel 网页版中写入数据时也适用这些限制</td> <td>对此方法的单个调用中，可以使用参数写入工作表的单元格总数 `data` 不能超过20000。</td> </tr> <tr> <td></td> <td></td> <td>传递给参数的格式组的数量 `cellFormat` 不能超过100。 每个格式设置组由应用于特定单元格范围的一组格式组成。</td> </tr>

      <tr> <td>PowerPoint</td> <td>插入图像</td> <td>插入的图像为浮动图像。 Position imageLeft 和 imageTop 参数是可选的，但如果提供，则应同时存在。 如果提供单个值，则它将被忽略。 允许 imageLeft 和 imageTop 的值为负数，且可以将图像放置在幻灯片的外部。 如果未给定任何可选参数，并且幻灯片有一个占位符，则图像将替换幻灯片中的占位符。 除非 imageWidth和 imageHeight 参数均已提供，否则将锁定图像纵横比。 如果只给定 imageWidth 参数或只给定 imageHeight 参数，则另一个值将自动扩展以保留原始纵横比。</td> </tr> </table>

      **类型特定的行为**

      <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>（仅限 Excel）：在16.0.11526.10000 和16.0.12309.10000 之间的 Excel 内部版本中，SVG 插入的大小限制为64KB。</td> </tr> </table>

      **Hosts**

      [CoercionType](xref:office!Office.CoercionType:enum)参数的可能值因主机而异。

      <table> <tr> <th>Host</th> <th>支持的 coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project 和 Word</td> <td>`Office.CoercionType.Text`类似</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Matrix`（数组的数组）</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Table`（TableData 对象）</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`（Office Open XML）</td> </tr> <tr> <td>PowerPoint 在 web 和 Windows 上</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint 和 Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a>示例

      ```javascript
      // The following example sets the selected text or cell to "Hello World!", 
      // and if that fails, displays the value of the error.message property.
      function writeText() {
          Office.context.document.setSelectedDataAsync("Hello World!",
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write
      // to a selection. The following example writes data as an array of three rows of two columns, 
      // specifying the coercionType as `Matrix` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeMatrix() {
          Office.context.document.setSelectedDataAsync(
              [["Red", "Rojo"], ["Green", "Verde"], ["Blue", "Azul"]],
              {coercionType: Office.CoercionType.Matrix}
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // The following example writes data as a one column table with a header and four rows, 
      // specifying the coercionType as `Table` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeTable() {
          // Build table.
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];

          // Write table.
          Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},
              function (result) {
                  var error = result.error
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`
      // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.context.document.setSelectedDataAsync(
              "<b>Hello</b> World!", {coercionType: Office.CoercionType.Html}, function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write('Error: ' + asyncResult.error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType
      // parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertPictureAtSelection(base64EncodedImageStr) {

          Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {
              coercionType: Office.CoercionType.Image,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 100,
              imageHeight: 100
          },
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          });
      }

      // In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the 
      // coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertSvgAtSelection(base64EncodedImageStr) {
          Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {
              coercionType: Office.CoercionType.XmlSvg,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 400
          },
              function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      console.log(asyncResult.error.message);
                  }
              });
      }
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            要设置的数据。 字符串或[CoercionType](xref:office!Office.CoercionType:enum)值、二维数组或 TableData 对象。

            如果传递的值 `data` 为：

            - 一个字符串： 将插入可以强制为 string 的纯文本或任何文本。 在 Excel 中，还可以将数据指定为有效公式，将该公式添加到选定的单元格中。 例如，将 data 设置为 "=SUM(A1:A5)" 将计算指定范围中值的总数。 但是，当在绑定单元格中设置公式时，设置后将无法从绑定单元格读取添加的公式（或任何已有公式）。 如果在选定的单元格上调用 Document.getSelectedDataAsync 方法以读取其数据，方法可能仅返回在单元格中显示的数据（即公式的结果）。

            - 数组的数组（“矩阵”）： 将插入不带标题的表数据。 例如，若要将数据写入两列中的三行，可以传递如下所示的数组： \[ \[ "R1C1"、"R1C2" \] 、 \[ "R2C1"、"R2C2" \] 、 \[ "R3C1"、"R3C2" \] \] 。 若要写入包含三行的单个列，请传递如下所示的数组： \[ \[ "R1C1" \] 、 \[ "R2C1" \] 、 \[ "R3C1"\]\]

            在 Excel 中，还可以将数据指定为数组的数组，其中包含将其添加到选定单元格的有效公式。 例如，如果不会覆盖任何其他数据，则将数据设置为 \[ \[ "= SUM （A1： a5）"，"= AVERAGE （A1： A5）" \] \] 会将这两个公式添加到所选内容中。 与在单个单元格上将公式设置为“text”一样，设置后你将无法读取添加的公式（或任何已有公式），只能读取公式的结果。

            - TableData 对象： 将插入带标题的表格。 在 Excel 中，如果在传递给 data 参数的 TableData 对象中指定了公式，则由于 Excel 的 "计算列" 功能（它会自动在列中重复公式），因此您可能无法获得预期的结果。 若要在要将包含公式的对象写入选定的表时解决此情况 `data` ，请尝试将数据指定为数组的数组（而不是 TableData 对象），并将该 coercionType 指定为 "Microsoft. matrix" 或 "matrix"。 但是，仅当满足以下条件之一时，此方法才会阻止 "计算列" 功能：（1）您正在写入列的所有单元格，或者（2）列中已有至少两个不同的公式。
          type:
            - 'office!Office.Document#setSelectedDataAsync~0:complex'
        - id: options
          description: 提供有关如何向选定内容中插入数据的选项。
          type:
            - 'office!Office.SetSelectedDataOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. AsyncResult 值属性始终返回 undefined，因为没有要检索的对象或数据。'
          type:
            - 'office!Office.Document#setSelectedDataAsync~1:complex'
  - uid: 'office!Office.Document#setSelectedDataAsync:member(2)'
    summary: 将指定的数据写入当前所选内容。
    remarks: |-
      **要求集**：

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->（使用时`Office.CoercionType.Html`<!-- -->)

      - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) （使用时`Office.CoercionType.Image`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) （使用时`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) （使用时`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) （使用时`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) （使用时`Office.CoercionType.Text`<!-- -->)

      - [ImageCoercion 1.2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) （使用时`Office.CoercionType.XmlSvg`<!-- -->)

      **特定于应用程序的行为**

      以下特定于应用程序的操作在向选定内容中写入数据时适用。

      <table> <tr> <td>Word</td> <td>如果没有选定内容且插入点位于有效位置，则在 `data` 插入点插入指定的</td> <td>如果 `data` 是字符串，则插入指定的文本。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是数组的数组（"矩阵"）或 TableData 对象，则插入一个新的 Word 表。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 为 HTML，则插入指定的 html。 （**重要说明**：如果插入的 HTML 中的任何 HTML 无效，则 Word 不会引发错误。 Word 将尽可能多地插入 HTML，并忽略任何无效数据。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是 Office OPEN xml，则插入指定的 xml。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是 base64 编码的图像流，则插入指定的图像。</td></tr></td> </tr> <tr> <td></td> <td>如果有选定内容</td> <td>它将被替换为与 `data` 上述相同规则相同的指定项。</td> </tr> <tr> <td></td> <td>插入图像</td> <td>插入的图像以内嵌方式放置。 imageLeft 和 imageTop 参数将被忽略。 图像的纵横比始终被锁定。 如果只给定 imageWidth 参数或只给定 imageHeight 参数，则另一个值将自动扩展以保留原始纵横比。</td> </tr>

      <tr> <td>Excel</td> <td>如果选择了单个单元格</td> <td>如果 `data` 是字符串，则将指定的文本作为当前单元格的值插入。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是数组的数组（"矩阵"），则插入一组指定的行和列（如果不会覆盖周围单元格中的其他任何数据）。</td> </tr> <tr> <td></td> <td></td> <td>如果 `data` 是 TableData 对象，则插入具有一组指定的行和标题的新 Excel 表（如果不会覆盖周围单元格中的其他任何数据）。</td> </tr> <tr> <td></td> <td>如果选择了多个单元格</td><td>If the shape does not match the shape of `data`<!-- -->，则会返回错误。</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->，则根据中的值更新所选单元格的值`data`<!-- -->.</td> </tr> <tr> <td></td> <td>插入图像</td> <td>插入的图像为浮动图像。 imageLeft 和 imageTop 位置参数是相对于当前选定的单元格而言的。 允许 imageLeft 和 imageTop 的值为负数，将由 Excel 重新调整在工作表内放置的图像位置。 除非 imageWidth 和 imageHeight 参数均已提供，否则将锁定图像的纵横比。 如果只给定 imageWidth 参数或只给定 imageHeight 参数，则另一个值将自动扩展以保留原始纵横比。</td> </tr> <tr> <td></td> <td>其他所有情况</td> <td>返回错误。</td> </tr>

      <tr> <td>Excel 网页版</td> <td>除了上述 Excel 所述的行为之外，在 Excel 网页版中写入数据时也适用这些限制</td> <td>对此方法的单个调用中，可以使用参数写入工作表的单元格总数 `data` 不能超过20000。</td> </tr> <tr> <td></td> <td></td> <td>传递给参数的格式组的数量 `cellFormat` 不能超过100。 每个格式设置组由应用于特定单元格范围的一组格式组成。</td> </tr>

      <tr> <td>PowerPoint</td> <td>插入图像</td> <td>插入的图像为浮动图像。 Position imageLeft 和 imageTop 参数是可选的，但如果提供，则应同时存在。 如果提供单个值，则它将被忽略。 允许 imageLeft 和 imageTop 的值为负数，且可以将图像放置在幻灯片的外部。 如果未给定任何可选参数，并且幻灯片有一个占位符，则图像将替换幻灯片中的占位符。 除非 imageWidth和 imageHeight 参数均已提供，否则将锁定图像纵横比。 如果只给定 imageWidth 参数或只给定 imageHeight 参数，则另一个值将自动扩展以保留原始纵横比。</td> </tr> </table>

      **类型特定的行为**

      <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>（仅限 Excel）：在生成16.0.11526.10000 时 SVG 插入的大小限制为64KB。</td> </tr> </table>

      **Hosts**

      [CoercionType](xref:office!Office.CoercionType:enum)参数的可能值因主机而异。

      <table> <tr> <th>Host</th> <th>支持的 coercionType</th> </tr> <tr> <td>Excel、PowerPoint、Project 和 Word</td> <td>`Office.CoercionType.Text`类似</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Matrix`（数组的数组）</td> </tr> <tr> <td>Excel 和 Word</td> <td>`Office.CoercionType.Table`（TableData 对象）</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`（Office Open XML）</td> </tr> <tr> <td>PowerPoint 在 web 和 Windows 上</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel、PowerPoint 和 Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            要设置的数据。 字符串或[CoercionType](xref:office!Office.CoercionType:enum)值、二维数组或 TableData 对象。

            如果传递的值 `data` 为：

            - 一个字符串： 将插入可以强制为 string 的纯文本或任何文本。 在 Excel 中，还可以将数据指定为有效公式，将该公式添加到选定的单元格中。 例如，将 data 设置为 "=SUM(A1:A5)" 将计算指定范围中值的总数。 但是，当在绑定单元格中设置公式时，设置后将无法从绑定单元格读取添加的公式（或任何已有公式）。 如果在选定的单元格上调用 Document.getSelectedDataAsync 方法以读取其数据，方法可能仅返回在单元格中显示的数据（即公式的结果）。

            - 数组的数组（“矩阵”）： 将插入不带标题的表数据。 例如，若要将数据写入两列中的三行，可以传递如下所示的数组： \[ \[ "R1C1"、"R1C2" \] 、 \[ "R2C1"、"R2C2" \] 、 \[ "R3C1"、"R3C2" \] \] 。 若要写入包含三行的单个列，请传递如下所示的数组： \[ \[ "R1C1" \] 、 \[ "R2C1" \] 、 \[ "R3C1"\]\]

            在 Excel 中，还可以将数据指定为数组的数组，其中包含将其添加到选定单元格的有效公式。 例如，如果不会覆盖任何其他数据，则将数据设置为 \[ \[ "= SUM （A1： a5）"，"= AVERAGE （A1： A5）" \] \] 会将这两个公式添加到所选内容中。 与在单个单元格上将公式设置为“text”一样，设置后你将无法读取添加的公式（或任何已有公式），只能读取公式的结果。

            - TableData 对象： 将插入带标题的表格。 在 Excel 中，如果在传递给 data 参数的 TableData 对象中指定了公式，则由于 Excel 的 "计算列" 功能（它会自动在列中重复公式），因此您可能无法获得预期的结果。 若要在要将包含公式的对象写入选定的表时解决此情况 `data` ，请尝试将数据指定为数组的数组（而不是 TableData 对象），并将该 coercionType 指定为 "Microsoft. matrix" 或 "matrix"。 但是，仅当满足以下条件之一时，此方法才会阻止 "计算列" 功能：（1）您正在写入列的所有单元格，或者（2）列中已有至少两个不同的公式。
          type:
            - 'office!Office.Document#setSelectedDataAsync~2:complex'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. AsyncResult 值属性始终返回 undefined，因为没有要检索的对象或数据。'
          type:
            - 'office!Office.Document#setSelectedDataAsync~3:complex'
  - uid: 'office!Office.Document#setTaskFieldAsync:member(1)'
    summary: |-
      仅限项目文档。 为指定的任务标识号设置任务域。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: 或者是任务 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 任务域。
          type:
            - number
        - id: fieldValue
          description: 目标字段的值。
          type:
            - string | number | boolean | object
        - id: options
          description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#setTaskFieldAsync~0:complex'
  - uid: 'office!Office.Document#setTaskFieldAsync:member(2)'
    summary: |-
      仅限项目文档。 为指定的任务标识号设置任务域。

      **重要说明**：此 API 仅适用于 Windows 桌面上的 Project 2016。
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's
          // currently selected in a task view. Then it sets two task field values by calling
          // setTaskFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the
          // addHandlerAsync method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function setTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          setTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected task.
              function setTaskFields(taskGuid) {
                  var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];
                  var fieldValues = [true, 'Notes for the task.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setTaskFieldAsync(
                          taskGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: 或者是任务 Id 的字符串或值。
          type:
            - string
        - id: fieldId
          description: 任务域。
          type:
            - number
        - id: fieldValue
          description: 目标字段的值。
          type:
            - string | number | boolean | object
        - id: callback
          description: '可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.'
          type:
            - 'office!Office.Document#setTaskFieldAsync~1:complex'
  - uid: 'office!Office.Document#settings:member'
    summary: 获取用于表示当前文档的内容或任务窗格应用程序的已保存自定义设置的对象。
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - 'office!Office.Settings:interface'
  - uid: 'office!Office.Document#url:member'
    summary: 获取主机应用程序当前打开的文档的 URL。 如果 URL 不可用，则返回 null。
    name: url
    fullName: url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>示例

          ```javascript
          function displayDocumentUrl() {
              write(Office.context.document.url);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.Document#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Bindings:interface'
    name: Bindings
  - uid: 'office!Office.CustomXmlParts:interface'
    name: CustomXmlParts
  - uid: 'office!Office.Document#getActiveViewAsync~0:complex'
    name: '(result: AsyncResult<"edit" | "read">) => void'
    fullName: '(result: Office.AsyncResult<"edit" | "read">) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <"edit" | "read">) => void
        fullName: <"edit" | "read">) => void
  - uid: 'office!Office.Document#getActiveViewAsync~1:complex'
    name: '(result: AsyncResult<"edit" | "read">) => void'
    fullName: '(result: Office.AsyncResult<"edit" | "read">) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <"edit" | "read">) => void
        fullName: <"edit" | "read">) => void
  - uid: 'office!Office.FileType:enum'
    name: FileType
  - uid: 'office!Office.GetFileOptions:interface'
    name: GetFileOptions
  - uid: 'office!Office.Document#getFileAsync~0:complex'
    name: '(result: AsyncResult<Office.File>) => void'
    fullName: '(result: Office.AsyncResult<Office.File>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.File:interface'
        name: Office.File
        fullName: Office.File
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getFileAsync~1:complex'
    name: '(result: AsyncResult<Office.File>) => void'
    fullName: '(result: Office.AsyncResult<Office.File>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.File:interface'
        name: Office.File
        fullName: Office.File
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getFilePropertiesAsync~0:complex'
    name: '(result: AsyncResult<Office.FileProperties>) => void'
    fullName: '(result: Office.AsyncResult<Office.FileProperties>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.FileProperties:interface'
        name: Office.FileProperties
        fullName: Office.FileProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getFilePropertiesAsync~1:complex'
    name: '(result: AsyncResult<Office.FileProperties>) => void'
    fullName: '(result: Office.AsyncResult<Office.FileProperties>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.FileProperties:interface'
        name: Office.FileProperties
        fullName: Office.FileProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.Document#getMaxResourceIndexAsync~0:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getMaxResourceIndexAsync~1:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getMaxTaskIndexAsync~0:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getMaxTaskIndexAsync~1:complex'
    name: '(result: AsyncResult<number>) => void'
    fullName: '(result: Office.AsyncResult<number>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <number>) => void
        fullName: <number>) => void
  - uid: 'office!Office.Document#getProjectFieldAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getProjectFieldAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getResourceByIndexAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getResourceByIndexAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getResourceFieldAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getResourceFieldAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CoercionType:enum'
    name: Office.CoercionType
  - uid: 'office!Office.GetSelectedDataOptions:interface'
    name: GetSelectedDataOptions
  - uid: 'office!Office.Document#getSelectedDataAsync~0:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.Document#getSelectedDataAsync~1:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.Document#getSelectedResourceAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedResourceAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedTaskAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedTaskAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getSelectedViewAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getSelectedViewAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskByIndexAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getTaskByIndexAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Document#getTaskFieldAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getTaskFieldAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getWSSUrlAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#getWSSUrlAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.GoToType:enum'
    name: GoToType
  - uid: 'office!Office.GoToByIdOptions:interface'
    name: GoToByIdOptions
  - uid: 'office!Office.Document#goToByIdAsync~0:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.Document#goToByIdAsync~1:complex'
    name: '(result: AsyncResult<any>) => void'
    fullName: '(result: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'office!Office.DocumentMode:enum'
    name: DocumentMode
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.Document#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setResourceFieldAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setResourceFieldAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setSelectedDataAsync~0:complex'
    name: 'string | TableData | any[][]'
    fullName: 'string | Office.TableData | any[][]'
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.SetSelectedDataOptions:interface'
    name: SetSelectedDataOptions
  - uid: 'office!Office.Document#setSelectedDataAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setSelectedDataAsync~2:complex'
    name: 'string | TableData | any[][]'
    fullName: 'string | Office.TableData | any[][]'
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.Document#setSelectedDataAsync~3:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setTaskFieldAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document#setTaskFieldAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Settings:interface'
    name: Settings