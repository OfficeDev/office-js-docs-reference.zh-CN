### YamlMime:TSType
name: Office.Binding
uid: office!Office.Binding:interface
package: office!
fullName: Office.Binding
summary: >-
  表示对文档的某一部分的绑定。


  绑定对象公开所有绑定所拥有的功能，而不考虑类型。


  永远不会直接调用 Binding 对象。 它是表示每种绑定类型的对象的抽象父类： [MatrixBinding](xref:office!Office.MatrixBinding:interface)<!-- -->、 [TableBinding](xref:office!Office.TableBinding:interface)<!-- -->或 [textbinding 添加](xref:office!Office.TextBinding:interface)<!-- -->. 所有这三个对象都继承了 Binding 对象中的 Binding.getdataasync 和 Binding.setdataasync 方法，这些方法允许您与绑定中的数据进行交互。 它们还继承 id 和 type 属性，以便查询这些属性值。 此外，MatrixBinding 和 TableBinding 对象揭示特定于矩阵和表的功能的其他方法，如对行和列计数。
remarks: >-
  **主机**： Excel、Word


  **要求集**：


  - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


  - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


  - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
isPreview: false
isDeprecated: false
type: interface
properties:
- name: document
  uid: office!Office.Binding#document:member
  package: office!
  fullName: document
  summary: 获取与绑定关联的 Document 对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'document: Office.Document;'
    return:
      type: <xref uid="office!Office.Document:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: id
  uid: office!Office.Binding#id:member
  package: office!
  fullName: id
  summary: 一个在同一 [Office.Document](xref:office!Office.Document:interface) 对象中的绑定之间唯一标识此绑定的字符串。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'id: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: type
  uid: office!Office.Binding#type:member
  package: office!
  fullName: type
  summary: 获取绑定的类型。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type: <xref uid="office!Office.BindingType:enum" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Binding#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: 将事件处理程序添加到指定的[Office 事件](xref:office!Office.EventType:enum)的对象。<!-- -->. 支持的 EventTypes 是 `Office.EventType.BindingDataChanged` 和 `Office.EventType.BindingSelectionChanged`<!-- -->.
  remarks: >-
    **要求集**： [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)


    只要每个事件处理程序函数的名称是唯一的，您就可以为指定的事件类型添加多个事件处理程序。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: 事件类型。 对于绑定，可以是 `Office.EventType.BindingDataChanged` 或 `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: 要添加的事件处理程序函数，其唯一的参数的类型为 [BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) 或 [BindingSelectionChangedEventArgs](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.
      type: any
    - id: options
      description: 提供一个选项，用于保留任何类型的未更改的上下文数据，以供在回调中使用。
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Binding#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: 将事件处理程序添加到指定的[Office 事件](xref:office!Office.EventType:enum)的对象。<!-- -->. 支持的 EventTypes 是 `Office.EventType.BindingDataChanged` 和 `Office.EventType.BindingSelectionChanged`<!-- -->.
  remarks: "**要求集**： [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)\n\n只要每个事件处理程序函数的名称是唯一的，您就可以为指定的事件类型添加多个事件处理程序。\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: 事件类型。 对于绑定，可以是 `Office.EventType.BindingDataChanged` 或 `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: 要添加的事件处理程序函数，其唯一的参数的类型为 [BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) 或 [BindingSelectionChangedEventArgs](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.
      type: any
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getDataAsync(options, callback)
  uid: office!Office.Binding#getDataAsync:member(1)
  package: office!
  fullName: getDataAsync(options, callback)
  summary: 返回绑定中包含的数据。
  remarks: >-
    **要求集**：


    - 使用时的[HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (`Office.CoercionType.Html`<!-- -->)


    - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


    - 使用时的[MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (`Office.CoercionType.Matrix`<!-- -->)


    - 使用时的[OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (`Office.CoercionType.Ooxml`<!-- -->)


    - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


    - 使用时的[TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (`Office.CoercionType.Table`<!-- -->)


    - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)


    - 使用时的[TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (`Office.CoercionType.Text`<!-- -->)


    从 MatrixBinding 或 TableBinding 调用时，如果 (指定了可选的 startRow、startColumn、rowCount 和 columnCount 参数，Binding.getdataasync 方法将返回绑定值的子集，并指定连续和有效的范围) 。
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: options
      description: 提供有关如何获取绑定中的数据的选项。
      type: <xref uid="office!Office.GetBindingDataOptions:interface" />
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性为指定绑定中的值。 如果 `coercionType` (指定参数，且调用成功) ，则数据将以 CoercionType 枚举主题中所述的格式返回。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getDataAsync(callback)
  uid: office!Office.Binding#getDataAsync:member(2)
  package: office!
  fullName: getDataAsync(callback)
  summary: 返回绑定中包含的数据。
  remarks: "**要求集**：\n\n- 使用时的[HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (`Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- 使用时的[MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (`Office.CoercionType.Matrix`<!-- -->)\n\n- 使用时的[OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (`Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- 使用时的[TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (`Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- 使用时的[TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (`Office.CoercionType.Text`<!-- -->)\n\n从 MatrixBinding 或 TableBinding 调用时，如果 (指定了可选的 startRow、startColumn、rowCount 和 columnCount 参数，Binding.getdataasync 方法将返回绑定值的子集，并指定连续和有效的范围) 。\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->. `value`结果的属性为指定绑定中的值。 如果 `coercionType` (指定参数，且调用成功) ，则数据将以 CoercionType 枚举主题中所述的格式返回。
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Binding#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: 从绑定移除指定事件类型的指定处理程序。
  remarks: '**要求集**： [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: 事件类型。 对于绑定，可以是 `Office.EventType.BindingDataChanged` 或 `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: 提供用于确定要删除的事件处理程序或处理程序的选项。
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Binding#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: 从绑定移除指定事件类型的指定处理程序。
  remarks: >-
    **要求集**： [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)


    #### <a name="examples"></a>示例


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: 事件类型。 对于绑定，可以是 `Office.EventType.BindingDataChanged` 或 `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setDataAsync(data, options, callback)
  uid: office!Office.Binding#setDataAsync:member(1)
  package: office!
  fullName: setDataAsync(data, options, callback)
  summary: 将数据写入指定的绑定对象表示的文档的绑定部分。
  remarks: >-
    **要求集**：


    - 使用时的[HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (`Office.CoercionType.Html`<!-- -->)


    - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


    - 使用时的[MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (`Office.CoercionType.Matrix`<!-- -->)


    - 使用时的[OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (`Office.CoercionType.Ooxml`<!-- -->)


    - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


    - 使用时的[TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (`Office.CoercionType.Table`<!-- -->)


    - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)


    - 使用时的[TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (`Office.CoercionType.Text`<!-- -->)


    为数据传递的值包含要在绑定中写入的数据。 传递的值的类型决定将要写入的内容，如下表中所示。


    <table> <tr> <th>`data` 增值</th> <th>写入的数据</th> </tr> <tr> <td>字符串</td> <td>将写入可以强制为 string 的纯文本或任何内容。</td> </tr> <tr> <td>数组的数组（“矩阵”）</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. 若要写入包含三行的单个列，请传递如下所示的数组： `[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>一个 `TableData` 对象</td> <td>将写入带标题的表格数据。</td> </tr> </table>


    此外，这些特定于应用程序的操作在将数据写入绑定时适用。 对于 Word，指定的数据被写入绑定，如下所示：


    <table> <tr> <th>`data` 增值</th> <th>写入的数据</th> </tr> <tr> <td>字符串</td> <td>写入指定的文本。</td> </tr> <tr> <td> ( "matrix" ) 或对象的数组的数组 `TableData`</td> <td>写入 Word 表格。</td> </tr> <tr> <td>HTML</td> <td>写入指定的 HTML。 如果您写入的任何 HTML 均有效，则 Word 将引发错误。 Word 将尽可能多的写入 HTML，并将省略任何无效数据。</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>写入指定的 XML。</td> </tr> </table>


    对于 Excel，按如下所示，指定的 data 写入绑定：


    <table> <tr> <th>`data` 增值</th> <th>写入的数据</th> </tr> <tr> <td>字符串</td> <td>将指定的文本作为第一个绑定单元格的值插入。您还可以指定一个有效公式，将该公式添加到绑定的单元格。 例如，将 data 设置为 `"=SUM(A1:A5)"` 将计算指定范围中值的总数。 但是，当在绑定单元格中设置公式时，设置后将无法从绑定单元格读取添加的公式（或任何已有公式）。 如果您在绑定单元格上调用 Binding.getDataAsync 方法以读取其数据，方法可能仅返回在单元格中显示的数据（即公式的结果）。</td> </tr> <tr> <td>数组的数组（“矩阵”），形状与指定绑定的形状完全匹配</td> <td>写入一组行和列。您还可以指定包含有效公式的数组的数组，以将它们添加到绑定的单元格。 例如，将数据设置为 `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` 将这两个公式添加到包含两个单元格的绑定。 就像在单个绑定单元格上设置公式一样，不能从使用方法的绑定中读取已添加的公式 (或任何预先存在的) 公式， `Binding.getDataAsync` 它只返回在绑定单元格中显示的数据。</td> </tr> <tr> <td>一个 `TableData` 对象，并且表的形状与绑定表匹配。</td> <td>写入一组指定的行和/或标题（如果不会覆盖周围单元格中的其他数据）。 **注意**：如果在传递给 *Data* 参数的 TableData 对象中指定了公式，则由于 Excel 的 "计算列" 功能（它会自动在列中重复公式），因此可能无法获得预期的结果。 若要在要将包含公式的 *数据* 写入绑定表时解决此情况，请尝试将数据指定为数组的数组 (而不是 TableData 对象) ，并将 coercionType 指定为 *coercionType* 或 "Matrix"。</td> </tr> </table>


    对于 web 上的 Excel：


    - 对此方法的单个调用中，传递给 data 参数的值中的单元格总数不能超过20000。


    - 传递给 cellFormat 参数的格式组的数量不能超过100。 每个格式设置组由应用于特定单元格范围的一组格式组成。


    在其他所有情况下，都会返回错误。


    如果指定了可选的 startRow 和 startColumn 参数，并且它们指定一个有效的范围，则 Binding.setdataasync 方法将在表或矩阵绑定的子集内写入数据。


    在传递给 setDataAsync 方法的回调函数中，您可以使用 AsyncResult 对象的属性返回以下信息。


    <table> <tr> <th>属性</th> <th>用于...</th> </tr> <tr> <td>AsyncResult.value</td> <td>始终返回 undefined，这是因为没有要检索的对象或数据。</td> </tr> <tr> <td>AsyncResult。状态</td> <td>确定操作是成功还是失败。</td> </tr> <tr> <td>AsyncResult.error</td> <td>如果操作失败，则访问提供错误信息的 Error 对象。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        当前选择中要设置的数据。 可能的数据类型（按主机）：


        string： web 和 Windows 上的 Excel 以及仅在 web 和 Windows 上的 Word


        数组的数组：仅 Excel 和 Word


        [TableData](xref:office!Office.TableData:class)<!-- -->：仅限 Excel 和 Word


        HTML：仅限 web 上的 Word 和 Windows


        Office Open XML：仅限 Word
      type: <xref uid="office!Office.TableData:class" /> | any
    - id: options
      description: 提供有关如何设置绑定中的数据的选项。
      type: <xref uid="office!Office.SetBindingDataOptions:interface" />
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setDataAsync(data, callback)
  uid: office!Office.Binding#setDataAsync:member(2)
  package: office!
  fullName: setDataAsync(data, callback)
  summary: 将数据写入指定的绑定对象表示的文档的绑定部分。
  remarks: "**要求集**：\n\n- 使用时的[HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (`Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- 使用时的[MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (`Office.CoercionType.Matrix`<!-- -->)\n\n- 使用时的[OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (`Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- 使用时的[TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (`Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- 使用时的[TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (`Office.CoercionType.Text`<!-- -->)\n\n为数据传递的值包含要在绑定中写入的数据。 传递的值的类型决定将要写入的内容，如下表中所示。\n\n<table> <tr> <th>`data` 增值</th> <th>写入的数据</th> </tr> <tr> <td>字符串</td> <td>将写入可以强制为 string 的纯文本或任何内容。</td> </tr> <tr> <td>数组的数组（“矩阵”）</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`<!-- -->. 若要写入包含三行的单个列，请传递如下所示的数组： `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`<!-- -->.</td> </tr> <tr> <td>一个 `TableData` 对象</td> <td>将写入带标题的表格数据。</td> </tr> </table>\n\n此外，这些特定于应用程序的操作在将数据写入绑定时适用。 对于 Word，指定的数据被写入绑定，如下所示：\n\n<table> <tr> <th>`data` 增值</th> <th>写入的数据</th> </tr> <tr> <td>字符串</td> <td>写入指定的文本。</td> </tr> <tr> <td> ( \"matrix\" ) 或对象的数组的数组 `TableData`</td> <td>写入 Word 表格。</td> </tr> <tr> <td>HTML</td> <td>写入指定的 HTML。 如果您写入的任何 HTML 均有效，则 Word 将引发错误。 Word 将尽可能多的写入 HTML，并将省略任何无效数据。</td> </tr> <tr> <td>Office Open XML (\"Open XML\")</td> <td>写入指定的 XML。</td> </tr> </table>\n\n对于 Excel，按如下所示，指定的 data 写入绑定：\n\n<table> <tr> <th>`data` 增值</th> <th>写入的数据</th> </tr> <tr> <td>字符串</td> <td>将指定的文本作为第一个绑定单元格的值插入。您还可以指定一个有效公式，将该公式添加到绑定的单元格。 例如，将 data 设置为 `\"=SUM(A1:A5)\"` 将计算指定范围中值的总数。 但是，当在绑定单元格中设置公式时，设置后将无法从绑定单元格读取添加的公式（或任何已有公式）。 如果您在绑定单元格上调用 Binding.getDataAsync 方法以读取其数据，方法可能仅返回在单元格中显示的数据（即公式的结果）。</td> </tr> <tr> <td>数组的数组（“矩阵”），形状与指定绑定的形状完全匹配</td> <td>写入一组行和列。您还可以指定包含有效公式的数组的数组，以将它们添加到绑定的单元格。 例如，将数据设置为 `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` 将这两个公式添加到包含两个单元格的绑定。 就像在单个绑定单元格上设置公式一样，不能从使用方法的绑定中读取已添加的公式 (或任何预先存在的) 公式， `Binding.getDataAsync` 它只返回在绑定单元格中显示的数据。</td> </tr> <tr> <td>一个 `TableData` 对象，并且表的形状与绑定表匹配。</td> <td>写入一组指定的行和/或标题（如果不会覆盖周围单元格中的其他数据）。 **注意**：如果在传递给 *Data* 参数的 TableData 对象中指定了公式，则由于 Excel 的 \"计算列\" 功能（它会自动在列中重复公式），因此可能无法获得预期的结果。 若要在要将包含公式的 *数据* 写入绑定表时解决此情况，请尝试将数据指定为数组的数组 (而不是 TableData 对象) ，并将 coercionType 指定为 *coercionType* 或 \"Matrix\"。</td> </tr> </table>\n\n对于 web 上的 Excel：\n\n- 对此方法的单个调用中，传递给 data 参数的值中的单元格总数不能超过20000。\n\n- 传递给 cellFormat 参数的格式组的数量不能超过100。 每个格式设置组由应用于特定单元格范围的一组格式组成。\n\n在其他所有情况下，都会返回错误。\n\n如果指定了可选的 startRow 和 startColumn 参数，并且它们指定一个有效的范围，则 Binding.setdataasync 方法将在表或矩阵绑定的子集内写入数据。\n\n在传递给 setDataAsync 方法的回调函数中，您可以使用 AsyncResult 对象的属性返回以下信息。\n\n<table> <tr> <th>属性</th> <th>用于...</th> </tr> <tr> <td>AsyncResult.value</td> <td>始终返回 undefined，这是因为没有要检索的对象或数据。</td> </tr> <tr> <td>AsyncResult。状态</td> <td>确定操作是成功还是失败。</td> </tr> <tr> <td>AsyncResult.error</td> <td>如果操作失败，则访问提供错误信息的 Error 对象。</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</td> </tr> </table>\n\n#### <a name=\"examples\"></a>示例\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        当前选择中要设置的数据。 可能的数据类型（按主机）：


        string： web 和 Windows 上的 Excel 以及仅在 web 和 Windows 上的 Word


        数组的数组：仅 Excel 和 Word


        `TableData`<!-- -->：仅限 Excel 和 Word


        HTML：仅限 web 上的 Word 和 Windows


        Office Open XML：仅限 Word
      type: <xref uid="office!Office.TableData:class" /> | any
    - id: callback
      description: 可选。 回调返回时调用的函数，其唯一的参数的类型为 " [Office. AsyncResult](xref:office!Office.AsyncResult:interface) "<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 911e6146ab18fe4fbc4129b3e53d72949dbccd6f
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49151364"
