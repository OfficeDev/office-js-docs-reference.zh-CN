### YamlMime:UniversalReference
ms.openlocfilehash: 6de66b31956353c279ae7a557d994e4522957f88
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 11/09/2018
ms.locfileid: "26233559"
items:
- uid: office.OfficeExtension.LoadOption
  summary: <span data-ttu-id="17c22-101">指定应加载对象的属性。</span><span class="sxs-lookup"><span data-stu-id="17c22-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="17c22-102">执行 sync() 方法时发生该负载。</span><span class="sxs-lookup"><span data-stu-id="17c22-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="17c22-103">这将同步 Office 对象和相应的 JavaScript 代理对象之间的状态。</span><span class="sxs-lookup"><span data-stu-id="17c22-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>
  remarks: >-
    <span data-ttu-id="17c22-104">Word，用于指定属性和分页信息的首选的方法是使用字符串。</span><span class="sxs-lookup"><span data-stu-id="17c22-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="17c22-105">前两个示例演示请求段落集合中的段落的文本和字体大小属性的首选的方法：</span><span class="sxs-lookup"><span data-stu-id="17c22-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>


    `context.load(paragraphs, 'text, font/size');`


    `paragraphs.load('text, font/size');`


    <span data-ttu-id="17c22-106">下面是使用对象表示法（包括分页）的类似示例：</span><span class="sxs-lookup"><span data-stu-id="17c22-106">Here is a similar example using object notation (includes paging):</span></span>


    `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    <span data-ttu-id="17c22-107">请注意，如果我们未在 select 语句中指定字体对象的特定属性，expand 语句本身将指示需加载所有字体属性。</span><span class="sxs-lookup"><span data-stu-id="17c22-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

    #### <a name="examples"></a><span data-ttu-id="17c22-108">示例</span><span class="sxs-lookup"><span data-stu-id="17c22-108">Examples</span></span>


    ```javascript

    // This example shows how to get the paragraphs in the Word document

    // along with their text and font size properties.


    // Run a batch operation against the Word object model.

    Word.run(function (context) {
        // Create a proxy object for the paragraphs collection.
        var paragraphs = context.document.body.paragraphs;

        // Queue a commmand to load the text and font properties.
        // It is best practice to always specify the property set.
        // Otherwise, all properties are returned on the object.
        context.load(paragraphs, 'text, font/size');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            // Insert code that works with the paragraphs loaded by context.load().
        })
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: OfficeExtension.LoadOption
  fullName: OfficeExtension.LoadOption
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.OfficeExtension.LoadOption.expand
  - office.OfficeExtension.LoadOption.select
  - office.OfficeExtension.LoadOption.skip
  - office.OfficeExtension.LoadOption.top
- uid: office.OfficeExtension.LoadOption.expand
  summary: <span data-ttu-id="17c22-109">逗号分隔的字符串数组中，指定要加载的导航属性。</span><span class="sxs-lookup"><span data-stu-id="17c22-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>
  name: expand
  fullName: expand
  langs:
  - typeScript
  type: property
  syntax:
    content: 'expand?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.select
  summary: <span data-ttu-id="17c22-110">逗号分隔的字符串数组中，指定要加载的属性。</span><span class="sxs-lookup"><span data-stu-id="17c22-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>
  name: select
  fullName: select
  langs:
  - typeScript
  type: property
  syntax:
    content: 'select?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.skip
  summary: <span data-ttu-id="17c22-111">仅对集合类型可用。</span><span class="sxs-lookup"><span data-stu-id="17c22-111">Only usable on collection types.</span></span> <span data-ttu-id="17c22-112">指定要跳过和未包含在结果集中的项目数。</span><span class="sxs-lookup"><span data-stu-id="17c22-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="17c22-113">如果指定顶部，则将跳过指定的数目的项后启动结果集。</span><span class="sxs-lookup"><span data-stu-id="17c22-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: skip
  fullName: skip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'skip?: number;'
    return:
      type:
      - number
- uid: office.OfficeExtension.LoadOption.top
  summary: <span data-ttu-id="17c22-114">仅对集合类型可用。</span><span class="sxs-lookup"><span data-stu-id="17c22-114">Only usable on collection types.</span></span> <span data-ttu-id="17c22-115">指定可以在结果中包含的集合项的最大数目。</span><span class="sxs-lookup"><span data-stu-id="17c22-115">Specifies the maximum number of collection items that can be included in the result.</span></span>
  name: top
  fullName: top
  langs:
  - typeScript
  type: property
  syntax:
    content: 'top?: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"17c22-116\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"17c22-116\">Examples</span></span>\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
