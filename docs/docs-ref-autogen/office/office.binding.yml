### YamlMime:UniversalReference
ms.openlocfilehash: b1d044de456112bc072c377636742d04c9b51e84
ms.sourcegitcommit: a36161c2113d94680dc68150d024e68bdf0390fa
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 10/10/2018
ms.locfileid: "25458041"
items:
- uid: office.Office.Binding
  summary: <span data-ttu-id="44a17-101">表示对一部分文档的绑定。</span><span class="sxs-lookup"><span data-stu-id="44a17-101">Represents a binding to a section of the document.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="44a17-102">要求集</span><span class="sxs-lookup"><span data-stu-id="44a17-102">Requirement Sets</span></span></td><td><span data-ttu-id="44a17-103">MatrixBinding, TableBinding, TextBinding</span><span class="sxs-lookup"><span data-stu-id="44a17-103">MatrixBinding, TableBinding, TextBinding</span></span></td></tr></table>


    <span data-ttu-id="44a17-104">Binding 对象公开揭示所有绑定无论类型的功能。</span><span class="sxs-lookup"><span data-stu-id="44a17-104">The Binding object exposes the functionality possessed by all bindings regardless of type.</span></span>


    <span data-ttu-id="44a17-105">从不直接调用的 Binding 对象。</span><span class="sxs-lookup"><span data-stu-id="44a17-105">The Binding object is never called directly.</span></span> <span data-ttu-id="44a17-106">它是表示每种类型的绑定的对象的抽象父类别： [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->， [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->，或[Office.TextBinding](xref:office.Office.TextBinding)<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-106">It is the abstract parent class of the objects that represent each type of binding: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->, or [Office.TextBinding](xref:office.Office.TextBinding)<!-- -->.</span></span> <span data-ttu-id="44a17-107">所有这三个这些对象继承 getDataAsync 和 setDataAsync 方法从 Binding 对象使您与绑定中的数据进行交互。</span><span class="sxs-lookup"><span data-stu-id="44a17-107">All three of these objects inherit the getDataAsync and setDataAsync methods from the Binding object that enable to you interact with the data in the binding.</span></span> <span data-ttu-id="44a17-108">他们还继承查询这些属性值的 id 和类型的属性。</span><span class="sxs-lookup"><span data-stu-id="44a17-108">They also inherit the id and type properties for querying those property values.</span></span> <span data-ttu-id="44a17-109">此外的 MatrixBinding 或 TableBinding 对象公开矩阵和表格特定功能，例如计数的行和列数的其他的方法。</span><span class="sxs-lookup"><span data-stu-id="44a17-109">Additionally, the MatrixBinding and TableBinding objects expose additional methods for matrix- and table-specific features, such as counting the number of rows and columns.</span></span>


    <span data-ttu-id="44a17-110">**支持详细信息**</span><span class="sxs-lookup"><span data-stu-id="44a17-110">**Support details**</span></span>


    <span data-ttu-id="44a17-111">在以下矩阵大写 Y 表示此接口支持在相应的 Office 主机应用程序。</span><span class="sxs-lookup"><span data-stu-id="44a17-111">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="44a17-112">空单元格指示 Office 主机应用程序不支持此接口。</span><span class="sxs-lookup"><span data-stu-id="44a17-112">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="44a17-113">有关 Office 主机应用程序和服务器要求的详细信息，请参阅[Requirements for Office 加载项运行](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-113">For more information about Office host application and server requirements, see [ Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="44a17-114">*支持的主机（按平台）*</span><span class="sxs-lookup"><span data-stu-id="44a17-114">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="44a17-115">Office for Windows Desktop</span><span class="sxs-lookup"><span data-stu-id="44a17-115">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="44a17-116">Office Online（在浏览器中）</span><span class="sxs-lookup"><span data-stu-id="44a17-116">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="44a17-117">Office for iPad</span><span class="sxs-lookup"><span data-stu-id="44a17-117">Office for iPad</span></span> </th></tr> <tr><td><span data-ttu-id="44a17-118"><strong>访问</strong></span><span class="sxs-lookup"><span data-stu-id="44a17-118"><strong> Access </strong></span></span></td><td> </td><td> <span data-ttu-id="44a17-119">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-119">Y</span></span> </td><td> </td></tr> <tr><td><span data-ttu-id="44a17-120"><strong>Excel</strong></span><span class="sxs-lookup"><span data-stu-id="44a17-120"><strong> Excel </strong></span></span></td><td> <span data-ttu-id="44a17-121">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-121">Y</span></span> </td><td> <span data-ttu-id="44a17-122">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-122">Y</span></span> </td><td> <span data-ttu-id="44a17-123">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-123">Y</span></span> </td></tr> <tr><td><span data-ttu-id="44a17-124"><strong>Word</strong></span><span class="sxs-lookup"><span data-stu-id="44a17-124"><strong> Word </strong></span></span></td><td> <span data-ttu-id="44a17-125">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-125">Y</span></span> </td><td> <span data-ttu-id="44a17-126">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-126">Y</span></span> </td><td> <span data-ttu-id="44a17-127">Y</span><span class="sxs-lookup"><span data-stu-id="44a17-127">Y</span></span> </td></tr> </table>
  name: Office.Binding
  fullName: office.Office.Binding
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Binding.addHandlerAsync
  - office.Office.Binding.document
  - office.Office.Binding.getDataAsync
  - office.Office.Binding.id
  - office.Office.Binding.removeHandlerAsync
  - office.Office.Binding.setDataAsync
  - office.Office.Binding.type
- uid: office.Office.Binding.addHandlerAsync
  summary: <span data-ttu-id="44a17-128">将事件处理程序添加到该对象指定[Office.EventType](xref:office.Office.EventType)<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-128">Adds an event handler to the object for the specified [Office.EventType](xref:office.Office.EventType)<!-- -->.</span></span> <span data-ttu-id="44a17-129">支持的 EventTypes 是`Office.EventType.BindingDataChanged`和`Office.EventType.BindingSelectionChanged` <!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-129">Supported EventTypes are `Office.EventType.BindingDataChanged` and `Office.EventType.BindingSelectionChanged`<!-- -->.</span></span>
  remarks: "<span data-ttu-id=\"44a17-130\">只要每个事件处理程序函数的名称是唯一的您可以添加为指定的 eventType 的多个事件处理程序。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-130\">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"44a17-131\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-131\">Examples</span></span>\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.Binding.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="44a17-132">事件类型。</span><span class="sxs-lookup"><span data-stu-id="44a17-132">The event type.</span></span> <span data-ttu-id="44a17-133">对于绑定，它可以是`Office.EventType.BindingDataChanged`或`Office.EventType.BindingSelectionChanged` <!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-133">For bindings, it can be `Office.EventType.BindingDataChanged` or `Office.EventType.BindingSelectionChanged`<!-- -->.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="44a17-134">事件处理程序函数添加，其唯一参数属于类型[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs)或[Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-134">The event handler function to add, whose only parameter is of type [Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) or [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.</span></span>
      type:
      - any
    - id: options
      description: <span data-ttu-id="44a17-135">提供用于保留不变，用于在回调中的任何类型的上下文数据的选项。</span><span class="sxs-lookup"><span data-stu-id="44a17-135">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="44a17-136">可选。</span><span class="sxs-lookup"><span data-stu-id="44a17-136">Optional.</span></span> <span data-ttu-id="44a17-137">在回调返回时调用的其唯一参数的类型[Office.AsyncResult](xref:office.Office.AsyncResult)函数<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-137">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.document
  summary: <span data-ttu-id="44a17-138">获取与绑定关联的 Document 对象。</span><span class="sxs-lookup"><span data-stu-id="44a17-138">Get the Document object associated with the binding.</span></span>
  name: document
  fullName: office.Office.Binding.document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'document: Office.Document;'
    return:
      type:
      - office.Office.Document
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"44a17-139\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-139\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.getDataAsync
  summary: <span data-ttu-id="44a17-140">返回绑定中包含的数据。</span><span class="sxs-lookup"><span data-stu-id="44a17-140">Returns the data contained within the binding.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"44a17-141\">要求集</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-141\">Requirement Sets</span></span></td><td><span data-ttu-id=\"44a17-142\">MatrixBindings, TableBindings, TextBindings</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-142\">MatrixBindings, TableBindings, TextBindings</span></span></td></tr></table>\n\n<span data-ttu-id=\"44a17-143\">当从 MatrixBinding 或 TableBinding 调用，getDataAsync 方法将返回绑定值的子集，如果指定了可选 startRow、 startColumn、 rowCount 和 columnCount 参数 （且它们指定连续且有效范围）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-143\">When called from a MatrixBinding or TableBinding, the getDataAsync method will return a subset of the bound values if the optional startRow, startColumn, rowCount, and columnCount parameters are specified (and they specify a contiguous and valid range).</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"44a17-144\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-144\">Examples</span></span>\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  name: getDataAsync(options, callback)
  fullName: office.Office.Binding.getDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="44a17-145">提供了有关如何获取绑定中数据的选项。</span><span class="sxs-lookup"><span data-stu-id="44a17-145">Provides options for how to get the data in a binding.</span></span>
      type:
      - office.Office.GetBindingDataOptions
    - id: callback
      description: <span data-ttu-id="44a17-146">可选。</span><span class="sxs-lookup"><span data-stu-id="44a17-146">Optional.</span></span> <span data-ttu-id="44a17-147">在回调返回时调用的其唯一参数的类型[Office.AsyncResult](xref:office.Office.AsyncResult)函数<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-147">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="44a17-148">`value`属性的结果是指定绑定中的值。</span><span class="sxs-lookup"><span data-stu-id="44a17-148">The `value` property of the result is the values in the specified binding.</span></span> <span data-ttu-id="44a17-149">如果`coercionType`指定参数 （且呼叫是成功），以 CoercionType 枚举主题中所述的格式返回的数据。</span><span class="sxs-lookup"><span data-stu-id="44a17-149">If the `coercionType` parameter is specified (and the call is successful), the data is returned in the format described in the CoercionType enumeration topic.</span></span>
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.id
  summary: <span data-ttu-id="44a17-150">一个唯一标识此同一[Office.Document](xref:office.Office.Document)对象中绑定之间的绑定的字符串。</span><span class="sxs-lookup"><span data-stu-id="44a17-150">A string that uniquely identifies this binding among the bindings in the same [Office.Document](xref:office.Office.Document) object.</span></span>
  name: id
  fullName: office.Office.Binding.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"44a17-151\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-151\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.removeHandlerAsync
  summary: <span data-ttu-id="44a17-152">从绑定移除指定事件类型的指定处理程序。</span><span class="sxs-lookup"><span data-stu-id="44a17-152">Removes the specified handler from the binding for the specified event type.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="44a17-153">要求集</span><span class="sxs-lookup"><span data-stu-id="44a17-153">Requirement Sets</span></span></td><td><span data-ttu-id="44a17-154">BindingEvents</span><span class="sxs-lookup"><span data-stu-id="44a17-154">BindingEvents</span></span></td></tr></table>

    #### <span data-ttu-id="44a17-155">示例</span><span class="sxs-lookup"><span data-stu-id="44a17-155">Examples</span></span>


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  name: removeHandlerAsync(eventType, options, callback)
  fullName: office.Office.Binding.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="44a17-156">事件类型。</span><span class="sxs-lookup"><span data-stu-id="44a17-156">The event type.</span></span> <span data-ttu-id="44a17-157">对于绑定，它可以是`Office.EventType.BindingDataChanged`或`Office.EventType.BindingSelectionChanged` <!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-157">For bindings, it can be `Office.EventType.BindingDataChanged` or `Office.EventType.BindingSelectionChanged`<!-- -->.</span></span>
      type:
      - Office.EventType
    - id: options
      description: <span data-ttu-id="44a17-158">提供选项以确定哪些事件处理程序或处理程序将删除。</span><span class="sxs-lookup"><span data-stu-id="44a17-158">Provides options to determine which event handler or handlers are removed.</span></span>
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: <span data-ttu-id="44a17-159">可选。</span><span class="sxs-lookup"><span data-stu-id="44a17-159">Optional.</span></span> <span data-ttu-id="44a17-160">在回调返回时调用的其唯一参数的类型[Office.AsyncResult](xref:office.Office.AsyncResult)函数<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-160">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync
  summary: <span data-ttu-id="44a17-161">将数据写入指定的绑定对象表示的文档的绑定部分。</span><span class="sxs-lookup"><span data-stu-id="44a17-161">Writes data to the bound section of the document represented by the specified binding object.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"44a17-162\">要求集</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-162\">Requirement Sets</span></span></td><td><span data-ttu-id=\"44a17-163\">MatrixBindings, TableBindings, TextBindings</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-163\">MatrixBindings, TableBindings, TextBindings</span></span></td></tr></table>\n\n<span data-ttu-id=\"44a17-164\">为数据传递的值包含绑定中写入的数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-164\">The value passed for data contains the data to be written in the binding.</span></span> <span data-ttu-id=\"44a17-165\">传递值的类型确定下表中所述，将写入内容。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-165\">The kind of value passed determines what will be written as described in the following table.</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"44a17-166\">`data`值</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-166\">`data` value</span></span></th> <th><span data-ttu-id=\"44a17-167\">写入的数据</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-167\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"44a17-168\">一个字符串</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-168\">A string</span></span></td> <td><span data-ttu-id=\"44a17-169\">纯文本或可以强制为 string 的任何内容，将写入。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-169\">Plain text or anything that can be coerced to a string will be written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-170\">数组的数组（“矩阵”）</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-170\">An array of arrays (\"matrix\")</span></span></td> <td><span data-ttu-id=\"44a17-171\">将写入不带标题的表格数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-171\">Tabular data without headers will be written.</span></span> <span data-ttu-id=\"44a17-172\">例如，将数据写入三行两列中，可以传递类似如下的数组： `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]` <!-- -->。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-172\">For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`<!-- -->.</span></span> <span data-ttu-id=\"44a17-173\">若要写入一列的三行，传递类似如下的数组： `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]` <!-- -->。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-173\">To write a single column of three rows, pass an array like this: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`<!-- -->.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-174\">[Office.TableData](xref:office.Office.TableData)对象</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-174\">An [Office.TableData](xref:office.Office.TableData) object</span></span></td> <td><span data-ttu-id=\"44a17-175\">将写入带标题的表格数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-175\">A table with headers will be written.</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"44a17-176\">此外，这些特定于应用程序的操作在将数据写入绑定时适用。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-176\">Additionally, these application-specific actions apply when writing data to a binding.</span></span> <span data-ttu-id=\"44a17-177\">对于 Word，将指定的 data 写入绑定如下：</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-177\">For Word, the specified data is written to the binding as follows:</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"44a17-178\">`data`值</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-178\">`data` value</span></span></th> <th><span data-ttu-id=\"44a17-179\">写入的数据</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-179\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"44a17-180\">一个字符串</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-180\">A string</span></span></td> <td><span data-ttu-id=\"44a17-181\">写入指定的文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-181\">The specified text is written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-182\">数组的数组 （\"矩阵\"） 或[Office.TableData](xref:office.Office.TableData)对象</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-182\">An array of arrays (\"matrix\") or an [Office.TableData](xref:office.Office.TableData) object</span></span></td> <td><span data-ttu-id=\"44a17-183\">写入 Word 表格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-183\">A Word table is written.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-184\">HTML</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-184\">HTML</span></span></td> <td><span data-ttu-id=\"44a17-185\">写入指定的 HTML。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-185\">The specified HTML is written.</span></span> <span data-ttu-id=\"44a17-186\">如果任何您编写无效的 HTML，Word 将不会引发错误。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-186\">If any of the HTML you write is invalid, Word will not raise an error.</span></span> <span data-ttu-id=\"44a17-187\">Word 将写入尽可能多的 html，因为它可以并将忽略任何无效数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-187\">Word will write as much of the HTML as it can and will omit any invalid data.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-188\">Office Open XML (\"Open XML\")</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-188\">Office Open XML (\"Open XML\")</span></span></td> <td><span data-ttu-id=\"44a17-189\">写入指定的 XML。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-189\">The specified the XML is written.</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"44a17-190\">适用于 Excel，将指定的 data 写入绑定如下：</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-190\">For Excel, the specified data is written to the binding as follows:</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"44a17-191\">`data`值</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-191\">`data` value</span></span></th> <th><span data-ttu-id=\"44a17-192\">写入的数据</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-192\">Data written</span></span></th> </tr> <tr> <td><span data-ttu-id=\"44a17-193\">一个字符串</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-193\">A string</span></span></td> <td><span data-ttu-id=\"44a17-194\">指定的文本将作为第一个绑定单元格的值插入。您还可以指定有效的公式添加到绑定的单元格的公式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-194\">The specified text is inserted as the value of the first bound cell.You can also specify a valid formula to add that formula to the bound cell.</span></span> <span data-ttu-id=\"44a17-195\">例如，将 data 设置为 `\"=SUM(A1:A5)\"` 将计算指定区域中值的总数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-195\">For example, setting data to `\"=SUM(A1:A5)\"` will total the values in the specified range.</span></span> <span data-ttu-id=\"44a17-196\">但是，当你在绑定单元格中设置公式时，设置后将无法从绑定单元格读取添加的公式（或任何已有公式）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-196\">However, when you set a formula on the bound cell, after doing so, you can't read the added formula (or any pre-existing formula) from the bound cell.</span></span> <span data-ttu-id=\"44a17-197\">如果要读取其数据的绑定单元格上调用 Binding.getDataAsync 方法，该方法可以返回仅显示在单元格中 （公式的结果） 的数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-197\">If you call the Binding.getDataAsync method on the bound cell to read its data, the method can return only the data displayed in the cell (the formula's result).</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-198\">数组的数组（“矩阵”），形状与指定绑定的形状完全匹配</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-198\">An array of arrays (\"matrix\"), and the shape exactly matches the shape of the binding specified</span></span></td> <td><span data-ttu-id=\"44a17-199\">写入一组的行和列。您还可以指定包含有效的公式，以将它们添加到绑定的单元格的数组的数组。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-199\">The set of rows and columns are written.You can also specify an array of arrays that contain valid formulas to add them to the bound cells.</span></span> <span data-ttu-id=\"44a17-200\">例如，将数据设置为`[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]`会将这些两个公式添加到包含两个单元格的绑定。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-200\">For example, setting data to `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` will add those two formulas to a binding that contains two cells.</span></span> <span data-ttu-id=\"44a17-201\">就像在上一个绑定单元格设置公式，您不能从与绑定读取添加的公式 （或任何事先公式）`Binding.getDataAsync`方法-其返回绑定的单元格中显示的数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-201\">Just as when setting a formula on a single bound cell, you can't read the added formulas (or any pre-existing formulas) from the binding with the `Binding.getDataAsync` method - it returns only the data displayed in the bound cells.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-202\">[Office.TableData](xref:office.Office.TableData)对象和表格的形状与绑定的表匹配。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-202\">An [Office.TableData](xref:office.Office.TableData) object, and the shape of the table matches the bound table.</span></span></td> <td><span data-ttu-id=\"44a17-p115\">如果不会覆盖周围单元格中的其他数据，则写入一组行和/或标题。注意：如果您在为 data 参数传递的 *TableData* 对象中指定公式，您可能无法获取预期的结果，这是由于 Excel 的“计算列”功能，此功能会自动复制列中的公式。要解决此问题，如果您希望将包含公式的 *data* 写入到绑定表中，请尝试将数据指定为数组的数组（而非 TableData 对象），并将 *coercionType* 指定为 Microsoft.Office.Matrix 或“矩阵”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-p115\">The specified set of rows and/or headers are written, if no other data in surrounding cells will be overwritten. Note: If you specify formulas in the TableData object you pass for the *data* parameter, you might not get the results you expect due to the \"calculated columns\" feature of Excel, which automatically duplicates formulas within a column. To work around this when you want to write *data* that contains formulas to a bound table, try specifying the data as an array of arrays (instead of a TableData object), and specify the *coercionType* as Microsoft.Office.Matrix or \"matrix\".</span></span></td> </tr> </table>\n\n<span data-ttu-id=\"44a17-206\">Excel Online:</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-206\">For Excel Online:</span></span>\n\n- <span data-ttu-id=\"44a17-207\">在传递给 data 参数的值的单元格的总数不能超过 20000 中单个调用此方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-207\">The total number of cells in the value passed to the data parameter can't exceed 20,000 in a single call to this method.</span></span>\n\n- <span data-ttu-id=\"44a17-208\">传递到 cellFormat 参数的格式组的数量不能超过 100。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-208\">The number of formatting groups passed to the cellFormat parameter can't exceed 100.</span></span> <span data-ttu-id=\"44a17-209\">单个格式组包括一组应用于特定单元格范围的格式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-209\">A single formatting group consists of a set of formatting applied to a specified range of cells.</span></span>\n\n<span data-ttu-id=\"44a17-210\">在其他所有情况下，都会返回错误。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-210\">In all other cases, an error is returned.</span></span>\n\n<span data-ttu-id=\"44a17-211\">则 setDataAsync 方法将表或矩阵绑定如果指定了可选 startRow 和 startColumn 参数，并且它们指定一个有效的范围的子集中写入数据。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-211\">The setDataAsync method will write data in a subset of a table or matrix binding if the optional startRow and startColumn parameters are specified, and they specify a valid range.</span></span>\n\n<span data-ttu-id=\"44a17-212\">在传递给 setDataAsync 方法的回调函数，您可以使用 AsyncResult 对象的属性返回以下信息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-212\">In the callback function passed to the setDataAsync method, you can use the properties of the AsyncResult object to return the following information.</span></span>\n\n<table> <tr> <th><span data-ttu-id=\"44a17-213\">属性</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-213\">Property</span></span></th> <th><span data-ttu-id=\"44a17-214\">用于...</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-214\">Use to...</span></span></th> </tr> <tr> <td><span data-ttu-id=\"44a17-215\">AsyncResult.value</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-215\">AsyncResult.value</span></span></td> <td><span data-ttu-id=\"44a17-216\">始终返回 undefined，因为没有要检索数据或对象。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-216\">Always returns undefined because there is no object or data to retrieve.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-217\">AsyncResult.status</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-217\">AsyncResult.status</span></span></td> <td><span data-ttu-id=\"44a17-218\">确定操作是成功还是失败。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-218\">Determine the success or failure of the operation.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-219\">AsyncResult.error</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-219\">AsyncResult.error</span></span></td> <td><span data-ttu-id=\"44a17-220\">如果操作失败，则访问提供错误信息的 Error 对象。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-220\">Access an Error object that provides error information if the operation failed.</span></span></td> </tr> <tr> <td><span data-ttu-id=\"44a17-221\">AsyncResult.asyncContext</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-221\">AsyncResult.asyncContext</span></span></td> <td><span data-ttu-id=\"44a17-222\">在 AsyncResult 对象中未经改动的返回的任何类型的用户定义项。</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-222\">A user-defined item of any type that is returned in the AsyncResult object without being altered.</span></span></td> </tr> </table>\n#### <span data-ttu-id=\"44a17-223\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-223\">Examples</span></span>\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  name: setDataAsync(data, options, callback)
  fullName: office.Office.Binding.setDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        <span data-ttu-id="44a17-224">当前选择中要设置的数据。</span><span class="sxs-lookup"><span data-stu-id="44a17-224">The data to be set in the current selection.</span></span> <span data-ttu-id="44a17-225">通过主机可能的数据类型：</span><span class="sxs-lookup"><span data-stu-id="44a17-225">Possible data types by host:</span></span>


        <span data-ttu-id="44a17-226">字符串： Excel、 Excel Online、 Word 和 Word Online 仅</span><span class="sxs-lookup"><span data-stu-id="44a17-226">string: Excel, Excel Online, Word, and Word Online only</span></span>


        <span data-ttu-id="44a17-227">数组的数组： Excel 和仅限 Word</span><span class="sxs-lookup"><span data-stu-id="44a17-227">array of arrays: Excel and Word only</span></span>


        <span data-ttu-id="44a17-228">[Office.TableData](xref:office.Office.TableData)<!-- -->: Access、 Excel 和仅限 Word</span><span class="sxs-lookup"><span data-stu-id="44a17-228">[Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel, and Word only</span></span>


        <span data-ttu-id="44a17-229">HTML: Word 和仅限 Word Online</span><span class="sxs-lookup"><span data-stu-id="44a17-229">HTML: Word and Word Online only</span></span>


        <span data-ttu-id="44a17-230">仅限 Word office Open XML:</span><span class="sxs-lookup"><span data-stu-id="44a17-230">Office Open XML: Word only</span></span>
      type:
      - TableData | any
    - id: options
      description: <span data-ttu-id="44a17-231">提供有关如何将数据绑定中设置选项。</span><span class="sxs-lookup"><span data-stu-id="44a17-231">Provides options for how to set the data in a binding.</span></span>
      type:
      - office.Office.SetBindingDataOptions
    - id: callback
      description: <span data-ttu-id="44a17-232">可选。</span><span class="sxs-lookup"><span data-stu-id="44a17-232">Optional.</span></span> <span data-ttu-id="44a17-233">在回调返回时调用的其唯一参数的类型[Office.AsyncResult](xref:office.Office.AsyncResult)函数<!-- -->。</span><span class="sxs-lookup"><span data-stu-id="44a17-233">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.type
  summary: <span data-ttu-id="44a17-234">获取绑定的类型。</span><span class="sxs-lookup"><span data-stu-id="44a17-234">Gets the type of the binding.</span></span>
  name: type
  fullName: office.Office.Binding.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type:
      - Office.BindingType
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"44a17-235\">示例</span><span class=\"sxs-lookup\"><span data-stu-id=\"44a17-235\">Examples</span></span>\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
